{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LEAP (Learning-Enabled Abstraction for Planning) # CogMan: cognitive manager that employs strategists and commonsense knowledge to solve big, complex problems Pre-problem Strategists: a sequence of (learned) components that map a big problem into a sequence of smaller problems by making hierarchical or temporal abstractions HPN: (v1) relax preconditions with fixed hierarchy (v2) with learned importance score PLOI: (v1) find minimum set of objects at the beginning of solving the problem (v2) change the set dynamically C2S2 (context-conditioned subgoal suggestor): (v1) with 3-gram models (v2) with language models Post-problem Strategists: a sequence of components that improve a plan VNS: to change the order of operators, e.g. open the fridge only once to get both the meat and cheese Usage # Run run.py with the domain and problem pddl files, along with the sequence of strategists to use. The code searches for the pddl files in all sub-directories of domains/ . ## the general template python run.py domain.pddl problem.pddl -o 'large_domain_objects.pddl' -p [fd/pp] -s 'hpn,c2s2,pre-strategists separated by comma' -v [0/1/2] -e 'experiment_output_directory' ## this should work and generate an output dir with plan and log in experiments/dev python run.py kitchen_1.pddl omelette_5.pddl -o obj_3.pddl -v 2 -e 'experiments/dev' ## this needs to run successfully for every new version of the code and domain files ./tests.sh Note that kitchen_3.pddl and obj_eggs.pddl are currently being actively developed for a larger kitchen domain. Helper functions: ## post_experiments.py prints a table of experimental stats in directory python generators/post_experiments.py experiments/kitchen_operators ## init_objects.py converts doc/objects.md file to PDDL tuples of types and objects python generators/init_objects.py Available Planners # df : FastDownward with lama-first. Better than PyperPlan in that it can take ADL expressions for using forall/exists/when. It also supports action costs and axioms (see downward/driver/aliases.py and Doc/Evaluator ). But it doesn't support PDDL 2+ and 3+ features, like fluents, numerical planning, temporal planning, soft goals & preferences. ALIASES[\"lama-first\"] = [ \"--evaluator\", \"hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)\", \"--evaluator\", \"hff=ff(transform=adapt_costs(one))\", \"--search\", \"\"\"lazy_greedy([hff,hlm],preferred=[hff,hlm], cost_type=one,reopen_closed=false)\"\"\"] pp : PyperPlan with Greedy Best First Search and FF heuristic Available Strategists # hpn , ploi or c2s2 : output the original domain and problem pddl Domains # In this project we focus on robot doing everyday household tasks instead of puzzle-like IPC domains (e.g. in FF Domain Collection and IPC2018 domains . Some of my thoughts Partial observability: doing the laundry requires finding dirty clothes in the room until no more can be found (as opposed to knowing how many clothes are dirty and where they are) The domain knowledge should be robot agnostic, i.e. same basic domain knowledge for robot with one arm and two arms Some aspects of the household tasks that are unable to do with PDDL 2.1 / FastDownward: Some actions need to be prevented, like putting down a fork on the table instead of a burner because the burner would burn the fork, but because the way that axioms are derived, it cannot keep track of the fact that the fork has been burnt. so for now we write the surface must be safe to put the fork on Kitchen domain # (exist-egg-in-hole ?x - env) (exist-poached-egg ?x - env) (exist-baked-egg ?x - env) (exist-boiled-egg ?x - env) (exist-deviled-egg ?x - env) (exist-cloud-egg ?x - env) (exist-quiche ?x - env) Experiments # Write your test script like test_goals.sh with all test cases. You can also add the following lines to tests.sh : chmod +x test_something.sh ./test_something.sh","title":"LEAP Architecture"},{"location":"#leap-learning-enabled-abstraction-for-planning","text":"CogMan: cognitive manager that employs strategists and commonsense knowledge to solve big, complex problems Pre-problem Strategists: a sequence of (learned) components that map a big problem into a sequence of smaller problems by making hierarchical or temporal abstractions HPN: (v1) relax preconditions with fixed hierarchy (v2) with learned importance score PLOI: (v1) find minimum set of objects at the beginning of solving the problem (v2) change the set dynamically C2S2 (context-conditioned subgoal suggestor): (v1) with 3-gram models (v2) with language models Post-problem Strategists: a sequence of components that improve a plan VNS: to change the order of operators, e.g. open the fridge only once to get both the meat and cheese","title":"LEAP (Learning-Enabled Abstraction for Planning)"},{"location":"#usage","text":"Run run.py with the domain and problem pddl files, along with the sequence of strategists to use. The code searches for the pddl files in all sub-directories of domains/ . ## the general template python run.py domain.pddl problem.pddl -o 'large_domain_objects.pddl' -p [fd/pp] -s 'hpn,c2s2,pre-strategists separated by comma' -v [0/1/2] -e 'experiment_output_directory' ## this should work and generate an output dir with plan and log in experiments/dev python run.py kitchen_1.pddl omelette_5.pddl -o obj_3.pddl -v 2 -e 'experiments/dev' ## this needs to run successfully for every new version of the code and domain files ./tests.sh Note that kitchen_3.pddl and obj_eggs.pddl are currently being actively developed for a larger kitchen domain. Helper functions: ## post_experiments.py prints a table of experimental stats in directory python generators/post_experiments.py experiments/kitchen_operators ## init_objects.py converts doc/objects.md file to PDDL tuples of types and objects python generators/init_objects.py","title":"Usage"},{"location":"#available-planners","text":"df : FastDownward with lama-first. Better than PyperPlan in that it can take ADL expressions for using forall/exists/when. It also supports action costs and axioms (see downward/driver/aliases.py and Doc/Evaluator ). But it doesn't support PDDL 2+ and 3+ features, like fluents, numerical planning, temporal planning, soft goals & preferences. ALIASES[\"lama-first\"] = [ \"--evaluator\", \"hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)\", \"--evaluator\", \"hff=ff(transform=adapt_costs(one))\", \"--search\", \"\"\"lazy_greedy([hff,hlm],preferred=[hff,hlm], cost_type=one,reopen_closed=false)\"\"\"] pp : PyperPlan with Greedy Best First Search and FF heuristic","title":"Available Planners"},{"location":"#available-strategists","text":"hpn , ploi or c2s2 : output the original domain and problem pddl","title":"Available Strategists"},{"location":"#domains","text":"In this project we focus on robot doing everyday household tasks instead of puzzle-like IPC domains (e.g. in FF Domain Collection and IPC2018 domains . Some of my thoughts Partial observability: doing the laundry requires finding dirty clothes in the room until no more can be found (as opposed to knowing how many clothes are dirty and where they are) The domain knowledge should be robot agnostic, i.e. same basic domain knowledge for robot with one arm and two arms Some aspects of the household tasks that are unable to do with PDDL 2.1 / FastDownward: Some actions need to be prevented, like putting down a fork on the table instead of a burner because the burner would burn the fork, but because the way that axioms are derived, it cannot keep track of the fact that the fork has been burnt. so for now we write the surface must be safe to put the fork on","title":"Domains"},{"location":"#kitchen-domain","text":"(exist-egg-in-hole ?x - env) (exist-poached-egg ?x - env) (exist-baked-egg ?x - env) (exist-boiled-egg ?x - env) (exist-deviled-egg ?x - env) (exist-cloud-egg ?x - env) (exist-quiche ?x - env)","title":"Kitchen domain"},{"location":"#experiments","text":"Write your test script like test_goals.sh with all test cases. You can also add the following lines to tests.sh : chmod +x test_something.sh ./test_something.sh","title":"Experiments"},{"location":"domain-grocery/","text":"Grocery shopping domain # The grocery shopping domain is designed where action costs depend on the mode of transportation, distance between locations, and places to shop. The great city of Boston is simulated: Types and Predicates # Transportation happens between location s, which are marked either by dots or squares An area , represented by a black dot, is a large location . Areas contain precise location s, which are represented by colored squares. Each precise location also contains a unmarked parkinglot , which is also of type location Action costs # Cost of traveling time: # Between areas, cost of driving is 4, while cost of walking is 8 Between an area and its locations, cost of driving or walking is 2 Between locations in an area, cost of driving or walking is 4 = 2 + 2 Cost of shopping: # In terms of pricing, brothers-market (1) > wholefoods (4) > traderjoes / star-market / c-mart (4), whose costs are 30, 20, 10 for each iterm respectively At butchers-shop (2), each item costs 30 At chocolate-shop (3), each item costs 20 At pastry (4), each item costs 10 Other costs: # Cost of parking is 5 anywhere Costs of other operators are 1 Category of shopping: # All markets sell ingredient Places that sell utensil : wholefoods , star-market , cmart Places that sell lambchop : butchers Places that sell bread : pastry Places that sell alcohol : brothers-market , wholefoods , star-market Places that sell pasta : brothers-market Places that sell chocolate : chocolate-shop cmart doesn't sell seafood traderjoes doesn't sell baverages Experimental results on action costs # There are 9 places that sell veggie1 and egg1 , and 2 places that sell lamb-chop1 shop-veggie.pddl requires purchase of veggie1 ; shop-omelette.pddl requires purchase of veggies1 and egg1 lama-firt chose to walk to Brother's Market, which is close but expensive lama chose to drive to Trader Joe's Newburry Street, which is farther but cheapest shop-lamb-plate.pddl requires purchase of veggies1 and lamb-chop1 : Both chose to buy lambchop at Butcher's Shop Beason Hill lama-firt chose to buy veggie1 at Brother's Market lama chose to buy veggie1 at Trader Joe's Newburry Street t run_name var op axiom plan cost parse search state ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115254 shop_veggies, pln=lama_first 148 392 170 8 75 0.089 0.00033575 11 115255 shop_veggies, pln=lama 148 392 170 18 67 0.086 0.0968291 3191 ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115255 shop_omelette, pln=lama_first 159 402 170 10 106 0.088 0.000423083 14 115256 shop_omelette, pln=lama 159 402 170 20 78 0.087 0.390508 12204 ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115256 shop_lamb_plate, pln=lama_first 154 395 172 22 310 0.089 0.000801125 28 115257 shop_lamb_plate, pln=lama 154 395 172 27 122 0.087 0.410943 12599","title":"Grocery - action costs"},{"location":"domain-grocery/#grocery-shopping-domain","text":"The grocery shopping domain is designed where action costs depend on the mode of transportation, distance between locations, and places to shop. The great city of Boston is simulated:","title":"Grocery shopping domain"},{"location":"domain-grocery/#types-and-predicates","text":"Transportation happens between location s, which are marked either by dots or squares An area , represented by a black dot, is a large location . Areas contain precise location s, which are represented by colored squares. Each precise location also contains a unmarked parkinglot , which is also of type location","title":"Types and Predicates"},{"location":"domain-grocery/#action-costs","text":"","title":"Action costs"},{"location":"domain-grocery/#cost-of-traveling-time","text":"Between areas, cost of driving is 4, while cost of walking is 8 Between an area and its locations, cost of driving or walking is 2 Between locations in an area, cost of driving or walking is 4 = 2 + 2","title":"Cost of traveling time:"},{"location":"domain-grocery/#cost-of-shopping","text":"In terms of pricing, brothers-market (1) > wholefoods (4) > traderjoes / star-market / c-mart (4), whose costs are 30, 20, 10 for each iterm respectively At butchers-shop (2), each item costs 30 At chocolate-shop (3), each item costs 20 At pastry (4), each item costs 10","title":"Cost of shopping:"},{"location":"domain-grocery/#other-costs","text":"Cost of parking is 5 anywhere Costs of other operators are 1","title":"Other costs:"},{"location":"domain-grocery/#category-of-shopping","text":"All markets sell ingredient Places that sell utensil : wholefoods , star-market , cmart Places that sell lambchop : butchers Places that sell bread : pastry Places that sell alcohol : brothers-market , wholefoods , star-market Places that sell pasta : brothers-market Places that sell chocolate : chocolate-shop cmart doesn't sell seafood traderjoes doesn't sell baverages","title":"Category of shopping:"},{"location":"domain-grocery/#experimental-results-on-action-costs","text":"There are 9 places that sell veggie1 and egg1 , and 2 places that sell lamb-chop1 shop-veggie.pddl requires purchase of veggie1 ; shop-omelette.pddl requires purchase of veggies1 and egg1 lama-firt chose to walk to Brother's Market, which is close but expensive lama chose to drive to Trader Joe's Newburry Street, which is farther but cheapest shop-lamb-plate.pddl requires purchase of veggies1 and lamb-chop1 : Both chose to buy lambchop at Butcher's Shop Beason Hill lama-firt chose to buy veggie1 at Brother's Market lama chose to buy veggie1 at Trader Joe's Newburry Street t run_name var op axiom plan cost parse search state ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115254 shop_veggies, pln=lama_first 148 392 170 8 75 0.089 0.00033575 11 115255 shop_veggies, pln=lama 148 392 170 18 67 0.086 0.0968291 3191 ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115255 shop_omelette, pln=lama_first 159 402 170 10 106 0.088 0.000423083 14 115256 shop_omelette, pln=lama 159 402 170 20 78 0.087 0.390508 12204 ------ ------------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 115256 shop_lamb_plate, pln=lama_first 154 395 172 22 310 0.089 0.000801125 28 115257 shop_lamb_plate, pln=lama 154 395 172 27 122 0.087 0.410943 12599","title":"Experimental results on action costs"},{"location":"domain-housework/","text":"Housework domain # Motivations # We are interested in robots performing long-horizon household tasks with daily objects, thus the robot's motion planning must go beyond picking and placing convex objects, to manipulate a variety to joints. So we need to develop controlers and samplers for manipulating objects given urdf files (we'll do point cloud or RGBD image later). With those samplers, we'll be able to better test the limitations of existing TAMP planners without learned abstractions. Example articulated objects in PartNet-Mobility Dataset : Example world in PyBullet # Steps # Implement abstract operators that ignores preconditions on robot and object configuration, test world state transition Add samplers for opening (a drawer, a door, a bottle), pouring, and other operators","title":"Housework - TAMP [ NEW ]"},{"location":"domain-housework/#housework-domain","text":"","title":"Housework domain"},{"location":"domain-housework/#motivations","text":"We are interested in robots performing long-horizon household tasks with daily objects, thus the robot's motion planning must go beyond picking and placing convex objects, to manipulate a variety to joints. So we need to develop controlers and samplers for manipulating objects given urdf files (we'll do point cloud or RGBD image later). With those samplers, we'll be able to better test the limitations of existing TAMP planners without learned abstractions. Example articulated objects in PartNet-Mobility Dataset :","title":"Motivations"},{"location":"domain-housework/#example-world-in-pybullet","text":"","title":"Example world in PyBullet"},{"location":"domain-housework/#steps","text":"Implement abstract operators that ignores preconditions on robot and object configuration, test world state transition Add samplers for opening (a drawer, a door, a bottle), pouring, and other operators","title":"Steps"},{"location":"domain-kitchen/","text":"Kitchen Domain # Original kitchen domain for purely task planning","title":"Kitchen - large universe"},{"location":"domain-kitchen/#kitchen-domain","text":"Original kitchen domain for purely task planning","title":"Kitchen Domain"},{"location":"domain-logistics/","text":"Logistics domain # for testing planner modes, action costs, t run_name var op axiom plan cost parse search state ------ ------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 130147 pln=lama_first 3 28 0 4 52 0.008 0.0001545 6 ------ ------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 130148 pln=lama 3 28 0 5 32 0.014 0.00314392 52 130148 pln=seq_sat_lama_2011 3 28 0 5 32 0.011 0.00379796 52 130149 pln=seq_sat_fd_autotune_1 3 28 0 5 32 0.013 0.00683321 31 130149 pln=seq_sat_fd_autotune_2 3 28 0 5 32 0.008 0.00677617 35 130149 pln=seq_opt_bjolp 3 28 0 5 32 0.01 0.000458125 1 130150 pln=seq_opt_lmcut 3 28 0 5 32 0.008 0.000239667 0 130150 pln=v1 3 28 0 5 32 0.01 0.000414417 6","title":"Logistics domain"},{"location":"domain-logistics/#logistics-domain","text":"for testing planner modes, action costs, t run_name var op axiom plan cost parse search state ------ ------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 130147 pln=lama_first 3 28 0 4 52 0.008 0.0001545 6 ------ ------------------------- ----- ---- ------- ------ ------ ------- ----------- ------- 130148 pln=lama 3 28 0 5 32 0.014 0.00314392 52 130148 pln=seq_sat_lama_2011 3 28 0 5 32 0.011 0.00379796 52 130149 pln=seq_sat_fd_autotune_1 3 28 0 5 32 0.013 0.00683321 31 130149 pln=seq_sat_fd_autotune_2 3 28 0 5 32 0.008 0.00677617 35 130149 pln=seq_opt_bjolp 3 28 0 5 32 0.01 0.000458125 1 130150 pln=seq_opt_lmcut 3 28 0 5 32 0.008 0.000239667 0 130150 pln=v1 3 28 0 5 32 0.01 0.000414417 6","title":"Logistics domain"},{"location":"domain-restaurant/","text":"Restaurant # To create problems with hiearchical plans, we extend the Kitchen domain: to make multiple dishes to achieve higher goals like making customers happy. The steps include modifying operators and adding axioms so that: the same ingredients won't be used again, and the planner should return failure if there isn't enough ingredients some preparation steps, once taken for one dish, don't need to be taken again for the second dish, e.g. boil water","title":"Restaurant"},{"location":"domain-restaurant/#restaurant","text":"To create problems with hiearchical plans, we extend the Kitchen domain: to make multiple dishes to achieve higher goals like making customers happy. The steps include modifying operators and adding axioms so that: the same ingredients won't be used again, and the planner should return failure if there isn't enough ingredients some preparation steps, once taken for one dish, don't need to be taken again for the second dish, e.g. boil water","title":"Restaurant"},{"location":"exp-customer-happy/","text":"t run_name var op axiom plan parse search state ------ ------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 150641 kitchen_customer_1, sunny_side_up, obj_serve.pddl 363 4620 186 30 11.085 0.0187609 118 150652 kitchen_customer_1, poached_egg, obj_serve.pddl 411 4993 218 24 10.632 0.0129606 112 150702 kitchen_customer_1, customer_happy, obj_serve.pddl 364 4620 187 30 9.48 0.016258 118 150712 kitchen_customer_2, customer_happy, obj_serve.pddl 421 4993 228 30 9.743 0.0165533 118 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 150722 kitchen_customer_3, multiple_14, obj_customer.pddl 388 4620 210 65 9.683 0.146468 1093 150732 kitchen_customer_3, multiple_24, obj_customer.pddl 380 4620 202 61 9.542 0.152171 1149 150743 kitchen_customer_3, customer_happier, obj_customer.pddl 390 4620 212 65 9.672 0.151038 1093 150753 kitchen_customer_4, customer_happier, obj_customer.pddl 399 4620 221 61 9.582 0.155256 1149 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 150803 kitchen_customer_5, customer_pay, obj_customer.pddl 410 4620 232 30 9.765 0.016663 118 150814 kitchen_customer_6, customer_pay, obj_customer.pddl 467 4993 273 30 11.186 0.0186 118","title":"Exp customer happy"},{"location":"exp-egg-recipes/","text":"Different egg recipes -> Search time corresponds to # of axioms and depth of search, instead of # of operators or length of plan # Experiment Design # test_egg_recipes_*.sh tests the search complexity of 5 different egg-related recipes, with increasingly large domain (i.e. types, predicates, operators, axioms) and environments (i.e. objects). The five recipes include: omelette.pddl specifies beaten, folded eggs with veggies scrambled_eggs.pddl specifies beaten, scrambled eggs sunny_side_up.pddl specifies fried, steamed eggs on frypan egg_in_hole.pddl specifies fried egg in the hole of a bread poached_egg.pddl specifies boiled egg with vinegar The five domains include: kitchen_egg_1 contains the minumum of knowledge for making omelette kitchen_egg_2 contains the minumum of knowledge for making omelette, scrambled_eggs kitchen_egg_3 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up kitchen_egg_4 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up, egg_in_hole kitchen_egg_5 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up, egg_in_hole, and poached_egg The five sets of objects include: obj_0 , obj_egg_4 , and obj_egg_5 contain the minimum set of objects for kitchen_egg_1 , kitchen_egg_4 and kitchen_egg_5 obj_3 , obj_egg_4_m , and obj_egg_5_m contain 10 eggs and 10 veggies obj_4 , obj_egg_4_l , and obj_egg_5_l contain 2 copies of every utensil obj_4_xl , obj_egg_4_xl , and obj_egg_5_xl contain both (1) 10 eggs and 10 veggies, and (2) 2 copies of every utensil obj_4_xxl , obj_egg_4_xxl , and obj_egg_5_xxl contain both (1) 10 eggs and 10 veggies, and (2) 4 copies of every utensil Experiment Results # Summary of results: with the minimum domain and object set, FD can solve a recipe within 0.001s when the environment contains both extended ingredients (e.g. eggs) and utensils (e.g. pans) Note: rows with - means exceeding 5 min timeout blank rows means running out of memory during instantiation, which results in failed planning var , op , axiom columns contain the number of variables, operators, and axioms used during planning plan column contain the length of searched plan cost column contain the total cost of the plan (unit cost for now) parse , search columns contain the timer in seconds for the parsing and search procedures state column contain number of states expanded When the environment conians the minumum sets of objects: # t run_name var op axiom plan cost parse search state ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210933 kitchen_egg_1, omelette, obj_0.pddl 60 932 27 47 47 0.511 0.0102195 165 210934 kitchen_egg_2, omelette, obj_0.pddl 60 932 27 47 47 0.506 0.0102126 165 210935 kitchen_egg_3, omelette, obj_0.pddl 60 932 27 47 47 0.501 0.0103028 165 210939 kitchen_egg_4, omelette, obj_egg_4.pddl 91 2507 109 47 47 3.914 0.0372211 396 210943 kitchen_egg_5, omelette, obj_egg_4.pddl 176 2409 109 53 53 4.182 0.0226506 253 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210944 kitchen_egg_2, scrambled_eggs, obj_0.pddl 56 931 27 41 41 0.518 0.0106634 167 210945 kitchen_egg_3, scrambled_eggs, obj_0.pddl 56 931 27 41 41 0.513 0.0111647 167 210949 kitchen_egg_4, scrambled_eggs, obj_egg_4.pddl 86 2504 109 41 41 3.847 0.0299068 316 210953 kitchen_egg_5, scrambled_eggs, obj_egg_4.pddl 160 2296 109 47 47 3.889 0.0275968 299 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210957 kitchen_egg_3, sunny_side_up, obj_egg_4.pddl 55 2035 69 28 28 3.777 0.00625692 79 211002 kitchen_egg_4, sunny_side_up, obj_egg_4.pddl 71 2048 106 28 28 4.012 0.00861308 113 211006 kitchen_egg_5, sunny_side_up, obj_egg_4.pddl 125 1800 106 30 30 4.004 0.00890017 106 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 211011 kitchen_egg_4, egg_in_hole, obj_egg_4.pddl 74 2051 107 30 30 4.467 0.00610388 89 211016 kitchen_egg_5, egg_in_hole, obj_egg_4.pddl 139 1913 107 30 30 4.06 0.00703404 89 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 211022 kitchen_egg_5, poached_egg, obj_egg_5.pddl 154 2273 76 22 22 6.156 0.00708321 85 Results by lama : t run_name var op axiom plan cost parse search state ------ ---------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 142958 kitchen_egg_1, omelette, obj_0 60 932 27 - - 0.616 (>9.44) - 143008 kitchen_egg_2, omelette, obj_0 60 932 27 - - 0.619 (>9.43) - 143018 kitchen_egg_3, omelette, obj_0 60 932 27 - - 0.617 (>9.43) - 143028 kitchen_egg_4, omelette, obj_egg_4 91 2507 109 - - 3.762 (>6.29) - 143038 kitchen_egg_5, omelette, obj_egg_4 176 2409 109 47 47 3.88 0.11066937 (>6.17) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143049 kitchen_egg_2, scrambled_eggs, obj_0 56 931 27 - - 0.594 (>9.46) - 143059 kitchen_egg_3, scrambled_eggs, obj_0 56 931 27 - - 0.64 (>9.41) - 143109 kitchen_egg_4, scrambled_eggs, obj_egg_4 86 2504 109 40 40 3.811 0.11181831 (>6.24) 143119 kitchen_egg_5, scrambled_eggs, obj_egg_4 160 2296 109 40 40 3.922 0.11346054 (>6.15) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143130 kitchen_egg_3, sunny_side_up, obj_egg_4 55 2035 69 27 27 4.133 0.08899832 (>5.95) 143140 kitchen_egg_4, sunny_side_up, obj_egg_4 71 2048 106 - - 3.768 (>6.28) - 143150 kitchen_egg_5, sunny_side_up, obj_egg_4 125 1800 106 26 26 3.843 0.08267236 (>6.20) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143201 kitchen_egg_4, egg_in_hole, obj_egg_4 74 2051 107 - - 3.7 (>6.35) - 143211 kitchen_egg_5, egg_in_hole, obj_egg_4 139 1913 107 - - 3.869 (>6.17) - ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143221 kitchen_egg_5, poached_egg, obj_egg_5 154 2273 76 - - 5.968 (>4.08) - When the environment contains 10 eggs and 10 veggies: # t run_name var op axiom plan cost parse search state ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211058 kitchen_egg_1, omelette, obj_3.pddl 294 3542 198 47 47 3.094 0.0526419 424 211102 kitchen_egg_2, omelette, obj_3.pddl 294 3542 198 47 47 2.944 0.0616637 424 211105 kitchen_egg_3, omelette, obj_3.pddl 294 3542 198 47 47 3.019 0.0565081 424 211118 kitchen_egg_4, omelette, obj_egg_4_m.pddl 343 7529 316 56 56 12.792 0.0668754 404 211133 kitchen_egg_5, omelette, obj_egg_4_m.pddl 626 7431 298 56 56 13.545 0.0705151 411 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211136 kitchen_egg_2, scrambled_eggs, obj_3.pddl 254 3532 108 40 40 2.903 0.0366719 308 211139 kitchen_egg_3, scrambled_eggs, obj_3.pddl 254 3532 108 40 40 2.894 0.0412128 308 211152 kitchen_egg_4, scrambled_eggs, obj_egg_4_m.pddl 293 7499 226 49 49 12.401 0.0757157 376 211205 kitchen_egg_5, scrambled_eggs, obj_egg_4_m.pddl 466 6301 208 49 49 12.471 0.0562253 378 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211217 kitchen_egg_3, sunny_side_up, obj_egg_4_m.pddl 136 5896 141 27 27 11.877 0.0155547 114 211229 kitchen_egg_4, sunny_side_up, obj_egg_4_m.pddl 161 6008 196 33 33 11.721 0.0161065 127 211242 kitchen_egg_5, sunny_side_up, obj_egg_4_m.pddl 314 4770 178 33 33 12.421 0.0177018 132 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211255 kitchen_egg_4, egg_in_hole, obj_egg_4_m.pddl 137 5984 206 30 30 12.555 0.01446 111 211308 kitchen_egg_5, egg_in_hole, obj_egg_4_m.pddl 202 3866 188 30 30 12.363 0.0149113 117 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211326 kitchen_egg_5, poached_egg, obj_egg_5_m.pddl 325 5288 130 22 22 17.672 0.012724 87 When the environment contains 2 copies of every utensil: # t run_name var op axiom plan cost parse search state ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214116 kitchen_egg_1, omelette, obj_4.pddl 124 2849 29 68 68 1.667 0.068268 680 214118 kitchen_egg_2, omelette, obj_4.pddl 124 2849 29 68 68 1.658 0.0702724 680 214120 kitchen_egg_3, omelette, obj_4.pddl 124 2849 29 68 68 1.673 0.0694334 680 214133 kitchen_egg_4, omelette, obj_egg_4_l.pddl 221 7611 214 61 61 12.611 0.144819 798 214147 kitchen_egg_5, omelette, obj_egg_4_l.pddl 286 7193 214 61 61 13.244 0.140403 795 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214149 kitchen_egg_2, scrambled_eggs, obj_4.pddl 120 2847 29 41 41 1.671 0.0206573 257 214151 kitchen_egg_3, scrambled_eggs, obj_4.pddl 120 2847 29 41 41 1.681 0.0220964 257 214231 kitchen_egg_4, scrambled_eggs, obj_egg_4_l.pddl 216 7605 214 - - - - 214613 kitchen_egg_5, scrambled_eggs, obj_egg_4_l.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214626 kitchen_egg_3, sunny_side_up, obj_egg_4_l.pddl 135 6008 144 29 29 12.612 0.0185011 147 214639 kitchen_egg_4, sunny_side_up, obj_egg_4_l.pddl 161 6031 211 39 39 12.586 0.0221366 166 214653 kitchen_egg_5, sunny_side_up, obj_egg_4_l.pddl 205 5053 211 39 39 13.067 0.0255738 189 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214706 kitchen_egg_4, egg_in_hole, obj_egg_4_l.pddl 164 6037 213 42 42 13.148 0.0352553 320 214720 kitchen_egg_5, egg_in_hole, obj_egg_4_l.pddl 229 5479 213 42 42 13.249 0.0364352 323 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214741 kitchen_egg_5, poached_egg, obj_egg_5_l.pddl 251 6743 125 22 22 20.288 0.0145595 87 When the environment contains both 10 eggs & veggies and 2 copies of every utensil: # t run_name var op axiom plan cost parse search state ------ ------------------------------------------------ ----- ----- ------- ------ ------ ------- --------- ------- 063459 kitchen_egg_1, omelette, obj_4_xl.pddl 358 9419 299 51 51 12.865 0.41591 1618 063510 kitchen_egg_2, omelette, obj_4_xl.pddl 358 9419 299 51 51 10.020 0.300098 1618 063520 kitchen_egg_3, omelette, obj_4_xl.pddl 358 9419 299 51 51 9.076 0.312746 1618 063603 kitchen_egg_4, omelette, obj_egg_4_xl.pddl 473 20769 538 51 51 41.736 0.555485 1198 063650 kitchen_egg_5, omelette, obj_egg_4_xl.pddl 916 20351 520 51 51 45.486 0.433745 1250 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 063702 kitchen_egg_2, scrambled_eggs, obj_4_xl.pddl 318 9399 119 49 49 9.801 2.03623 11475 063714 kitchen_egg_3, scrambled_eggs, obj_4_xl.pddl 318 9399 119 49 49 9.362 1.99511 11475 064214 kitchen_egg_4, scrambled_eggs, obj_egg_4_xl.pddl 423 20709 358 - - - - 064715 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 064759 kitchen_egg_3, sunny_side_up, obj_egg_4_xl.pddl 216 16304 243 28 28 43.585 0.0399582 176 064843 kitchen_egg_4, sunny_side_up, obj_egg_4_xl.pddl 251 16498 328 32 32 43.429 0.062769 223 064927 kitchen_egg_5, sunny_side_up, obj_egg_4_xl.pddl 484 11740 310 32 32 43.212 0.0515667 233 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 065014 kitchen_egg_4, egg_in_hole, obj_egg_4_xl.pddl 227 16450 348 40 40 45.568 0.0986753 342 065059 kitchen_egg_5, egg_in_hole, obj_egg_4_xl.pddl 292 8332 330 40 40 44.505 0.0635933 348 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 065203 kitchen_egg_5, poached_egg, obj_egg_5_xl.pddl 521 13889 179 22 22 63.058 0.0241492 89 When the environment contains both 10 eggs & veggies and 4 copies of every utensil: # t run_name var op axiom plan cost parse search state ------ ------------------------------------------------- ----- ----- ------- ------ ------ ------- -------- ------- 065450 kitchen_egg_1, omelette, obj_4_xxl.pddl 444 32749 501 51 51 40.412 0.507984 1109 065531 kitchen_egg_2, omelette, obj_4_xxl.pddl 444 32749 501 51 51 38.870 0.545349 1109 065611 kitchen_egg_3, omelette, obj_4_xxl.pddl 444 32749 501 51 51 38.807 0.507466 1109 070053 kitchen_egg_4, omelette, obj_egg_4_xxl.pddl 633 68565 1086 51 51 278.485 1.10617 1198 070403 kitchen_egg_5, omelette, obj_egg_4_xxl.pddl 1496 66847 1068 51 51 186.607 1.09691 1250 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 070447 kitchen_egg_2, scrambled_eggs, obj_4_xxl.pddl 404 32709 141 49 49 39.293 2.88542 6592 070530 kitchen_egg_3, scrambled_eggs, obj_4_xxl.pddl 404 32709 141 49 49 39.271 2.92493 6592 071030 kitchen_egg_4, scrambled_eggs, obj_egg_4_xxl.pddl 583 68445 726 - - - - 071531 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl.pddl 1036 50327 708 - - - - ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 071959 kitchen_egg_3, sunny_side_up, obj_egg_4_xxl.pddl 316 54536 551 28 28 265.509 0.153392 176 072500 kitchen_egg_4, sunny_side_up, obj_egg_4_xxl.pddl 073000 kitchen_egg_5, sunny_side_up, obj_egg_4_xxl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 073501 kitchen_egg_4, egg_in_hole, obj_egg_4_xxl.pddl 074003 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 074005 kitchen_egg_5, poached_egg, obj_egg_5_xxl.pddl Five egg recipes and plans by FD # Omelette # ( :derived ( exist-omelette ?env - env ) ( exists ( ?egg1 - egg ?veggies1 - ingredient ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( folded ?egg1 ) ( is-buttery ?egg1 ) ( fried ?veggies1 ) ( sauteed ?veggies1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon2 two ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram two ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram two ) ( seasoning-mixed ?egg1 pepper ) ) ) ) The plan of making an Omelette (length = 47): pickup fork1 kitchentop robot (1) open fridge (1) getout milkbottle1 fridge robot (1) getout butter fridge robot (1) getout egg1 fridge robot (1) getout veggies1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) add-ingredient butter smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) add-ingredient veggies1 smallbowl1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown frypan1 burner robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup tablespoon1 kitchentop robot (1) season egg1 salt salter1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) putdown tablespoon1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) transfer veggies1 smallbowl1 frypan1 robot (1) putdown smallbowl1 burner robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner butter (1) fry veggies1 frypan1 burner butter (1) switchoff burner frypan1 (1) pickup spatula1 kitchentop robot (1) fold egg1 frypan1 spatula1 robot (1) putdown spatula1 burner robot (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1) putdown milkbottle1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) sprinkle egg1 salt salter1 gram robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg1 pepper shaker1 gram robot (1) Scrambled eggs # ( :derived ( exist-scrambled-eggs ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( scrambled ?egg1 ) ( is-buttery ?egg1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon1 one ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram one ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram one ) ( seasoning-mixed ?egg1 pepper ) ) ) ) The plan of making Scrambled eggs (length = 41): pickup fork1 kitchentop robot (1) open fridge (1) getout milkbottle1 fridge robot (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) add-ingredient butter smallbowl1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown frypan1 burner robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup tablespoon1 kitchentop robot (1) season egg1 chives container1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown tablespoon1 burner robot (1) pickup spatula1 kitchentop robot (1) putdown spatula1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown shaker1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner butter (1) switchoff burner frypan1 (1) putdown smallbowl1 burner robot (1) pickup spatula1 burner robot (1) scrape egg1 frypan1 spatula1 robot (1) putdown spatula1 burner robot (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1) Sunny Side Up # ( :derived ( exist-sunny-side-up ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( fried ?egg1 ) ( is-buttery ?egg1 ) ( steamed ?egg1 ) ( has-seasoning ?egg1 salt gram one ) ( has-seasoning ?egg1 pepper gram one ) ) ) ) The plan of making a Sunny Side Up (length = 28): pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) open fridge (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) open dcup2 (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) transfer oliveoil oilbottle1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) getout pancover1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) putdown shaker1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer egg1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner oliveoil (1) puton pancover1 frypan1 robot (1) steam egg1 frypan1 burner (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1) putdown frypan1 burner robot (1) switchoff burner frypan1 (1) Egg in a Hole # ( :derived ( exist-egg-in-hole ?env - env ) ( exists ( ?egg1 - egg ?bread1 - bread ?plate1 - plate ) ( and ( inside ?plate1 ?bread1 ) ( has-hole ?bread1 circle ) ( in-hole ?egg1 ?bread1 ) ( fried ?bread1 ) ( is-buttery ?bread1 ) ( has-seasoning ?egg1 salt gram one ) ( has-seasoning ?egg1 pepper gram one ) ) ) ) The plan of making an Egg in a Hole (length = 30): pickup holecutter1 kitchentop robot (1) make-hole bread1 holecutter1 circle robot (1) open fridge (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 bread1 robot (1) add-ingredient butter smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) putdown shaker1 burner robot (1) pickup bread1 kitchentop robot (1) add-ingredient bread1 smallbowl1 robot (1) putdown holecutter1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer bread1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry bread1 frypan1 burner butter (1) switchoff burner frypan1 (1) putdown smallbowl1 burner robot (1) pickup frypan1 burner robot (1) transfer bread1 frypan1 plate1 robot (1) Poached Egg # ( :derived ( exist-poached-egg ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ; helps the whites set at a lower temperature while keeping the yolks runny ;( hardness ?egg1 innerside soft ) ; encode cooking knowledge / causal models into operators and axoims ) ) ) The plan of making a Poached Egg (length = 22): open dcup1 (1) turn-tap-on faucet (1) getout pot1 dcup1 robot (1) add-liquid water faucet pot1 robot (1) turn-tap-off faucet (1) open fridge (1) getout egg1 fridge robot (1) close fridge (1) close dcup1 (1) crack-egg egg1 smallbowl1 robot (1) putdown pot1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer egg1 smallbowl1 pot1 robot (1) open dcup2 (1) getout mediumbottle1 dcup2 robot (1) close dcup2 (1) switchon burner pot1 (1) change-level burner medium (1) pour-liquid whitevinegar mediumbottle1 pot1 robot (1) boil water pot1 burner (1) boil water pot1 burner (1) switchoff burner pot1 (1) Previous weird results about is-buttery # when (at-level high) and (not (is-liquid) param1) exists When the environment contains 10 eggs and 10 veggies: # t run_name var op axiom plan parse search state ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 203618 kitchen_egg_1, omelette, obj_3, 294 3542 198 47 3.417 0.0560734 424 203622 kitchen_egg_2, omelette, obj_3, 294 3542 198 47 3.488 0.0572367 424 203626 kitchen_egg_3, omelette, obj_3, 294 3542 198 47 3.305 0.0700046 424 203641 kitchen_egg_4, omelette, obj_egg_4_m, 343 7529 316 56 14.740 0.0778197 404 204142 kitchen_egg_5, omelette, obj_egg_4_m, 633 7433 334 - - - - 204159 kitchen_egg_5, omelette, obj_egg_4_m, gi=is_buttery 623 7433 334 52 15.474 0.191407 811 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204203 kitchen_egg_2, scrambled_eggs, obj_3, 254 3532 108 40 3.451 0.0562847 308 204207 kitchen_egg_3, scrambled_eggs, obj_3, 254 3532 108 40 3.683 0.0531232 308 204223 kitchen_egg_4, scrambled_eggs, obj_egg_4_m, 293 7499 226 49 15.020 0.0699502 376 204723 kitchen_egg_5, scrambled_eggs, obj_egg_4_m, 473 6303 244 - - - - 204742 kitchen_egg_5, scrambled_eggs, obj_egg_4_m, gi=is_buttery 463 6303 244 42 17.691 0.126726 482 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204759 kitchen_egg_3, sunny_side_up, obj_egg_4_m, 136 5896 141 27 16.202 0.0266506 114 204817 kitchen_egg_4, sunny_side_up, obj_egg_4_m, 151 6008 196 27 18.018 0.031578 118 204835 kitchen_egg_5, sunny_side_up, obj_egg_4_m, 310 4772 202 29 17.406 0.0237115 137 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204853 kitchen_egg_4, egg_in_hole, obj_egg_4_m, 137 5984 206 30 17.120 0.0253792 111 205354 kitchen_egg_5, egg_in_hole, obj_egg_4_m, 205413 kitchen_egg_5, egg_in_hole, obj_egg_4_m, gi=is_buttery 206 3868 212 32 18.340 0.0398749 125 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 205441 kitchen_egg_5, poached_egg, obj_egg_5_m, 330 5288 195 22 27.596 0.0144483 76 When the environment contains 2 copies of every utensil: # t run_name var op axiom plan parse search state ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 211648 kitchen_egg_1, omelette, obj_4, 124 2849 29 68 1.714 0.0693452 680 211650 kitchen_egg_2, omelette, obj_4, 124 2849 29 68 1.690 0.074333 680 211652 kitchen_egg_3, omelette, obj_4, 124 2849 29 68 1.724 0.0710202 680 211705 kitchen_egg_4, omelette, obj_egg_4_l, 221 7611 214 61 12.614 0.139616 798 212205 kitchen_egg_5, omelette, obj_egg_4_l, 293 7195 280 - - - - 212220 kitchen_egg_5, omelette, obj_egg_4_l, gi=is_buttery 292 7195 280 61 13.934 0.152373 897 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212222 kitchen_egg_2, scrambled_eggs, obj_4, 120 2847 29 41 1.717 0.0221763 257 212224 kitchen_egg_3, scrambled_eggs, obj_4, 120 2847 29 41 1.691 0.0250289 257 212324 kitchen_egg_4, scrambled_eggs, obj_egg_4_l, 216 7605 214 - - - - 212824 kitchen_egg_5, scrambled_eggs, obj_egg_4_l, 212839 kitchen_egg_5, scrambled_eggs, obj_egg_4_l, gi=is_buttery 266 6769 280 41 14.341 0.0356264 220 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212853 kitchen_egg_3, sunny_side_up, obj_egg_4_l, 135 6008 144 29 13.422 0.0217398 147 212907 kitchen_egg_4, sunny_side_up, obj_egg_4_l, 160 6031 211 29 13.640 0.0236584 161 212922 kitchen_egg_5, sunny_side_up, obj_egg_4_l, 210 5055 255 29 14.233 0.027923 147 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212936 kitchen_egg_4, egg_in_hole, obj_egg_4_l, 164 6037 213 42 13.799 0.0374208 320 213437 kitchen_egg_5, egg_in_hole, obj_egg_4_l, 235 5481 257 - - - - 213452 kitchen_egg_5, egg_in_hole, obj_egg_4_l, gi=is_buttery 233 5481 257 33 14.725 0.0241682 148 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 213515 kitchen_egg_5, poached_egg, obj_egg_5_l, 256 6743 245 25 22.505 0.019964 126 When the environment contains both 10 eggs & veggies and 2 copies of every utensil: # t run_name var op axiom plan parse search state ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 214011 kitchen_egg_1, omelette, obj_4_xl, 358 9419 299 51 9.306 0.316715 1618 214021 kitchen_egg_2, omelette, obj_4_xl, 358 9419 299 51 9.094 0.300642 1618 214031 kitchen_egg_3, omelette, obj_4_xl, 358 9419 299 51 9.210 0.340507 1618 214113 kitchen_egg_4, omelette, obj_egg_4_xl, 473 20769 538 51 40.750 0.389818 1198 214613 kitchen_egg_5, omelette, obj_egg_4_xl, 923 20353 586 - - - - 214712 kitchen_egg_5, omelette, obj_egg_4_xl, gi=is_buttery 913 20353 586 49 42.193 15.4131 46426 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 214724 kitchen_egg_2, scrambled_eggs, obj_4_xl, 318 9399 119 49 9.341 2.11589 11475 214758 kitchen_egg_3, scrambled_eggs, obj_4_xl, 318 9399 119 49 25.856 7.72045 11475 214859 kitchen_egg_4, scrambled_eggs, obj_egg_4_xl, 423 20709 358 - - - - 215359 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl, 663 16093 406 - - - - 215445 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl, gi=is_buttery 653 16093 406 40 44.970 0.232838 747 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 215529 kitchen_egg_3, sunny_side_up, obj_egg_4_xl, 216 16304 243 28 43.134 0.0410474 176 215614 kitchen_egg_4, sunny_side_up, obj_egg_4_xl, 241 16498 328 28 44.347 0.0488374 205 215659 kitchen_egg_5, sunny_side_up, obj_egg_4_xl, 480 11742 354 32 44.575 0.044776 190 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 215744 kitchen_egg_4, egg_in_hole, obj_egg_4_xl, 227 16450 348 40 43.797 0.07649 342 220244 kitchen_egg_5, egg_in_hole, obj_egg_4_xl, 298 8334 374 - - - - 220331 kitchen_egg_5, egg_in_hole, obj_egg_4_xl, gi=is_buttery 296 8334 374 37 45.679 0.0668695 278 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 220431 kitchen_egg_5, poached_egg, obj_egg_5_xl, When the environment contains both 10 eggs & veggies and 4 copies of every utensil: # t run_name var op axiom plan parse search state ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 125126 kitchen_egg_1, omelette, obj_4_xxl, 444 32749 501 51 38.347 0.495747 1109 125205 kitchen_egg_2, omelette, obj_4_xxl, 444 32749 501 51 37.076 0.501044 1109 125244 kitchen_egg_3, omelette, obj_4_xxl, 444 32749 501 51 37.568 0.490112 1109 125344 kitchen_egg_4, omelette, obj_egg_4_xxl, 125844 kitchen_egg_5, omelette, obj_egg_4_xxl, 1503 66849 1194 - - - - 125944 kitchen_egg_5, omelette, obj_egg_4_xxl, gi=is_buttery 1503 66849 1194 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 130032 kitchen_egg_2, scrambled_eggs, obj_4_xxl, 404 32709 141 49 43.309 2.84812 6592 130119 kitchen_egg_3, scrambled_eggs, obj_4_xxl, 404 32709 141 49 42.441 3.16628 6592 130219 kitchen_egg_4, scrambled_eggs, obj_egg_4_xxl, 130720 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl, 1043 50329 834 - - - - 130820 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl, gi=is_buttery 1043 50329 834 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 130920 kitchen_egg_3, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - 131020 kitchen_egg_4, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - 131121 kitchen_egg_5, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 131221 kitchen_egg_4, egg_in_hole, obj_egg_4_xxl, 1043 50329 834 - - - - 131721 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl, 478 23042 802 - - - - 132221 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl, gi=is_buttery 478 23042 802 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 132222 kitchen_egg_5, poached_egg, obj_egg_5_xxl, 478 23042 802 - - - -","title":"All Egg Recipes"},{"location":"exp-egg-recipes/#different-egg-recipes-search-time-corresponds-to-of-axioms-and-depth-of-search-instead-of-of-operators-or-length-of-plan","text":"","title":"Different egg recipes -&gt; Search time corresponds to # of axioms and depth of search, instead of # of operators or length of plan"},{"location":"exp-egg-recipes/#experiment-design","text":"test_egg_recipes_*.sh tests the search complexity of 5 different egg-related recipes, with increasingly large domain (i.e. types, predicates, operators, axioms) and environments (i.e. objects). The five recipes include: omelette.pddl specifies beaten, folded eggs with veggies scrambled_eggs.pddl specifies beaten, scrambled eggs sunny_side_up.pddl specifies fried, steamed eggs on frypan egg_in_hole.pddl specifies fried egg in the hole of a bread poached_egg.pddl specifies boiled egg with vinegar The five domains include: kitchen_egg_1 contains the minumum of knowledge for making omelette kitchen_egg_2 contains the minumum of knowledge for making omelette, scrambled_eggs kitchen_egg_3 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up kitchen_egg_4 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up, egg_in_hole kitchen_egg_5 contains the minumum of knowledge for making omelette, scrambled_eggs, sunny_side_up, egg_in_hole, and poached_egg The five sets of objects include: obj_0 , obj_egg_4 , and obj_egg_5 contain the minimum set of objects for kitchen_egg_1 , kitchen_egg_4 and kitchen_egg_5 obj_3 , obj_egg_4_m , and obj_egg_5_m contain 10 eggs and 10 veggies obj_4 , obj_egg_4_l , and obj_egg_5_l contain 2 copies of every utensil obj_4_xl , obj_egg_4_xl , and obj_egg_5_xl contain both (1) 10 eggs and 10 veggies, and (2) 2 copies of every utensil obj_4_xxl , obj_egg_4_xxl , and obj_egg_5_xxl contain both (1) 10 eggs and 10 veggies, and (2) 4 copies of every utensil","title":"Experiment Design"},{"location":"exp-egg-recipes/#experiment-results","text":"Summary of results: with the minimum domain and object set, FD can solve a recipe within 0.001s when the environment contains both extended ingredients (e.g. eggs) and utensils (e.g. pans) Note: rows with - means exceeding 5 min timeout blank rows means running out of memory during instantiation, which results in failed planning var , op , axiom columns contain the number of variables, operators, and axioms used during planning plan column contain the length of searched plan cost column contain the total cost of the plan (unit cost for now) parse , search columns contain the timer in seconds for the parsing and search procedures state column contain number of states expanded","title":"Experiment Results"},{"location":"exp-egg-recipes/#when-the-environment-conians-the-minumum-sets-of-objects","text":"t run_name var op axiom plan cost parse search state ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210933 kitchen_egg_1, omelette, obj_0.pddl 60 932 27 47 47 0.511 0.0102195 165 210934 kitchen_egg_2, omelette, obj_0.pddl 60 932 27 47 47 0.506 0.0102126 165 210935 kitchen_egg_3, omelette, obj_0.pddl 60 932 27 47 47 0.501 0.0103028 165 210939 kitchen_egg_4, omelette, obj_egg_4.pddl 91 2507 109 47 47 3.914 0.0372211 396 210943 kitchen_egg_5, omelette, obj_egg_4.pddl 176 2409 109 53 53 4.182 0.0226506 253 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210944 kitchen_egg_2, scrambled_eggs, obj_0.pddl 56 931 27 41 41 0.518 0.0106634 167 210945 kitchen_egg_3, scrambled_eggs, obj_0.pddl 56 931 27 41 41 0.513 0.0111647 167 210949 kitchen_egg_4, scrambled_eggs, obj_egg_4.pddl 86 2504 109 41 41 3.847 0.0299068 316 210953 kitchen_egg_5, scrambled_eggs, obj_egg_4.pddl 160 2296 109 47 47 3.889 0.0275968 299 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210957 kitchen_egg_3, sunny_side_up, obj_egg_4.pddl 55 2035 69 28 28 3.777 0.00625692 79 211002 kitchen_egg_4, sunny_side_up, obj_egg_4.pddl 71 2048 106 28 28 4.012 0.00861308 113 211006 kitchen_egg_5, sunny_side_up, obj_egg_4.pddl 125 1800 106 30 30 4.004 0.00890017 106 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 211011 kitchen_egg_4, egg_in_hole, obj_egg_4.pddl 74 2051 107 30 30 4.467 0.00610388 89 211016 kitchen_egg_5, egg_in_hole, obj_egg_4.pddl 139 1913 107 30 30 4.06 0.00703404 89 ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 211022 kitchen_egg_5, poached_egg, obj_egg_5.pddl 154 2273 76 22 22 6.156 0.00708321 85 Results by lama : t run_name var op axiom plan cost parse search state ------ ---------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 142958 kitchen_egg_1, omelette, obj_0 60 932 27 - - 0.616 (>9.44) - 143008 kitchen_egg_2, omelette, obj_0 60 932 27 - - 0.619 (>9.43) - 143018 kitchen_egg_3, omelette, obj_0 60 932 27 - - 0.617 (>9.43) - 143028 kitchen_egg_4, omelette, obj_egg_4 91 2507 109 - - 3.762 (>6.29) - 143038 kitchen_egg_5, omelette, obj_egg_4 176 2409 109 47 47 3.88 0.11066937 (>6.17) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143049 kitchen_egg_2, scrambled_eggs, obj_0 56 931 27 - - 0.594 (>9.46) - 143059 kitchen_egg_3, scrambled_eggs, obj_0 56 931 27 - - 0.64 (>9.41) - 143109 kitchen_egg_4, scrambled_eggs, obj_egg_4 86 2504 109 40 40 3.811 0.11181831 (>6.24) 143119 kitchen_egg_5, scrambled_eggs, obj_egg_4 160 2296 109 40 40 3.922 0.11346054 (>6.15) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143130 kitchen_egg_3, sunny_side_up, obj_egg_4 55 2035 69 27 27 4.133 0.08899832 (>5.95) 143140 kitchen_egg_4, sunny_side_up, obj_egg_4 71 2048 106 - - 3.768 (>6.28) - 143150 kitchen_egg_5, sunny_side_up, obj_egg_4 125 1800 106 26 26 3.843 0.08267236 (>6.20) ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143201 kitchen_egg_4, egg_in_hole, obj_egg_4 74 2051 107 - - 3.7 (>6.35) - 143211 kitchen_egg_5, egg_in_hole, obj_egg_4 139 1913 107 - - 3.869 (>6.17) - ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 143221 kitchen_egg_5, poached_egg, obj_egg_5 154 2273 76 - - 5.968 (>4.08) -","title":"When the environment conians the minumum sets of objects:"},{"location":"exp-egg-recipes/#when-the-environment-contains-10-eggs-and-10-veggies","text":"t run_name var op axiom plan cost parse search state ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211058 kitchen_egg_1, omelette, obj_3.pddl 294 3542 198 47 47 3.094 0.0526419 424 211102 kitchen_egg_2, omelette, obj_3.pddl 294 3542 198 47 47 2.944 0.0616637 424 211105 kitchen_egg_3, omelette, obj_3.pddl 294 3542 198 47 47 3.019 0.0565081 424 211118 kitchen_egg_4, omelette, obj_egg_4_m.pddl 343 7529 316 56 56 12.792 0.0668754 404 211133 kitchen_egg_5, omelette, obj_egg_4_m.pddl 626 7431 298 56 56 13.545 0.0705151 411 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211136 kitchen_egg_2, scrambled_eggs, obj_3.pddl 254 3532 108 40 40 2.903 0.0366719 308 211139 kitchen_egg_3, scrambled_eggs, obj_3.pddl 254 3532 108 40 40 2.894 0.0412128 308 211152 kitchen_egg_4, scrambled_eggs, obj_egg_4_m.pddl 293 7499 226 49 49 12.401 0.0757157 376 211205 kitchen_egg_5, scrambled_eggs, obj_egg_4_m.pddl 466 6301 208 49 49 12.471 0.0562253 378 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211217 kitchen_egg_3, sunny_side_up, obj_egg_4_m.pddl 136 5896 141 27 27 11.877 0.0155547 114 211229 kitchen_egg_4, sunny_side_up, obj_egg_4_m.pddl 161 6008 196 33 33 11.721 0.0161065 127 211242 kitchen_egg_5, sunny_side_up, obj_egg_4_m.pddl 314 4770 178 33 33 12.421 0.0177018 132 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211255 kitchen_egg_4, egg_in_hole, obj_egg_4_m.pddl 137 5984 206 30 30 12.555 0.01446 111 211308 kitchen_egg_5, egg_in_hole, obj_egg_4_m.pddl 202 3866 188 30 30 12.363 0.0149113 117 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 211326 kitchen_egg_5, poached_egg, obj_egg_5_m.pddl 325 5288 130 22 22 17.672 0.012724 87","title":"When the environment contains 10 eggs and 10 veggies:"},{"location":"exp-egg-recipes/#when-the-environment-contains-2-copies-of-every-utensil","text":"t run_name var op axiom plan cost parse search state ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214116 kitchen_egg_1, omelette, obj_4.pddl 124 2849 29 68 68 1.667 0.068268 680 214118 kitchen_egg_2, omelette, obj_4.pddl 124 2849 29 68 68 1.658 0.0702724 680 214120 kitchen_egg_3, omelette, obj_4.pddl 124 2849 29 68 68 1.673 0.0694334 680 214133 kitchen_egg_4, omelette, obj_egg_4_l.pddl 221 7611 214 61 61 12.611 0.144819 798 214147 kitchen_egg_5, omelette, obj_egg_4_l.pddl 286 7193 214 61 61 13.244 0.140403 795 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214149 kitchen_egg_2, scrambled_eggs, obj_4.pddl 120 2847 29 41 41 1.671 0.0206573 257 214151 kitchen_egg_3, scrambled_eggs, obj_4.pddl 120 2847 29 41 41 1.681 0.0220964 257 214231 kitchen_egg_4, scrambled_eggs, obj_egg_4_l.pddl 216 7605 214 - - - - 214613 kitchen_egg_5, scrambled_eggs, obj_egg_4_l.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214626 kitchen_egg_3, sunny_side_up, obj_egg_4_l.pddl 135 6008 144 29 29 12.612 0.0185011 147 214639 kitchen_egg_4, sunny_side_up, obj_egg_4_l.pddl 161 6031 211 39 39 12.586 0.0221366 166 214653 kitchen_egg_5, sunny_side_up, obj_egg_4_l.pddl 205 5053 211 39 39 13.067 0.0255738 189 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214706 kitchen_egg_4, egg_in_hole, obj_egg_4_l.pddl 164 6037 213 42 42 13.148 0.0352553 320 214720 kitchen_egg_5, egg_in_hole, obj_egg_4_l.pddl 229 5479 213 42 42 13.249 0.0364352 323 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 214741 kitchen_egg_5, poached_egg, obj_egg_5_l.pddl 251 6743 125 22 22 20.288 0.0145595 87","title":"When the environment contains 2 copies of every utensil:"},{"location":"exp-egg-recipes/#when-the-environment-contains-both-10-eggs-veggies-and-2-copies-of-every-utensil","text":"t run_name var op axiom plan cost parse search state ------ ------------------------------------------------ ----- ----- ------- ------ ------ ------- --------- ------- 063459 kitchen_egg_1, omelette, obj_4_xl.pddl 358 9419 299 51 51 12.865 0.41591 1618 063510 kitchen_egg_2, omelette, obj_4_xl.pddl 358 9419 299 51 51 10.020 0.300098 1618 063520 kitchen_egg_3, omelette, obj_4_xl.pddl 358 9419 299 51 51 9.076 0.312746 1618 063603 kitchen_egg_4, omelette, obj_egg_4_xl.pddl 473 20769 538 51 51 41.736 0.555485 1198 063650 kitchen_egg_5, omelette, obj_egg_4_xl.pddl 916 20351 520 51 51 45.486 0.433745 1250 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 063702 kitchen_egg_2, scrambled_eggs, obj_4_xl.pddl 318 9399 119 49 49 9.801 2.03623 11475 063714 kitchen_egg_3, scrambled_eggs, obj_4_xl.pddl 318 9399 119 49 49 9.362 1.99511 11475 064214 kitchen_egg_4, scrambled_eggs, obj_egg_4_xl.pddl 423 20709 358 - - - - 064715 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 064759 kitchen_egg_3, sunny_side_up, obj_egg_4_xl.pddl 216 16304 243 28 28 43.585 0.0399582 176 064843 kitchen_egg_4, sunny_side_up, obj_egg_4_xl.pddl 251 16498 328 32 32 43.429 0.062769 223 064927 kitchen_egg_5, sunny_side_up, obj_egg_4_xl.pddl 484 11740 310 32 32 43.212 0.0515667 233 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 065014 kitchen_egg_4, egg_in_hole, obj_egg_4_xl.pddl 227 16450 348 40 40 45.568 0.0986753 342 065059 kitchen_egg_5, egg_in_hole, obj_egg_4_xl.pddl 292 8332 330 40 40 44.505 0.0635933 348 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 065203 kitchen_egg_5, poached_egg, obj_egg_5_xl.pddl 521 13889 179 22 22 63.058 0.0241492 89","title":"When the environment contains both 10 eggs &amp; veggies and 2 copies of every utensil:"},{"location":"exp-egg-recipes/#when-the-environment-contains-both-10-eggs-veggies-and-4-copies-of-every-utensil","text":"t run_name var op axiom plan cost parse search state ------ ------------------------------------------------- ----- ----- ------- ------ ------ ------- -------- ------- 065450 kitchen_egg_1, omelette, obj_4_xxl.pddl 444 32749 501 51 51 40.412 0.507984 1109 065531 kitchen_egg_2, omelette, obj_4_xxl.pddl 444 32749 501 51 51 38.870 0.545349 1109 065611 kitchen_egg_3, omelette, obj_4_xxl.pddl 444 32749 501 51 51 38.807 0.507466 1109 070053 kitchen_egg_4, omelette, obj_egg_4_xxl.pddl 633 68565 1086 51 51 278.485 1.10617 1198 070403 kitchen_egg_5, omelette, obj_egg_4_xxl.pddl 1496 66847 1068 51 51 186.607 1.09691 1250 ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 070447 kitchen_egg_2, scrambled_eggs, obj_4_xxl.pddl 404 32709 141 49 49 39.293 2.88542 6592 070530 kitchen_egg_3, scrambled_eggs, obj_4_xxl.pddl 404 32709 141 49 49 39.271 2.92493 6592 071030 kitchen_egg_4, scrambled_eggs, obj_egg_4_xxl.pddl 583 68445 726 - - - - 071531 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl.pddl 1036 50327 708 - - - - ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 071959 kitchen_egg_3, sunny_side_up, obj_egg_4_xxl.pddl 316 54536 551 28 28 265.509 0.153392 176 072500 kitchen_egg_4, sunny_side_up, obj_egg_4_xxl.pddl 073000 kitchen_egg_5, sunny_side_up, obj_egg_4_xxl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 073501 kitchen_egg_4, egg_in_hole, obj_egg_4_xxl.pddl 074003 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl.pddl ------ ----------------------------------------------- ----- ---- ------- ------ ------ ------- --------- ------- 074005 kitchen_egg_5, poached_egg, obj_egg_5_xxl.pddl","title":"When the environment contains both 10 eggs &amp; veggies and 4 copies of every utensil:"},{"location":"exp-egg-recipes/#five-egg-recipes-and-plans-by-fd","text":"","title":"Five egg recipes and plans by FD"},{"location":"exp-egg-recipes/#omelette","text":"( :derived ( exist-omelette ?env - env ) ( exists ( ?egg1 - egg ?veggies1 - ingredient ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( folded ?egg1 ) ( is-buttery ?egg1 ) ( fried ?veggies1 ) ( sauteed ?veggies1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon2 two ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram two ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram two ) ( seasoning-mixed ?egg1 pepper ) ) ) ) The plan of making an Omelette (length = 47): pickup fork1 kitchentop robot (1) open fridge (1) getout milkbottle1 fridge robot (1) getout butter fridge robot (1) getout egg1 fridge robot (1) getout veggies1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) add-ingredient butter smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) add-ingredient veggies1 smallbowl1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown frypan1 burner robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup tablespoon1 kitchentop robot (1) season egg1 salt salter1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) putdown tablespoon1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) transfer veggies1 smallbowl1 frypan1 robot (1) putdown smallbowl1 burner robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner butter (1) fry veggies1 frypan1 burner butter (1) switchoff burner frypan1 (1) pickup spatula1 kitchentop robot (1) fold egg1 frypan1 spatula1 robot (1) putdown spatula1 burner robot (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1) putdown milkbottle1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) sprinkle egg1 salt salter1 gram robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg1 pepper shaker1 gram robot (1)","title":"Omelette"},{"location":"exp-egg-recipes/#scrambled-eggs","text":"( :derived ( exist-scrambled-eggs ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( scrambled ?egg1 ) ( is-buttery ?egg1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon1 one ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram one ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram one ) ( seasoning-mixed ?egg1 pepper ) ) ) ) The plan of making Scrambled eggs (length = 41): pickup fork1 kitchentop robot (1) open fridge (1) getout milkbottle1 fridge robot (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) add-ingredient butter smallbowl1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown frypan1 burner robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup tablespoon1 kitchentop robot (1) season egg1 chives container1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown tablespoon1 burner robot (1) pickup spatula1 kitchentop robot (1) putdown spatula1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) mix egg1 fork1 smallbowl1 robot (1) putdown shaker1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner butter (1) switchoff burner frypan1 (1) putdown smallbowl1 burner robot (1) pickup spatula1 burner robot (1) scrape egg1 frypan1 spatula1 robot (1) putdown spatula1 burner robot (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1)","title":"Scrambled eggs"},{"location":"exp-egg-recipes/#sunny-side-up","text":"( :derived ( exist-sunny-side-up ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( inside ?plate1 ?egg1 ) ( fried ?egg1 ) ( is-buttery ?egg1 ) ( steamed ?egg1 ) ( has-seasoning ?egg1 salt gram one ) ( has-seasoning ?egg1 pepper gram one ) ) ) ) The plan of making a Sunny Side Up (length = 28): pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) open fridge (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) open dcup2 (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) transfer oliveoil oilbottle1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) getout pancover1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) putdown shaker1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer egg1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry egg1 frypan1 burner oliveoil (1) puton pancover1 frypan1 robot (1) steam egg1 frypan1 burner (1) pickup frypan1 burner robot (1) transfer egg1 frypan1 plate1 robot (1) putdown frypan1 burner robot (1) switchoff burner frypan1 (1)","title":"Sunny Side Up"},{"location":"exp-egg-recipes/#egg-in-a-hole","text":"( :derived ( exist-egg-in-hole ?env - env ) ( exists ( ?egg1 - egg ?bread1 - bread ?plate1 - plate ) ( and ( inside ?plate1 ?bread1 ) ( has-hole ?bread1 circle ) ( in-hole ?egg1 ?bread1 ) ( fried ?bread1 ) ( is-buttery ?bread1 ) ( has-seasoning ?egg1 salt gram one ) ( has-seasoning ?egg1 pepper gram one ) ) ) ) The plan of making an Egg in a Hole (length = 30): pickup holecutter1 kitchentop robot (1) make-hole bread1 holecutter1 circle robot (1) open fridge (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 bread1 robot (1) add-ingredient butter smallbowl1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (1) pickup salter1 kitchentop robot (1) sprinkle egg1 salt salter1 gram robot (1) putdown salter1 burner robot (1) pickup shaker1 kitchentop robot (1) sprinkle egg1 pepper shaker1 gram robot (1) putdown shaker1 burner robot (1) pickup bread1 kitchentop robot (1) add-ingredient bread1 smallbowl1 robot (1) putdown holecutter1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 frypan1 robot (1) transfer bread1 smallbowl1 frypan1 robot (1) switchon burner frypan1 (1) fry bread1 frypan1 burner butter (1) switchoff burner frypan1 (1) putdown smallbowl1 burner robot (1) pickup frypan1 burner robot (1) transfer bread1 frypan1 plate1 robot (1)","title":"Egg in a Hole"},{"location":"exp-egg-recipes/#poached-egg","text":"( :derived ( exist-poached-egg ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ; helps the whites set at a lower temperature while keeping the yolks runny ;( hardness ?egg1 innerside soft ) ; encode cooking knowledge / causal models into operators and axoims ) ) ) The plan of making a Poached Egg (length = 22): open dcup1 (1) turn-tap-on faucet (1) getout pot1 dcup1 robot (1) add-liquid water faucet pot1 robot (1) turn-tap-off faucet (1) open fridge (1) getout egg1 fridge robot (1) close fridge (1) close dcup1 (1) crack-egg egg1 smallbowl1 robot (1) putdown pot1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer egg1 smallbowl1 pot1 robot (1) open dcup2 (1) getout mediumbottle1 dcup2 robot (1) close dcup2 (1) switchon burner pot1 (1) change-level burner medium (1) pour-liquid whitevinegar mediumbottle1 pot1 robot (1) boil water pot1 burner (1) boil water pot1 burner (1) switchoff burner pot1 (1)","title":"Poached Egg"},{"location":"exp-egg-recipes/#previous-weird-results-about-is-buttery","text":"when (at-level high) and (not (is-liquid) param1) exists","title":"Previous weird results about is-buttery"},{"location":"exp-egg-recipes/#when-the-environment-contains-10-eggs-and-10-veggies_1","text":"t run_name var op axiom plan parse search state ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 203618 kitchen_egg_1, omelette, obj_3, 294 3542 198 47 3.417 0.0560734 424 203622 kitchen_egg_2, omelette, obj_3, 294 3542 198 47 3.488 0.0572367 424 203626 kitchen_egg_3, omelette, obj_3, 294 3542 198 47 3.305 0.0700046 424 203641 kitchen_egg_4, omelette, obj_egg_4_m, 343 7529 316 56 14.740 0.0778197 404 204142 kitchen_egg_5, omelette, obj_egg_4_m, 633 7433 334 - - - - 204159 kitchen_egg_5, omelette, obj_egg_4_m, gi=is_buttery 623 7433 334 52 15.474 0.191407 811 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204203 kitchen_egg_2, scrambled_eggs, obj_3, 254 3532 108 40 3.451 0.0562847 308 204207 kitchen_egg_3, scrambled_eggs, obj_3, 254 3532 108 40 3.683 0.0531232 308 204223 kitchen_egg_4, scrambled_eggs, obj_egg_4_m, 293 7499 226 49 15.020 0.0699502 376 204723 kitchen_egg_5, scrambled_eggs, obj_egg_4_m, 473 6303 244 - - - - 204742 kitchen_egg_5, scrambled_eggs, obj_egg_4_m, gi=is_buttery 463 6303 244 42 17.691 0.126726 482 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204759 kitchen_egg_3, sunny_side_up, obj_egg_4_m, 136 5896 141 27 16.202 0.0266506 114 204817 kitchen_egg_4, sunny_side_up, obj_egg_4_m, 151 6008 196 27 18.018 0.031578 118 204835 kitchen_egg_5, sunny_side_up, obj_egg_4_m, 310 4772 202 29 17.406 0.0237115 137 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 204853 kitchen_egg_4, egg_in_hole, obj_egg_4_m, 137 5984 206 30 17.120 0.0253792 111 205354 kitchen_egg_5, egg_in_hole, obj_egg_4_m, 205413 kitchen_egg_5, egg_in_hole, obj_egg_4_m, gi=is_buttery 206 3868 212 32 18.340 0.0398749 125 ------ ------------------------------------------------------- ----- ---- ------- ------ ------- ---------- ------- 205441 kitchen_egg_5, poached_egg, obj_egg_5_m, 330 5288 195 22 27.596 0.0144483 76","title":"When the environment contains 10 eggs and 10 veggies:"},{"location":"exp-egg-recipes/#when-the-environment-contains-2-copies-of-every-utensil_1","text":"t run_name var op axiom plan parse search state ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 211648 kitchen_egg_1, omelette, obj_4, 124 2849 29 68 1.714 0.0693452 680 211650 kitchen_egg_2, omelette, obj_4, 124 2849 29 68 1.690 0.074333 680 211652 kitchen_egg_3, omelette, obj_4, 124 2849 29 68 1.724 0.0710202 680 211705 kitchen_egg_4, omelette, obj_egg_4_l, 221 7611 214 61 12.614 0.139616 798 212205 kitchen_egg_5, omelette, obj_egg_4_l, 293 7195 280 - - - - 212220 kitchen_egg_5, omelette, obj_egg_4_l, gi=is_buttery 292 7195 280 61 13.934 0.152373 897 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212222 kitchen_egg_2, scrambled_eggs, obj_4, 120 2847 29 41 1.717 0.0221763 257 212224 kitchen_egg_3, scrambled_eggs, obj_4, 120 2847 29 41 1.691 0.0250289 257 212324 kitchen_egg_4, scrambled_eggs, obj_egg_4_l, 216 7605 214 - - - - 212824 kitchen_egg_5, scrambled_eggs, obj_egg_4_l, 212839 kitchen_egg_5, scrambled_eggs, obj_egg_4_l, gi=is_buttery 266 6769 280 41 14.341 0.0356264 220 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212853 kitchen_egg_3, sunny_side_up, obj_egg_4_l, 135 6008 144 29 13.422 0.0217398 147 212907 kitchen_egg_4, sunny_side_up, obj_egg_4_l, 160 6031 211 29 13.640 0.0236584 161 212922 kitchen_egg_5, sunny_side_up, obj_egg_4_l, 210 5055 255 29 14.233 0.027923 147 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 212936 kitchen_egg_4, egg_in_hole, obj_egg_4_l, 164 6037 213 42 13.799 0.0374208 320 213437 kitchen_egg_5, egg_in_hole, obj_egg_4_l, 235 5481 257 - - - - 213452 kitchen_egg_5, egg_in_hole, obj_egg_4_l, gi=is_buttery 233 5481 257 33 14.725 0.0241682 148 ------ --------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 213515 kitchen_egg_5, poached_egg, obj_egg_5_l, 256 6743 245 25 22.505 0.019964 126","title":"When the environment contains 2 copies of every utensil:"},{"location":"exp-egg-recipes/#when-the-environment-contains-both-10-eggs-veggies-and-2-copies-of-every-utensil_1","text":"t run_name var op axiom plan parse search state ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 214011 kitchen_egg_1, omelette, obj_4_xl, 358 9419 299 51 9.306 0.316715 1618 214021 kitchen_egg_2, omelette, obj_4_xl, 358 9419 299 51 9.094 0.300642 1618 214031 kitchen_egg_3, omelette, obj_4_xl, 358 9419 299 51 9.210 0.340507 1618 214113 kitchen_egg_4, omelette, obj_egg_4_xl, 473 20769 538 51 40.750 0.389818 1198 214613 kitchen_egg_5, omelette, obj_egg_4_xl, 923 20353 586 - - - - 214712 kitchen_egg_5, omelette, obj_egg_4_xl, gi=is_buttery 913 20353 586 49 42.193 15.4131 46426 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 214724 kitchen_egg_2, scrambled_eggs, obj_4_xl, 318 9399 119 49 9.341 2.11589 11475 214758 kitchen_egg_3, scrambled_eggs, obj_4_xl, 318 9399 119 49 25.856 7.72045 11475 214859 kitchen_egg_4, scrambled_eggs, obj_egg_4_xl, 423 20709 358 - - - - 215359 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl, 663 16093 406 - - - - 215445 kitchen_egg_5, scrambled_eggs, obj_egg_4_xl, gi=is_buttery 653 16093 406 40 44.970 0.232838 747 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 215529 kitchen_egg_3, sunny_side_up, obj_egg_4_xl, 216 16304 243 28 43.134 0.0410474 176 215614 kitchen_egg_4, sunny_side_up, obj_egg_4_xl, 241 16498 328 28 44.347 0.0488374 205 215659 kitchen_egg_5, sunny_side_up, obj_egg_4_xl, 480 11742 354 32 44.575 0.044776 190 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 215744 kitchen_egg_4, egg_in_hole, obj_egg_4_xl, 227 16450 348 40 43.797 0.07649 342 220244 kitchen_egg_5, egg_in_hole, obj_egg_4_xl, 298 8334 374 - - - - 220331 kitchen_egg_5, egg_in_hole, obj_egg_4_xl, gi=is_buttery 296 8334 374 37 45.679 0.0668695 278 ------ ---------------------------------------------------------- ----- ----- ------- ------ ------- --------- ------- 220431 kitchen_egg_5, poached_egg, obj_egg_5_xl,","title":"When the environment contains both 10 eggs &amp; veggies and 2 copies of every utensil:"},{"location":"exp-egg-recipes/#when-the-environment-contains-both-10-eggs-veggies-and-4-copies-of-every-utensil_1","text":"t run_name var op axiom plan parse search state ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 125126 kitchen_egg_1, omelette, obj_4_xxl, 444 32749 501 51 38.347 0.495747 1109 125205 kitchen_egg_2, omelette, obj_4_xxl, 444 32749 501 51 37.076 0.501044 1109 125244 kitchen_egg_3, omelette, obj_4_xxl, 444 32749 501 51 37.568 0.490112 1109 125344 kitchen_egg_4, omelette, obj_egg_4_xxl, 125844 kitchen_egg_5, omelette, obj_egg_4_xxl, 1503 66849 1194 - - - - 125944 kitchen_egg_5, omelette, obj_egg_4_xxl, gi=is_buttery 1503 66849 1194 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 130032 kitchen_egg_2, scrambled_eggs, obj_4_xxl, 404 32709 141 49 43.309 2.84812 6592 130119 kitchen_egg_3, scrambled_eggs, obj_4_xxl, 404 32709 141 49 42.441 3.16628 6592 130219 kitchen_egg_4, scrambled_eggs, obj_egg_4_xxl, 130720 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl, 1043 50329 834 - - - - 130820 kitchen_egg_5, scrambled_eggs, obj_egg_4_xxl, gi=is_buttery 1043 50329 834 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 130920 kitchen_egg_3, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - 131020 kitchen_egg_4, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - 131121 kitchen_egg_5, sunny_side_up, obj_egg_4_xxl, 1043 50329 834 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 131221 kitchen_egg_4, egg_in_hole, obj_egg_4_xxl, 1043 50329 834 - - - - 131721 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl, 478 23042 802 - - - - 132221 kitchen_egg_5, egg_in_hole, obj_egg_4_xxl, gi=is_buttery 478 23042 802 - - - - ------ ----------------------------------------------------------- ----- ----- ------- ------ ------- -------- ------- 132222 kitchen_egg_5, poached_egg, obj_egg_5_xxl, 478 23042 802 - - - -","title":"When the environment contains both 10 eggs &amp; veggies and 4 copies of every utensil:"},{"location":"exp-goals/","text":"More goal predicates -> Search time increases more than linearly # test_goals.sh tests the effect of increasing the number of goal predicates on search complexity, with the same kitchen_1 .pddl and obj_1 .pddl, i.e. minimum operators & objects: omelette_1.pddl has fried buttery eggs omelette_2.pddl has the egg beaten and folded omelette_3.pddl adds veggies omelette_4.pddl adds salt and pepper omelette_5.pddl adds nutmilk and chives --> Optimizing LAMA failed omelette_5a.pddl contains nutmilk and chives and no salt and pepper omelette_5b.pddl contains (exist-omelette) omelette_6.pddl contains one negative goal predicate --> Optimizing LAMA failed omelette_7.pddl contains two negative goal predicates --> Optimizing LAMA failed t run_name var op axiom plan cost parse search state ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110303 omelette_1, pln=lama_first 34 742 10 20 20 1.221 0.00202162 68 110313 omelette_1, pln=lama 34 742 10 16 16 1.336 0.03793621 (>8.71) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110314 omelette_2, pln=lama_first 38 745 13 31 31 1.183 0.00387042 140 110324 omelette_2, pln=lama 38 745 13 21 21 1.403 0.04361057 (>8.64) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110326 omelette_3, pln=lama_first 39 749 13 42 42 1.182 0.00434013 165 110336 omelette_3, pln=lama 39 749 13 25 25 1.333 0.04825091 (>8.71) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110338 omelette_4, pln=lama_first 53 947 13 63 63 1.192 0.0119063 433 110348 omelette_4, pln=lama 53 947 13 48 48 1.449 0.05891371 (>8.60) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110349 omelette_5, pln=lama_first 61 1199 13 55 55 1.199 0.0126142 348 110359 omelette_5, pln=lama 61 1199 13 - - 1.308 (>8.75) - ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110401 omelette_5a, pln=lama_first 47 1001 13 43 43 1.219 0.00722862 215 110411 omelette_5a, pln=lama 47 1001 13 38 38 1.299 0.05087042 (>8.75) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110413 omelette_5b, pln=lama_first 58 1199 14 54 54 1.257 0.0210328 590 110423 omelette_5b, pln=lama 58 1199 14 50 50 1.322 0.06957221 (>8.72) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110425 omelette_6, pln=lama_first 63 1199 15 55 55 1.183 0.0127868 348 110435 omelette_6, pln=lama 63 1199 15 - - 1.343 (>8.70) - ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110436 omelette_7, pln=lama_first 63 1199 15 55 55 1.184 0.0125673 348 110446 omelette_7, pln=lama 63 1199 15 - - 1.302 (>8.74) - We want to investigate: why omelette_4 and omelette_5a were successful but omelette_5 wasn't why omelette_5b was successful but omelette_5 wasn't, when speicifying the same goal why omelette_6 and omelette_7 weren't successful","title":"Num of Goal Predicates"},{"location":"exp-goals/#more-goal-predicates-search-time-increases-more-than-linearly","text":"test_goals.sh tests the effect of increasing the number of goal predicates on search complexity, with the same kitchen_1 .pddl and obj_1 .pddl, i.e. minimum operators & objects: omelette_1.pddl has fried buttery eggs omelette_2.pddl has the egg beaten and folded omelette_3.pddl adds veggies omelette_4.pddl adds salt and pepper omelette_5.pddl adds nutmilk and chives --> Optimizing LAMA failed omelette_5a.pddl contains nutmilk and chives and no salt and pepper omelette_5b.pddl contains (exist-omelette) omelette_6.pddl contains one negative goal predicate --> Optimizing LAMA failed omelette_7.pddl contains two negative goal predicates --> Optimizing LAMA failed t run_name var op axiom plan cost parse search state ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110303 omelette_1, pln=lama_first 34 742 10 20 20 1.221 0.00202162 68 110313 omelette_1, pln=lama 34 742 10 16 16 1.336 0.03793621 (>8.71) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110314 omelette_2, pln=lama_first 38 745 13 31 31 1.183 0.00387042 140 110324 omelette_2, pln=lama 38 745 13 21 21 1.403 0.04361057 (>8.64) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110326 omelette_3, pln=lama_first 39 749 13 42 42 1.182 0.00434013 165 110336 omelette_3, pln=lama 39 749 13 25 25 1.333 0.04825091 (>8.71) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110338 omelette_4, pln=lama_first 53 947 13 63 63 1.192 0.0119063 433 110348 omelette_4, pln=lama 53 947 13 48 48 1.449 0.05891371 (>8.60) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110349 omelette_5, pln=lama_first 61 1199 13 55 55 1.199 0.0126142 348 110359 omelette_5, pln=lama 61 1199 13 - - 1.308 (>8.75) - ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110401 omelette_5a, pln=lama_first 47 1001 13 43 43 1.219 0.00722862 215 110411 omelette_5a, pln=lama 47 1001 13 38 38 1.299 0.05087042 (>8.75) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110413 omelette_5b, pln=lama_first 58 1199 14 54 54 1.257 0.0210328 590 110423 omelette_5b, pln=lama 58 1199 14 50 50 1.322 0.06957221 (>8.72) ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110425 omelette_6, pln=lama_first 63 1199 15 55 55 1.183 0.0127868 348 110435 omelette_6, pln=lama 63 1199 15 - - 1.343 (>8.70) - ------ --------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 110436 omelette_7, pln=lama_first 63 1199 15 55 55 1.184 0.0125673 348 110446 omelette_7, pln=lama 63 1199 15 - - 1.302 (>8.74) - We want to investigate: why omelette_4 and omelette_5a were successful but omelette_5 wasn't why omelette_5b was successful but omelette_5 wasn't, when speicifying the same goal why omelette_6 and omelette_7 weren't successful","title":"More goal predicates -&gt; Search time increases more than linearly"},{"location":"exp-merged-domains/","text":"Merged domains # test_merge.sh tests the increase in planning time when multiple domains are merged together. Two separate domains + minimum objects # timeout is 10 sec shop_veggies.pddl has the goal of (in fridge veggie1) shop_lambchop.pddl has the goal of (in fridge veggie1) and (in fridge lambchop) the initial state of combined domain is the initial state of both domains minus the goal of the grocery domain ( obj_grocery_costs+obj_extended2 and obj_grocery_costs+obj_lambchop2 ) t run_name var op axiom plan cost parse search state ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222715 grocery_costs, shop_veggies, lama_first, obj_grocery_costs 148 392 170 8 75 0.09 0.000394 11 222720 kitchen_extended, omelette, lama_first, obj_extended 187 2149 97 45 71 4.96 0.0258232 225 222727 grocery_costs+kitchen_extended, omelette_extended, lama_first 366 2616 272 58 155 5.823 0.0427716 305 ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222727 grocery_costs, shop_veggies, lama, obj_grocery_costs 148 392 170 18 67 0.093 0.0977727 3191 222738 kitchen_extended, omelette, lama, obj_extended 187 2149 97 45 64 5.057 0.137848 (>4.99) 222748 grocery_costs+kitchen_extended, omelette_extended, lama 366 2616 272 58 155 5.816 0.177432 (>4.24) ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222748 grocery_costs, shop_lambchop, lama_first, obj_grocery_costs 154 395 172 22 310 0.09 0.000909792 28 222758 kitchen_lambchop, omelette, lama_first, obj_lambchop 211 2924 110 45 71 9.227 0.0303339 225 222808 kitchen_lambchop, lambchop, lama_first, obj_lambchop 268 3556 113 71 117 9.06 0.0622388 384 222818 grocery_costs+kitchen_lambchop, omelette_lambchop, lama_first 445 3964 285 89 417 9.191 0.149499 942 ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222819 grocery_costs, shop_lambchop, lama, obj_grocery_costs 154 395 172 27 122 0.093 0.445976 12599 222829 kitchen_lambchop, omelette, lama, obj_lambchop 211 2924 110 45 64 9.736 0.186976 (>0.32) 222839 kitchen_lambchop, lambchop, lama, obj_lambchop 268 3556 113 67 98 9.154 0.26242 (>0.90) 222900 grocery_costs+kitchen_lambchop, omelette_lambchop, lama 445 3964 285 100 233 9.925 0.429303 (>10.13) Two interdependent domains + minimum objects # There're 2 ways to Make Customer Pay, each of which involves 3 combo meals, each of which includes 2 egg or lamb dishes, each of which requires purchase of different ingredients. timeout is 30 sec ( lama can't finish search even when timeout is 300 sec) for simplifying the table, grocery is short for grocery_costs.pddl , kitchen is short for kitchen.pddl , shop_lambchop.pddl has the goal of (in fridge veggie1) and (in fridge lambchop) the initial state of combined domain is the initial state of both domains minus the goal of the grocery domain ( obj_grocery_costs+obj_happy2 for all problems) t run_name var op axiom plan cost parse search state ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011917 grocery, shop_lambchop_egg_veggie, lama_first, obj_grocery_costs 165 408 172 24 341 0.095 0.00105371 32 011927 kitchen, lambchop_omelette, lama_first, obj_happy 290 3793 123 76 126 9.48 0.103596 601 011937 grocery+kitchen, lambchop_omelette_extended, lama_first 506 4224 299 97 458 9.657 0.170804 1042 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011938 grocery, shop_lambchop_egg_bread, lama_first, obj_grocery_costs 164 403 176 34 493 0.095 0.00176229 55 011948 kitchen, lambchop_hole, lama_first, obj_happy 202 2670 117 54 88 9.519 0.0303301 217 011958 grocery+kitchen, lambchop_hole_extended, lama_first 418 3101 293 92 613 9.594 0.103603 675 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011959 grocery, shop_lambchop_egg_pot, lama_first, obj_grocery_costs 160 403 172 28 401 0.093 0.00122154 38 012009 kitchen, lambchop_poached, lama_first, obj_happy 264 3428 123 56 93 9.563 0.0663781 446 012019 grocery+kitchen, lambchop_poached_extended, lama_first 480 3859 299 91 501 9.551 0.224359 1247 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012029 kitchen, customer_happy, lama_first, obj_happy 356 4397 136 63 99 9.508 0.0676363 392 012040 grocery+kitchen, customer_happy_extended, lama_first 572 4828 312 92 505 9.793 0.340019 1788 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012051 kitchen, customer_pay, lama_first, obj_happy 364 4401 143 55 92 9.554 0.0931746 552 012101 grocery+kitchen, customer_pay_extended, lama_first 580 4832 319 90 506 9.687 0.219314 1432 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012116 grocery, shop_lambchop_egg_veggie, lama, obj_grocery_costs 165 408 172 29 133 0.098 14.2988 399417 012147 kitchen, lambchop_omelette, lama, obj_happy 290 3793 123 67 100 9.801 0.299012 (>20.25) 012217 grocery+kitchen, lambchop_omelette_extended, lama 506 4224 299 110 247 9.727 0.38173 (>20.33) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012246 grocery, shop_lambchop_egg_bread, lama, obj_grocery_costs 164 403 176 36 157 0.095 27.7832 815333 012316 kitchen, lambchop_hole, lama, obj_happy 202 2670 117 54 88 9.729 0.183835 (>20.33) 012346 grocery+kitchen, lambchop_hole_extended, lama 418 3101 293 100 252 9.828 0.273357 (>20.23) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012357 grocery, shop_lambchop_egg_pot, lama, obj_grocery_costs 160 403 172 30 137 0.094 10.4946 321486 012427 kitchen, lambchop_poached, lama, obj_happy 264 3428 123 53 84 9.673 0.242294 (>20.38) 012458 grocery+kitchen, lambchop_poached_extended, lama 480 3859 299 92 231 9.853 0.40539 (>20.21) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012528 kitchen, customer_happy, lama, obj_happy 356 4397 136 56 84 9.631 0.278214 (>20.42) 012559 grocery+kitchen, customer_happy_extended, lama 572 4828 312 108 245 9.658 0.501497 (>20.40) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012629 kitchen, customer_pay, lama, obj_happy 364 4401 143 54 78 9.563 0.243385 (>20.49) 012700 grocery+kitchen, customer_pay_extended, lama 580 4832 319 121 307 9.944 0.360204 (>20.12)","title":"Merged Domains"},{"location":"exp-merged-domains/#merged-domains","text":"test_merge.sh tests the increase in planning time when multiple domains are merged together.","title":"Merged domains"},{"location":"exp-merged-domains/#two-separate-domains-minimum-objects","text":"timeout is 10 sec shop_veggies.pddl has the goal of (in fridge veggie1) shop_lambchop.pddl has the goal of (in fridge veggie1) and (in fridge lambchop) the initial state of combined domain is the initial state of both domains minus the goal of the grocery domain ( obj_grocery_costs+obj_extended2 and obj_grocery_costs+obj_lambchop2 ) t run_name var op axiom plan cost parse search state ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222715 grocery_costs, shop_veggies, lama_first, obj_grocery_costs 148 392 170 8 75 0.09 0.000394 11 222720 kitchen_extended, omelette, lama_first, obj_extended 187 2149 97 45 71 4.96 0.0258232 225 222727 grocery_costs+kitchen_extended, omelette_extended, lama_first 366 2616 272 58 155 5.823 0.0427716 305 ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222727 grocery_costs, shop_veggies, lama, obj_grocery_costs 148 392 170 18 67 0.093 0.0977727 3191 222738 kitchen_extended, omelette, lama, obj_extended 187 2149 97 45 64 5.057 0.137848 (>4.99) 222748 grocery_costs+kitchen_extended, omelette_extended, lama 366 2616 272 58 155 5.816 0.177432 (>4.24) ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222748 grocery_costs, shop_lambchop, lama_first, obj_grocery_costs 154 395 172 22 310 0.09 0.000909792 28 222758 kitchen_lambchop, omelette, lama_first, obj_lambchop 211 2924 110 45 71 9.227 0.0303339 225 222808 kitchen_lambchop, lambchop, lama_first, obj_lambchop 268 3556 113 71 117 9.06 0.0622388 384 222818 grocery_costs+kitchen_lambchop, omelette_lambchop, lama_first 445 3964 285 89 417 9.191 0.149499 942 ------ ------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 222819 grocery_costs, shop_lambchop, lama, obj_grocery_costs 154 395 172 27 122 0.093 0.445976 12599 222829 kitchen_lambchop, omelette, lama, obj_lambchop 211 2924 110 45 64 9.736 0.186976 (>0.32) 222839 kitchen_lambchop, lambchop, lama, obj_lambchop 268 3556 113 67 98 9.154 0.26242 (>0.90) 222900 grocery_costs+kitchen_lambchop, omelette_lambchop, lama 445 3964 285 100 233 9.925 0.429303 (>10.13)","title":"Two separate domains + minimum objects"},{"location":"exp-merged-domains/#two-interdependent-domains-minimum-objects","text":"There're 2 ways to Make Customer Pay, each of which involves 3 combo meals, each of which includes 2 egg or lamb dishes, each of which requires purchase of different ingredients. timeout is 30 sec ( lama can't finish search even when timeout is 300 sec) for simplifying the table, grocery is short for grocery_costs.pddl , kitchen is short for kitchen.pddl , shop_lambchop.pddl has the goal of (in fridge veggie1) and (in fridge lambchop) the initial state of combined domain is the initial state of both domains minus the goal of the grocery domain ( obj_grocery_costs+obj_happy2 for all problems) t run_name var op axiom plan cost parse search state ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011917 grocery, shop_lambchop_egg_veggie, lama_first, obj_grocery_costs 165 408 172 24 341 0.095 0.00105371 32 011927 kitchen, lambchop_omelette, lama_first, obj_happy 290 3793 123 76 126 9.48 0.103596 601 011937 grocery+kitchen, lambchop_omelette_extended, lama_first 506 4224 299 97 458 9.657 0.170804 1042 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011938 grocery, shop_lambchop_egg_bread, lama_first, obj_grocery_costs 164 403 176 34 493 0.095 0.00176229 55 011948 kitchen, lambchop_hole, lama_first, obj_happy 202 2670 117 54 88 9.519 0.0303301 217 011958 grocery+kitchen, lambchop_hole_extended, lama_first 418 3101 293 92 613 9.594 0.103603 675 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 011959 grocery, shop_lambchop_egg_pot, lama_first, obj_grocery_costs 160 403 172 28 401 0.093 0.00122154 38 012009 kitchen, lambchop_poached, lama_first, obj_happy 264 3428 123 56 93 9.563 0.0663781 446 012019 grocery+kitchen, lambchop_poached_extended, lama_first 480 3859 299 91 501 9.551 0.224359 1247 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012029 kitchen, customer_happy, lama_first, obj_happy 356 4397 136 63 99 9.508 0.0676363 392 012040 grocery+kitchen, customer_happy_extended, lama_first 572 4828 312 92 505 9.793 0.340019 1788 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012051 kitchen, customer_pay, lama_first, obj_happy 364 4401 143 55 92 9.554 0.0931746 552 012101 grocery+kitchen, customer_pay_extended, lama_first 580 4832 319 90 506 9.687 0.219314 1432 ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012116 grocery, shop_lambchop_egg_veggie, lama, obj_grocery_costs 165 408 172 29 133 0.098 14.2988 399417 012147 kitchen, lambchop_omelette, lama, obj_happy 290 3793 123 67 100 9.801 0.299012 (>20.25) 012217 grocery+kitchen, lambchop_omelette_extended, lama 506 4224 299 110 247 9.727 0.38173 (>20.33) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012246 grocery, shop_lambchop_egg_bread, lama, obj_grocery_costs 164 403 176 36 157 0.095 27.7832 815333 012316 kitchen, lambchop_hole, lama, obj_happy 202 2670 117 54 88 9.729 0.183835 (>20.33) 012346 grocery+kitchen, lambchop_hole_extended, lama 418 3101 293 100 252 9.828 0.273357 (>20.23) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012357 grocery, shop_lambchop_egg_pot, lama, obj_grocery_costs 160 403 172 30 137 0.094 10.4946 321486 012427 kitchen, lambchop_poached, lama, obj_happy 264 3428 123 53 84 9.673 0.242294 (>20.38) 012458 grocery+kitchen, lambchop_poached_extended, lama 480 3859 299 92 231 9.853 0.40539 (>20.21) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012528 kitchen, customer_happy, lama, obj_happy 356 4397 136 56 84 9.631 0.278214 (>20.42) 012559 grocery+kitchen, customer_happy_extended, lama 572 4828 312 108 245 9.658 0.501497 (>20.40) ------ ---------------------------------------------------------------- ----- ---- ------- ------ ------ ------- ----------- -------- 012629 kitchen, customer_pay, lama, obj_happy 364 4401 143 54 78 9.563 0.243385 (>20.49) 012700 grocery+kitchen, customer_pay_extended, lama 580 4832 319 121 307 9.944 0.360204 (>20.12)","title":"Two interdependent domains + minimum objects"},{"location":"exp-objects/","text":"More objects -> Search time increases linearly with alternative utensils # test_objects.sh tests the effect of increasing the number of objects on search complexity by adding objects to obj_0.pddl , with the same set of operators in kitchen_1.pddl and the same goal definition in omelette_5.pddl , i.e. a full omelette: obj_0.pddl contains the bare minimum set of objects --> [Note 2] obj_1.pddl adds 3 extranuous objects (i.e. pot/pan, bread/veggies, oliveoil/butter) obj_2.pddl adds 3 alternative objects (i.e. knife/fork, bigbowl/smallbowl, saltedbutter/butter) obj_3.pddl contains 10 eggs and 10 veggies (the goal mentions egg1 and veggie1) --> [Note 1] obj_4.pddl contains multiples (2) of every utensil (11) --> [Note 3] obj_5.pddl contains multiples (10) of every utensil (11) --> [Conclusion 1] obj_eggs_0.pddl contains the bare minimum set of objects for making 10 egg recipes t problem_name var op axiom plan parse search state ------ -------------- ----- ----- ------- ------ ------- --------- ------- 142459 obj_0.pddl 56 932 11 48 0.483 0.0119011 * 177 142501 obj_1.pddl 61 1522 13 55 1.211 0.0194257 348 142502 obj_2.pddl 60 1280 13 54 0.898 0.0389651 * 580 142505 obj_3.pddl 92 2930 46 48 2.721 0.0209925 181 142507 obj_4.pddl 119 2849 11 63 1.701 0.0684566 * 678 142546 obj_5.pddl 429 56083 11 53 37.081 0.596486 * 907 Conclusion 1: Search time increases linearly with alternative utensils # Looking at line 1, line 3 (added 3 alternative utensil), line 5 (duplicated number of utensils by 2), and line 6 (duplicated number of utensils by 10), we notice that search time increases almost linearly number of operators increases more than linearly number of axioms doesn't change plan lengths are different (strange) Note 1: Use Axioms to define recipe # Note that 10 eggs and 10 veggies only has a small effect when the goal mentions only the existance of egg and veggies, as opposed to mentioning egg1 and veggie1 : obj_0.pddl + omelette_5.pddl ( obj_0.pddl contains the bare minimum set of objects) obj_3.pddl + omelette_5.pddl ( obj_3.pddl contains 10 eggs and 10 veggies) obj_3.pddl + omelette_5b.pddl , which contains goal (exist-omelette kitchen) t problem_name var op axiom plan parse search state ------ ----------------------- ----- ---- ------- ------ ------- --------- ------- 144457 obj_0, omelette_5.pddl 56 932 11 48 0.495 0.0104259 177 144500 obj_3, omelette_5.pddl 92 2930 46 48 2.709 0.0198585 181 144504 obj_3, omelette_5b.pddl 269 3524 83 49 2.763 0.0517935 409 the following are results containing goal of (exist-omelette kitchen) t run_name var op axiom plan cost parse search state ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210933 kitchen_egg_1, omelette, obj_0.pddl 60 932 27 47 47 0.511 0.0102195 165 211058 kitchen_egg_1, omelette, obj_3.pddl 294 3542 198 47 47 3.094 0.0526419 424 214116 kitchen_egg_1, omelette, obj_4.pddl 124 2849 29 68 68 1.667 0.068268 680 063459 kitchen_egg_1, omelette, obj_4_xl.pddl 358 9419 299 51 51 12.865 0.41591 1618 065450 kitchen_egg_1, omelette, obj_4_xxl.pddl 444 32749 501 51 51 40.412 0.507984 1109 Definition of an omelette in kitchen_1.pddl # ( :derived ( exist-omelette ?env - env ) ( exists ( ?egg1 - egg ?veggies1 - ingredient ?plate1 - plate ?p - normalcontainer ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( folded ?egg1 ) ( is-buttery ?egg1 ) ( fried ?veggies1 ) ( sauteed ?veggies1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon1 two ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram two ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram two ) ( seasoning-mixed ?egg1 pepper ) ) ) ) Note 2: Objects, Init, and Goals in omelette_5.pddl # (define (problem Omelette) (:domain Kitchen) (:objects ucup1 ucup2 dcup1 dcup2 drawer1 fridge - furniture burner - appliance kitchentop sink - worktop salt pepper chives - seasoning butter - oil nutmilk - liquid veggies1 - ingredient egg1 - egg fork1 - normalutensil spatula1 - cookingutensil tablespoon1 - measureutensil whisk1 - whiskutensil plate1 - plate salter1 shaker1 container1 - normalcontainer milkbottle1 - liquidcontainer smallbowl1 - specialcontainer frypan1 - cookingcontainer robot - agent one two three four - number gram cup - measureunit kitchen - env ) (:init ; ---------------------- ; properties of places that cannot move ; ---------------------- (closed drawer1) (closed dcup1) (closed fridge) (closed dcup2) (closed ucup1) (closed ucup2) (switchedoff burner) ; ---------------------- ; stored in places that cannot move ; ---------------------- (in dcup1 frypan1) (in dcup2 container1) (in fridge egg1) (in fridge veggies1) (in fridge milkbottle1) (in fridge butter) (on kitchentop salter1) (on kitchentop shaker1) (on kitchentop tablespoon1) (on kitchentop fork1) (on kitchentop spatula1) (on kitchentop whisk1) (on kitchentop plate1) (on kitchentop smallbowl1) ; ---------------------- ; stored in movables ; ---------------------- (inside salter1 salt) (inside shaker1 pepper) (inside container1 chives) (inside milkbottle1 nutmilk) ; ---------------------- ; properties of ingredients ; ---------------------- (raw egg1) (sauteed veggies1) (is-butter butter) ) (:goal (and (closed ucup1) (closed ucup2) (closed dcup1) (closed dcup2) (closed drawer1) (closed fridge) (switchedoff burner) (beaten egg1) (fried egg1) (folded egg1) (is-buttery egg1) (fried veggies1) (has-seasoning egg1 salt gram four) (seasoning-mixed egg1 salt) (has-seasoning egg1 pepper gram four) (seasoning-mixed egg1 pepper) (has-seasoning egg1 chives tablespoon1 two) (seasoning-mixed egg1 chives) (has-seasoning egg1 nutmilk cup two) ) ) ) Note 3: the Objects Duplicated in obj_4.pddl and obj_5.pddl # (in dcup1 frypan2) (in dcup2 container2) (in fridge milkbottle2) (on kitchentop salter2) (on kitchentop shaker2) (on kitchentop tablespoon2) (on kitchentop fork2) (on kitchentop spatula2) (on kitchentop whisk2) (on kitchentop plate2) (on kitchentop smallbowl2) (inside salter2 salt) (inside shaker2 pepper) (inside container2 chives) (inside milkbottle2 nutmilk)","title":"Num of Objects"},{"location":"exp-objects/#more-objects-search-time-increases-linearly-with-alternative-utensils","text":"test_objects.sh tests the effect of increasing the number of objects on search complexity by adding objects to obj_0.pddl , with the same set of operators in kitchen_1.pddl and the same goal definition in omelette_5.pddl , i.e. a full omelette: obj_0.pddl contains the bare minimum set of objects --> [Note 2] obj_1.pddl adds 3 extranuous objects (i.e. pot/pan, bread/veggies, oliveoil/butter) obj_2.pddl adds 3 alternative objects (i.e. knife/fork, bigbowl/smallbowl, saltedbutter/butter) obj_3.pddl contains 10 eggs and 10 veggies (the goal mentions egg1 and veggie1) --> [Note 1] obj_4.pddl contains multiples (2) of every utensil (11) --> [Note 3] obj_5.pddl contains multiples (10) of every utensil (11) --> [Conclusion 1] obj_eggs_0.pddl contains the bare minimum set of objects for making 10 egg recipes t problem_name var op axiom plan parse search state ------ -------------- ----- ----- ------- ------ ------- --------- ------- 142459 obj_0.pddl 56 932 11 48 0.483 0.0119011 * 177 142501 obj_1.pddl 61 1522 13 55 1.211 0.0194257 348 142502 obj_2.pddl 60 1280 13 54 0.898 0.0389651 * 580 142505 obj_3.pddl 92 2930 46 48 2.721 0.0209925 181 142507 obj_4.pddl 119 2849 11 63 1.701 0.0684566 * 678 142546 obj_5.pddl 429 56083 11 53 37.081 0.596486 * 907","title":"More objects -&gt; Search time increases linearly with alternative utensils"},{"location":"exp-objects/#conclusion-1-search-time-increases-linearly-with-alternative-utensils","text":"Looking at line 1, line 3 (added 3 alternative utensil), line 5 (duplicated number of utensils by 2), and line 6 (duplicated number of utensils by 10), we notice that search time increases almost linearly number of operators increases more than linearly number of axioms doesn't change plan lengths are different (strange)","title":"Conclusion 1: Search time increases linearly with alternative utensils"},{"location":"exp-objects/#note-1-use-axioms-to-define-recipe","text":"Note that 10 eggs and 10 veggies only has a small effect when the goal mentions only the existance of egg and veggies, as opposed to mentioning egg1 and veggie1 : obj_0.pddl + omelette_5.pddl ( obj_0.pddl contains the bare minimum set of objects) obj_3.pddl + omelette_5.pddl ( obj_3.pddl contains 10 eggs and 10 veggies) obj_3.pddl + omelette_5b.pddl , which contains goal (exist-omelette kitchen) t problem_name var op axiom plan parse search state ------ ----------------------- ----- ---- ------- ------ ------- --------- ------- 144457 obj_0, omelette_5.pddl 56 932 11 48 0.495 0.0104259 177 144500 obj_3, omelette_5.pddl 92 2930 46 48 2.709 0.0198585 181 144504 obj_3, omelette_5b.pddl 269 3524 83 49 2.763 0.0517935 409 the following are results containing goal of (exist-omelette kitchen) t run_name var op axiom plan cost parse search state ------ --------------------------------------------- ----- ---- ------- ------ ------ ------- ---------- ------- 210933 kitchen_egg_1, omelette, obj_0.pddl 60 932 27 47 47 0.511 0.0102195 165 211058 kitchen_egg_1, omelette, obj_3.pddl 294 3542 198 47 47 3.094 0.0526419 424 214116 kitchen_egg_1, omelette, obj_4.pddl 124 2849 29 68 68 1.667 0.068268 680 063459 kitchen_egg_1, omelette, obj_4_xl.pddl 358 9419 299 51 51 12.865 0.41591 1618 065450 kitchen_egg_1, omelette, obj_4_xxl.pddl 444 32749 501 51 51 40.412 0.507984 1109","title":"Note 1: Use Axioms to define recipe"},{"location":"exp-objects/#definition-of-an-omelette-in-kitchen_1pddl","text":"( :derived ( exist-omelette ?env - env ) ( exists ( ?egg1 - egg ?veggies1 - ingredient ?plate1 - plate ?p - normalcontainer ) ( and ( inside ?plate1 ?egg1 ) ( beaten ?egg1 ) ( fried ?egg1 ) ( folded ?egg1 ) ( is-buttery ?egg1 ) ( fried ?veggies1 ) ( sauteed ?veggies1 ) ( has-seasoning ?egg1 nutmilk cup two ) ( has-seasoning ?egg1 chives tablespoon1 two ) ( seasoning-mixed ?egg1 chives ) ( has-seasoning ?egg1 salt gram two ) ( seasoning-mixed ?egg1 salt ) ( has-seasoning ?egg1 pepper gram two ) ( seasoning-mixed ?egg1 pepper ) ) ) )","title":"Definition of an omelette in kitchen_1.pddl"},{"location":"exp-objects/#note-2-objects-init-and-goals-in-omelette_5pddl","text":"(define (problem Omelette) (:domain Kitchen) (:objects ucup1 ucup2 dcup1 dcup2 drawer1 fridge - furniture burner - appliance kitchentop sink - worktop salt pepper chives - seasoning butter - oil nutmilk - liquid veggies1 - ingredient egg1 - egg fork1 - normalutensil spatula1 - cookingutensil tablespoon1 - measureutensil whisk1 - whiskutensil plate1 - plate salter1 shaker1 container1 - normalcontainer milkbottle1 - liquidcontainer smallbowl1 - specialcontainer frypan1 - cookingcontainer robot - agent one two three four - number gram cup - measureunit kitchen - env ) (:init ; ---------------------- ; properties of places that cannot move ; ---------------------- (closed drawer1) (closed dcup1) (closed fridge) (closed dcup2) (closed ucup1) (closed ucup2) (switchedoff burner) ; ---------------------- ; stored in places that cannot move ; ---------------------- (in dcup1 frypan1) (in dcup2 container1) (in fridge egg1) (in fridge veggies1) (in fridge milkbottle1) (in fridge butter) (on kitchentop salter1) (on kitchentop shaker1) (on kitchentop tablespoon1) (on kitchentop fork1) (on kitchentop spatula1) (on kitchentop whisk1) (on kitchentop plate1) (on kitchentop smallbowl1) ; ---------------------- ; stored in movables ; ---------------------- (inside salter1 salt) (inside shaker1 pepper) (inside container1 chives) (inside milkbottle1 nutmilk) ; ---------------------- ; properties of ingredients ; ---------------------- (raw egg1) (sauteed veggies1) (is-butter butter) ) (:goal (and (closed ucup1) (closed ucup2) (closed dcup1) (closed dcup2) (closed drawer1) (closed fridge) (switchedoff burner) (beaten egg1) (fried egg1) (folded egg1) (is-buttery egg1) (fried veggies1) (has-seasoning egg1 salt gram four) (seasoning-mixed egg1 salt) (has-seasoning egg1 pepper gram four) (seasoning-mixed egg1 pepper) (has-seasoning egg1 chives tablespoon1 two) (seasoning-mixed egg1 chives) (has-seasoning egg1 nutmilk cup two) ) ) )","title":"Note 2: Objects, Init, and Goals in omelette_5.pddl"},{"location":"exp-objects/#note-3-the-objects-duplicated-in-obj_4pddl-and-obj_5pddl","text":"(in dcup1 frypan2) (in dcup2 container2) (in fridge milkbottle2) (on kitchentop salter2) (on kitchentop shaker2) (on kitchentop tablespoon2) (on kitchentop fork2) (on kitchentop spatula2) (on kitchentop whisk2) (on kitchentop plate2) (on kitchentop smallbowl2) (inside salter2 salt) (inside shaker2 pepper) (inside container2 chives) (inside milkbottle2 nutmilk)","title":"Note 3: the Objects Duplicated in obj_4.pddl and obj_5.pddl"},{"location":"exp-operators/","text":"More operators -> Search time increases linearly # test_operators tests the effect of increasing the number of operators (for multiple recipes) on search complexity, with the same omelette.pddl and obj_1.pddl , i.e. minimum plan length & objects: kitchen_1.pddl contains all operators for omelette recipe kitchen_2.pddl contains all operators for omelette + maintanance goals kitchen_3.pddl contains all operators & definitions for 10 egg recipes kitchen_4.pddl contains all operators & definitions for 10 egg recipes, with different action costs that reflect time costs kitchen_5.pddl contains all operators & definitions for egg & baking recipes, with different action costs that reflect time costs t problem_name var op axiom plan parse search state ------ --------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 090721 kitchen_1-omelette_5-obj_1.pddl-omelette_5.pddl 66 1004 11 48 0.659 0.0181792 243 090722 kitchen_2-omelette-obj_1.pddl-omelette.pddl 70 1004 27 64 0.61 0.0349843 519 090733 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.058 0.115542 711 TODO: change the obj_1.pddl here to obj_4 .pddl and obj_eggs.pddl to make the problem combinatorially complicated","title":"More operators -> Search time increases linearly"},{"location":"exp-operators/#more-operators-search-time-increases-linearly","text":"test_operators tests the effect of increasing the number of operators (for multiple recipes) on search complexity, with the same omelette.pddl and obj_1.pddl , i.e. minimum plan length & objects: kitchen_1.pddl contains all operators for omelette recipe kitchen_2.pddl contains all operators for omelette + maintanance goals kitchen_3.pddl contains all operators & definitions for 10 egg recipes kitchen_4.pddl contains all operators & definitions for 10 egg recipes, with different action costs that reflect time costs kitchen_5.pddl contains all operators & definitions for egg & baking recipes, with different action costs that reflect time costs t problem_name var op axiom plan parse search state ------ --------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 090721 kitchen_1-omelette_5-obj_1.pddl-omelette_5.pddl 66 1004 11 48 0.659 0.0181792 243 090722 kitchen_2-omelette-obj_1.pddl-omelette.pddl 70 1004 27 64 0.61 0.0349843 519 090733 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.058 0.115542 711 TODO: change the obj_1.pddl here to obj_4 .pddl and obj_eggs.pddl to make the problem combinatorially complicated","title":"More operators -&gt; Search time increases linearly"},{"location":"exp-planner-options/","text":"Planner Modes # Make egg dishes # test_FD.sh tests the planning time and performance of Satisfising LAMA ( lama_first ) and Optimizing LAMA ( lama ). Note that for each planner run, total timeout for translation and search is 10 sec. When state shows (>number) , it means the search is still finding more plans. The best plan so far is reported here. t run_name var op axiom plan cost parse search state ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190628 omelette, pln=lama_first 187 2149 97 45 71 5.076 0.0226832 225 190638 omelette, pln=lama 187 2149 97 45 64 5.274 0.139128 (>4.79) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190644 scrambled_eggs, pln=lama_first 187 2149 97 53 85 5.234 0.0322311 306 190655 scrambled_eggs, pln=lama 187 2149 97 44 61 5.516 0.189056 (>4.54) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190700 sunny_side_up, pln=lama_first 187 2149 97 27 42 5.267 0.00612013 66 190711 sunny_side_up, pln=lama 187 2149 97 28 41 5.178 0.114958 (>4.87) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190716 egg_in_hole, pln=lama_first 187 2149 97 32 48 5.151 0.00806562 119 190727 egg_in_hole, pln=lama 187 2149 97 30 41 5.121 0.112132 (>4.95) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190732 poached_egg, pln=lama_first 225 2459 103 23 36 5.117 0.00811542 103 190743 poached_egg, pln=lama 225 2459 103 20 31 5.007 0.119612 (>5.04) Goal of poached_egg.pddl ( :derived ( exist-poached-egg ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( enable-poached-egg ?egg1 ?plate1 ) ) ) ( :action declare-poached-egg :parameters ( ?egg1 - egg ?plate1 - plate ) :precondition( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ) :effect( and ( enable-poached-egg ?egg1 ?plate1 ) ;( not ( boiled water ) ) ( not ( boiled ?egg1 ) ) ( not ( hardness ?egg1 outerside medium-hard ) ) ;( not ( has-vinegar water ) ) ( increase ( total-cost ) 1 ) ) ) Plan of length 23 by lama_first : open dcup1 (1) getout pot1 dcup1 robot (1) close dcup1 (1) putdown pot1 burner robot (2) pickup faucet kitchentop robot (2) ## it's unnecessary to pick up the faucet transfer water faucet pot1 robot (1) open fridge1 (1) getout egg1 fridge1 robot (1) close fridge1 (1) crack-egg egg1 smallbowl1 robot (1) putdown faucet burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer egg1 smallbowl1 pot1 robot (1) open dcup1 (1) getout mediumbottle1 dcup1 robot (1) close dcup1 (1) switchon burner pot1 (1) change-level burner medium (1) boil water pot1 burner (5) boil water pot1 burner (5) switchoff burner pot1 (1) pour-liquid whitevinegar mediumbottle1 pot1 robot (2) ## chosen by lama_first declare-poached-egg egg1 plate1 (1) Plan of length 20 by lama : pickup faucet kitchentop robot (2) transfer water faucet pot1 robot (1) open dcup1 (1) getout pot1 dcup1 robot (1) getout mediumbottle1 dcup1 robot (1) close dcup1 (1) open fridge1 (1) getout egg1 fridge1 robot (1) close fridge1 (1) crack-egg egg1 smallbowl1 robot (1) putdown pot1 burner robot (2) switchon burner pot1 (1) change-level burner medium (1) boil water pot1 burner (5) pickup smallbowl1 kitchentop robot (2) transfer egg1 smallbowl1 pot1 robot (1) boil water pot1 burner (5) switchoff burner pot1 (1) transfer whitevinegar mediumbottle1 pot1 robot (1) ## a better action chosen by lama declare-poached-egg egg1 plate1 (1) Make customer happy #","title":"Satisfising v.s. Optimizing"},{"location":"exp-planner-options/#planner-modes","text":"","title":"Planner Modes"},{"location":"exp-planner-options/#make-egg-dishes","text":"test_FD.sh tests the planning time and performance of Satisfising LAMA ( lama_first ) and Optimizing LAMA ( lama ). Note that for each planner run, total timeout for translation and search is 10 sec. When state shows (>number) , it means the search is still finding more plans. The best plan so far is reported here. t run_name var op axiom plan cost parse search state ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190628 omelette, pln=lama_first 187 2149 97 45 71 5.076 0.0226832 225 190638 omelette, pln=lama 187 2149 97 45 64 5.274 0.139128 (>4.79) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190644 scrambled_eggs, pln=lama_first 187 2149 97 53 85 5.234 0.0322311 306 190655 scrambled_eggs, pln=lama 187 2149 97 44 61 5.516 0.189056 (>4.54) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190700 sunny_side_up, pln=lama_first 187 2149 97 27 42 5.267 0.00612013 66 190711 sunny_side_up, pln=lama 187 2149 97 28 41 5.178 0.114958 (>4.87) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190716 egg_in_hole, pln=lama_first 187 2149 97 32 48 5.151 0.00806562 119 190727 egg_in_hole, pln=lama 187 2149 97 30 41 5.121 0.112132 (>4.95) ------ ------------------------------ ----- ---- ------- ------ ------ ------- ---------- ------- 190732 poached_egg, pln=lama_first 225 2459 103 23 36 5.117 0.00811542 103 190743 poached_egg, pln=lama 225 2459 103 20 31 5.007 0.119612 (>5.04) Goal of poached_egg.pddl ( :derived ( exist-poached-egg ?env - env ) ( exists ( ?egg1 - egg ?plate1 - plate ) ( enable-poached-egg ?egg1 ?plate1 ) ) ) ( :action declare-poached-egg :parameters ( ?egg1 - egg ?plate1 - plate ) :precondition( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ) :effect( and ( enable-poached-egg ?egg1 ?plate1 ) ;( not ( boiled water ) ) ( not ( boiled ?egg1 ) ) ( not ( hardness ?egg1 outerside medium-hard ) ) ;( not ( has-vinegar water ) ) ( increase ( total-cost ) 1 ) ) ) Plan of length 23 by lama_first : open dcup1 (1) getout pot1 dcup1 robot (1) close dcup1 (1) putdown pot1 burner robot (2) pickup faucet kitchentop robot (2) ## it's unnecessary to pick up the faucet transfer water faucet pot1 robot (1) open fridge1 (1) getout egg1 fridge1 robot (1) close fridge1 (1) crack-egg egg1 smallbowl1 robot (1) putdown faucet burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer egg1 smallbowl1 pot1 robot (1) open dcup1 (1) getout mediumbottle1 dcup1 robot (1) close dcup1 (1) switchon burner pot1 (1) change-level burner medium (1) boil water pot1 burner (5) boil water pot1 burner (5) switchoff burner pot1 (1) pour-liquid whitevinegar mediumbottle1 pot1 robot (2) ## chosen by lama_first declare-poached-egg egg1 plate1 (1) Plan of length 20 by lama : pickup faucet kitchentop robot (2) transfer water faucet pot1 robot (1) open dcup1 (1) getout pot1 dcup1 robot (1) getout mediumbottle1 dcup1 robot (1) close dcup1 (1) open fridge1 (1) getout egg1 fridge1 robot (1) close fridge1 (1) crack-egg egg1 smallbowl1 robot (1) putdown pot1 burner robot (2) switchon burner pot1 (1) change-level burner medium (1) boil water pot1 burner (5) pickup smallbowl1 kitchentop robot (2) transfer egg1 smallbowl1 pot1 robot (1) boil water pot1 burner (5) switchoff burner pot1 (1) transfer whitevinegar mediumbottle1 pot1 robot (1) ## a better action chosen by lama declare-poached-egg egg1 plate1 (1)","title":"Make egg dishes"},{"location":"exp-planner-options/#make-customer-happy","text":"","title":"Make customer happy"},{"location":"exp-strategists/","text":"t run_name var op axiom plan cost prep parse search state ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 125939 424 2831 280 56 152 0 6.065 0.106465 816 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 125946 prep=SDBIG/trial1_prb2 1 0 0 - - 3.892 1.929 (>0.05) - 125948 prep=SDBIG/trial2_prb2 1 0 0 - - 0 1.957 (>0.05) - 125953 prep=SDBIG/trial3_prb2 163 2068 90 46 74 0 5.131 0.0219637 207 125954 prep=SDBIG/trial3_prb1 12 33 10 8 75 0 0.079 0.00031875 9 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 130001 prep=IOBIG 361 2422 254 56 152 0.069 3.582 0.119986 816 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 130012 prep=SDBIG+IOBIG/trial1_prb2_iobig 1 0 0 - - 3.85 1.098 (>0.05) - 130019 prep=SDBIG+IOBIG/trial2_prb2_iobig 1 0 0 - - 0.102 1.143 (>0.04) - 130027 prep=SDBIG+IOBIG/trial3_prb2_iobig 1 0 0 - - 0.112 1.169 (>0.05) - 130034 prep=SDBIG+IOBIG/trial4_prb2_iobig 1 0 0 - - 0.105 1.229 (>0.05) - 130041 prep=SDBIG+IOBIG/trial5_prb2_iobig 1 0 0 - - 0.106 1.107 (>0.04) - 130048 prep=SDBIG+IOBIG/trial6_prb2_iobig 1 0 0 - - 0.099 1.171 (>0.04) - 130057 prep=SDBIG+IOBIG/trial7_prb2_iobig 150 1786 75 46 74 0.096 2.687 0.0206456 207 130057 prep=SDBIG+IOBIG/trial7_prb1_iobig 12 29 10 8 75 0.096 0.074 0.000216834 9","title":"Combine Strategists [ NEW ]"},{"location":"exp-two-dishes/","text":"Making multiple different dishes take longer time than planning individually # Make two dishes of the same kind # test_serve_declare.sh . The length of plan for making two poached egg is much smaller than making one poached egg because actions like open fridge and switchoff burner pot1 need not be done again. t run_name var op axiom plan parse search state ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102036 scrambled_eggs 362 4620 186 46 11.018 0.0549285 328 102048 two_scrambled_eggs 362 4620 190 60 10.684 0.101157 689 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102059 omelette 370 4620 194 47 10.524 0.0495447 322 102110 two_omelette 370 4620 202 66 10.048 0.114891 676 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102121 sunny_side_up 362 4620 186 30 10.633 0.0186152 118 102132 two_sunny_side_up 362 4620 190 41 10.469 0.0331593 197 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102143 egg_in_hole 370 4620 194 34 10.37 0.0241679 185 102155 two_egg_in_hole 370 4620 202 53 11.293 0.0766958 497 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102207 poached_egg 406 4993 218 24 10.932 0.0165712 112 102219 two_poached_egg 406 4993 222 27 11.683 0.0159511 124 Instead of getting ( enable-poached-egg ?egg1 ?plate1 ) from axioms, we get it from the effects of operartors, which also include effects that reverse the preconditions. This enables flexible negation, for certain effects like ( not ( boiled water ) ) needs not be achieved again ( :action declare-poached-egg :parameters ( ?egg1 - egg ?plate1 - plate ) :precondition( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ) :effect( and ( enable-poached-egg ?egg1 ?plate1 ) ;( not ( boiled water ) ) ( not ( boiled ?egg1 ) ) ( not ( hardness ?egg1 outerside medium-hard ) ) ;( not ( has-vinegar water ) ) ( increase ( total-cost ) 1 ) ) ) With the reversed effects, it's not only able to make two dishes of the same kind, but also of different kinds Make multiple dishes of different kind # test_serve_multiple.sh t run_name var op axiom plan cost parse search state ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225521 omelette, pln=lama_first 370 4619 167 46 72 10.295 0.0506214 291 225533 egg_in_hole, pln=lama_first 370 4619 167 33 50 10.298 0.0257594 172 225544 multiple_14, pln=lama_first 387 4619 183 68 107 10.206 0.180543 924 ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225559 omelette, pln=lama 370 4619 167 46 66 10.395 0.222248 (>4.65) 225615 egg_in_hole, pln=lama 370 4619 167 32 43 11.087 0.267335 (>4.06) 225631 multiple_14, pln=lama 387 4619 183 60 86 11.642 0.347518 (>3.44) ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225643 scrambled_eggs, pln=lama_first 362 4619 159 45 71 10.882 0.0535775 310 225654 egg_in_hole, pln=lama_first 370 4619 167 33 50 10.258 0.0261091 172 225706 multiple_24, pln=lama_first 379 4619 175 64 101 10.417 0.272622 1515 ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225721 scrambled_eggs, pln=lama 362 4619 159 43 60 10.584 0.229554 (>4.46) 225737 egg_in_hole, pln=lama 370 4619 167 32 43 10.635 0.206529 (>4.43) 225753 multiple_24, pln=lama 379 4619 175 54 76 10.407 0.397696 (>4.64) The tricky thing about using effects to separate multiple dishes is the need to prevent the same action being taken twice on the same ingredient, thus operators like fry and steam need to include preconditions like ( not ( fried ?i ) ) and ( not ( steamed ?i ) ) . Difference between plans # Steps in plan by lama-first but not by lama : ['putdown egg1 burner robot (2)', 'putdown milkbottle1 burner robot (2)', 'putdown holecutter1 burner robot (2)', 'pickup egg1 burner robot (2)', 'getout container1 dcup2 robot (1)', 'pour-liquid oliveoil oilbottle1 frypan1 robot (2)', 'putdown tablespoon1 burner robot (2)', 'pickup milkbottle1 burner robot (2)', 'putdown oilbottle1 burner robot (2)', 'putdown salter1 burner robot (2)', 'putdown shaker1 burner robot (2)', 'putdown milkbottle1 burner robot (2)', 'putdown smallbowl1 burner robot (2)', 'putdown spatula1 burner robot (2)'] Steps in plan by lama but not by lama-first : ['puton holecutter1 bread1 robot (1)', 'transfer oliveoil oilbottle1 frypan1 robot (1)', 'puton tablespoon1 bread1 robot (1)', 'puton salter1 bread1 robot (1)', 'puton shaker1 bread1 robot (1)', 'puton oilbottle1 bread1 robot (1)', 'puton smallbowl1 bread1 robot (1)', 'puton spatula1 bread1 robot (1)'] lama-firt 's Plan for making scrambled_eggs and egg_in_hole (64) # open fridge (1) getout egg1 fridge robot (1) getout milkbottle1 fridge robot (1) close fridge (1) putdown egg1 burner robot (2) pickup holecutter1 kitchentop robot (2) putdown milkbottle1 burner robot (2) make-hole toast1 holecutter1 circle robot (1) pickup fork1 kitchentop robot (2) putdown holecutter1 burner robot (2) open dcup2 (1) pickup egg1 burner robot (2) getout container1 dcup2 robot (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) pour-liquid oliveoil oilbottle1 frypan1 robot (2) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (2) pickup tablespoon1 kitchentop robot (2) crack-egg egg1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) season egg1 salt salter1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (3) putdown tablespoon1 burner robot (2) pickup milkbottle1 burner robot (2) putdown oilbottle1 burner robot (2) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup salter1 kitchentop robot (2) sprinkle egg1 salt salter1 gram robot (1) open fridge (1) getout egg4 fridge robot (1) close fridge (1) crack-egg egg4 toast1 robot (1) sprinkle egg4 salt salter1 gram robot (1) putdown salter1 burner robot (2) pickup shaker1 kitchentop robot (2) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg4 pepper shaker1 gram robot (1) putdown shaker1 burner robot (2) pickup toast1 kitchentop robot (2) add-ingredient toast1 smallbowl1 robot (1) putdown milkbottle1 burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer toast1 smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) putdown smallbowl1 burner robot (2) switchon burner frypan1 (1) fry toast1 frypan1 burner oliveoil (5) fry egg1 frypan1 burner oliveoil (5) switchoff burner frypan1 (1) pickup frypan1 burner robot (2) transfer toast1 frypan1 plate1 robot (1) declare-egg-in-hole egg4 toast1 plate1 (1) putdown frypan1 burner robot (2) pickup spatula1 kitchentop robot (2) scrape egg1 frypan1 spatula1 robot (3) putdown spatula1 burner robot (2) pickup frypan1 burner robot (2) transfer egg1 frypan1 plate1 robot (1) declare-scrambled-eggs egg1 plate1 (1) lama 's Plan for making scrambled_eggs and egg_in_hole (54) # pickup holecutter1 kitchentop robot (2) make-hole toast1 holecutter1 circle robot (1) puton holecutter1 bread1 robot (1) pickup tablespoon1 kitchentop robot (2) open dcup2 (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) transfer oliveoil oilbottle1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (2) switchon burner frypan1 (1) pickup fork1 kitchentop robot (2) open fridge (1) getout milkbottle1 fridge robot (1) getout egg1 fridge robot (1) crack-egg egg1 smallbowl1 robot (1) getout egg4 fridge robot (1) close fridge (1) crack-egg egg4 toast1 robot (1) season egg1 chives container1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) season egg1 salt salter1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (3) puton tablespoon1 bread1 robot (1) pickup salter1 kitchentop robot (2) sprinkle egg1 salt salter1 gram robot (1) sprinkle egg4 salt salter1 gram robot (1) puton salter1 bread1 robot (1) pickup shaker1 kitchentop robot (2) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg4 pepper shaker1 gram robot (1) puton shaker1 bread1 robot (1) pickup toast1 kitchentop robot (2) add-ingredient toast1 smallbowl1 robot (1) puton oilbottle1 bread1 robot (1) pickup smallbowl1 kitchentop robot (2) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) transfer toast1 smallbowl1 frypan1 robot (1) fry toast1 frypan1 burner oliveoil (5) transfer egg1 smallbowl1 frypan1 robot (1) fry egg1 frypan1 burner oliveoil (5) switchoff burner frypan1 (1) puton smallbowl1 bread1 robot (1) pickup frypan1 burner robot (2) transfer toast1 frypan1 plate1 robot (1) declare-egg-in-hole egg4 toast1 plate1 (1) puton milkbottle1 bread1 robot (1) pickup spatula1 kitchentop robot (2) scrape egg1 frypan1 spatula1 robot (3) transfer egg1 frypan1 plate1 robot (1) declare-scrambled-eggs egg1 plate1 (1)","title":"Two Dishes"},{"location":"exp-two-dishes/#making-multiple-different-dishes-take-longer-time-than-planning-individually","text":"","title":"Making multiple different dishes take longer time than planning individually"},{"location":"exp-two-dishes/#make-two-dishes-of-the-same-kind","text":"test_serve_declare.sh . The length of plan for making two poached egg is much smaller than making one poached egg because actions like open fridge and switchoff burner pot1 need not be done again. t run_name var op axiom plan parse search state ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102036 scrambled_eggs 362 4620 186 46 11.018 0.0549285 328 102048 two_scrambled_eggs 362 4620 190 60 10.684 0.101157 689 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102059 omelette 370 4620 194 47 10.524 0.0495447 322 102110 two_omelette 370 4620 202 66 10.048 0.114891 676 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102121 sunny_side_up 362 4620 186 30 10.633 0.0186152 118 102132 two_sunny_side_up 362 4620 190 41 10.469 0.0331593 197 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102143 egg_in_hole 370 4620 194 34 10.37 0.0241679 185 102155 two_egg_in_hole 370 4620 202 53 11.293 0.0766958 497 ------ ------------------ ----- ---- ------- ------ ------- --------- ------- 102207 poached_egg 406 4993 218 24 10.932 0.0165712 112 102219 two_poached_egg 406 4993 222 27 11.683 0.0159511 124 Instead of getting ( enable-poached-egg ?egg1 ?plate1 ) from axioms, we get it from the effects of operartors, which also include effects that reverse the preconditions. This enables flexible negation, for certain effects like ( not ( boiled water ) ) needs not be achieved again ( :action declare-poached-egg :parameters ( ?egg1 - egg ?plate1 - plate ) :precondition( and ( boiled water ) ( boiled ?egg1 ) ( hardness ?egg1 outerside medium-hard ) ( has-vinegar water ) ) :effect( and ( enable-poached-egg ?egg1 ?plate1 ) ;( not ( boiled water ) ) ( not ( boiled ?egg1 ) ) ( not ( hardness ?egg1 outerside medium-hard ) ) ;( not ( has-vinegar water ) ) ( increase ( total-cost ) 1 ) ) ) With the reversed effects, it's not only able to make two dishes of the same kind, but also of different kinds","title":"Make two dishes of the same kind"},{"location":"exp-two-dishes/#make-multiple-dishes-of-different-kind","text":"test_serve_multiple.sh t run_name var op axiom plan cost parse search state ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225521 omelette, pln=lama_first 370 4619 167 46 72 10.295 0.0506214 291 225533 egg_in_hole, pln=lama_first 370 4619 167 33 50 10.298 0.0257594 172 225544 multiple_14, pln=lama_first 387 4619 183 68 107 10.206 0.180543 924 ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225559 omelette, pln=lama 370 4619 167 46 66 10.395 0.222248 (>4.65) 225615 egg_in_hole, pln=lama 370 4619 167 32 43 11.087 0.267335 (>4.06) 225631 multiple_14, pln=lama 387 4619 183 60 86 11.642 0.347518 (>3.44) ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225643 scrambled_eggs, pln=lama_first 362 4619 159 45 71 10.882 0.0535775 310 225654 egg_in_hole, pln=lama_first 370 4619 167 33 50 10.258 0.0261091 172 225706 multiple_24, pln=lama_first 379 4619 175 64 101 10.417 0.272622 1515 ------ ------------------------------ ----- ---- ------- ------ ------ ------- --------- ------- 225721 scrambled_eggs, pln=lama 362 4619 159 43 60 10.584 0.229554 (>4.46) 225737 egg_in_hole, pln=lama 370 4619 167 32 43 10.635 0.206529 (>4.43) 225753 multiple_24, pln=lama 379 4619 175 54 76 10.407 0.397696 (>4.64) The tricky thing about using effects to separate multiple dishes is the need to prevent the same action being taken twice on the same ingredient, thus operators like fry and steam need to include preconditions like ( not ( fried ?i ) ) and ( not ( steamed ?i ) ) .","title":"Make multiple dishes of different kind"},{"location":"exp-two-dishes/#difference-between-plans","text":"Steps in plan by lama-first but not by lama : ['putdown egg1 burner robot (2)', 'putdown milkbottle1 burner robot (2)', 'putdown holecutter1 burner robot (2)', 'pickup egg1 burner robot (2)', 'getout container1 dcup2 robot (1)', 'pour-liquid oliveoil oilbottle1 frypan1 robot (2)', 'putdown tablespoon1 burner robot (2)', 'pickup milkbottle1 burner robot (2)', 'putdown oilbottle1 burner robot (2)', 'putdown salter1 burner robot (2)', 'putdown shaker1 burner robot (2)', 'putdown milkbottle1 burner robot (2)', 'putdown smallbowl1 burner robot (2)', 'putdown spatula1 burner robot (2)'] Steps in plan by lama but not by lama-first : ['puton holecutter1 bread1 robot (1)', 'transfer oliveoil oilbottle1 frypan1 robot (1)', 'puton tablespoon1 bread1 robot (1)', 'puton salter1 bread1 robot (1)', 'puton shaker1 bread1 robot (1)', 'puton oilbottle1 bread1 robot (1)', 'puton smallbowl1 bread1 robot (1)', 'puton spatula1 bread1 robot (1)']","title":"Difference between plans"},{"location":"exp-two-dishes/#lama-firts-plan-for-making-scrambled_eggs-and-egg_in_hole-64","text":"open fridge (1) getout egg1 fridge robot (1) getout milkbottle1 fridge robot (1) close fridge (1) putdown egg1 burner robot (2) pickup holecutter1 kitchentop robot (2) putdown milkbottle1 burner robot (2) make-hole toast1 holecutter1 circle robot (1) pickup fork1 kitchentop robot (2) putdown holecutter1 burner robot (2) open dcup2 (1) pickup egg1 burner robot (2) getout container1 dcup2 robot (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) pour-liquid oliveoil oilbottle1 frypan1 robot (2) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (2) pickup tablespoon1 kitchentop robot (2) crack-egg egg1 smallbowl1 robot (1) season egg1 chives container1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) season egg1 salt salter1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (3) putdown tablespoon1 burner robot (2) pickup milkbottle1 burner robot (2) putdown oilbottle1 burner robot (2) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pickup salter1 kitchentop robot (2) sprinkle egg1 salt salter1 gram robot (1) open fridge (1) getout egg4 fridge robot (1) close fridge (1) crack-egg egg4 toast1 robot (1) sprinkle egg4 salt salter1 gram robot (1) putdown salter1 burner robot (2) pickup shaker1 kitchentop robot (2) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg4 pepper shaker1 gram robot (1) putdown shaker1 burner robot (2) pickup toast1 kitchentop robot (2) add-ingredient toast1 smallbowl1 robot (1) putdown milkbottle1 burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer toast1 smallbowl1 frypan1 robot (1) transfer egg1 smallbowl1 frypan1 robot (1) putdown smallbowl1 burner robot (2) switchon burner frypan1 (1) fry toast1 frypan1 burner oliveoil (5) fry egg1 frypan1 burner oliveoil (5) switchoff burner frypan1 (1) pickup frypan1 burner robot (2) transfer toast1 frypan1 plate1 robot (1) declare-egg-in-hole egg4 toast1 plate1 (1) putdown frypan1 burner robot (2) pickup spatula1 kitchentop robot (2) scrape egg1 frypan1 spatula1 robot (3) putdown spatula1 burner robot (2) pickup frypan1 burner robot (2) transfer egg1 frypan1 plate1 robot (1) declare-scrambled-eggs egg1 plate1 (1)","title":"lama-firt's Plan for making scrambled_eggs and egg_in_hole (64)"},{"location":"exp-two-dishes/#lamas-plan-for-making-scrambled_eggs-and-egg_in_hole-54","text":"pickup holecutter1 kitchentop robot (2) make-hole toast1 holecutter1 circle robot (1) puton holecutter1 bread1 robot (1) pickup tablespoon1 kitchentop robot (2) open dcup2 (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) transfer oliveoil oilbottle1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) close dcup1 (1) putdown frypan1 burner robot (2) switchon burner frypan1 (1) pickup fork1 kitchentop robot (2) open fridge (1) getout milkbottle1 fridge robot (1) getout egg1 fridge robot (1) crack-egg egg1 smallbowl1 robot (1) getout egg4 fridge robot (1) close fridge (1) crack-egg egg4 toast1 robot (1) season egg1 chives container1 tablespoon1 robot (1) season egg1 pepper shaker1 tablespoon1 robot (1) season egg1 salt salter1 tablespoon1 robot (1) mix egg1 fork1 smallbowl1 robot (3) puton tablespoon1 bread1 robot (1) pickup salter1 kitchentop robot (2) sprinkle egg1 salt salter1 gram robot (1) sprinkle egg4 salt salter1 gram robot (1) puton salter1 bread1 robot (1) pickup shaker1 kitchentop robot (2) sprinkle egg1 pepper shaker1 gram robot (1) sprinkle egg4 pepper shaker1 gram robot (1) puton shaker1 bread1 robot (1) pickup toast1 kitchentop robot (2) add-ingredient toast1 smallbowl1 robot (1) puton oilbottle1 bread1 robot (1) pickup smallbowl1 kitchentop robot (2) pour smallbowl1 nutmilk milkbottle1 cup robot (1) pour smallbowl1 nutmilk milkbottle1 cup robot (1) transfer toast1 smallbowl1 frypan1 robot (1) fry toast1 frypan1 burner oliveoil (5) transfer egg1 smallbowl1 frypan1 robot (1) fry egg1 frypan1 burner oliveoil (5) switchoff burner frypan1 (1) puton smallbowl1 bread1 robot (1) pickup frypan1 burner robot (2) transfer toast1 frypan1 plate1 robot (1) declare-egg-in-hole egg4 toast1 plate1 (1) puton milkbottle1 bread1 robot (1) pickup spatula1 kitchentop robot (2) scrape egg1 frypan1 spatula1 robot (3) transfer egg1 frypan1 plate1 robot (1) declare-scrambled-eggs egg1 plate1 (1)","title":"lama's Plan for making scrambled_eggs and egg_in_hole (54)"},{"location":"experiments/","text":"Experiments & Results on Search Complexity # 1. More goal predicates -> Search time increases more than linearly # test_goals.sh tests the effect of increasing the number of goal predicates on search complexity, with the same kitchen_1 .pddl and obj_1 .pddl, i.e. minimum operators & objects: * omelette_1.pddl has only eggs * omelette_2.pddl adds veggies * omelette_3.pddl adds salt and pepper * omelette_4.pddl adds nutmilk and chives * omelette_5.pddl contains all positive goal predicates without any use of axioms * omelette_6.pddl contains one negative goal predicate * omelette_6.pddl contains two negative goal predicates t problem_name var op axiom plan parse search state ------ --------------- ----- ---- ------- ------ ------- ---------- ------- 085529 omelette_1.pddl 39 700 8 16 0.632 0.0016525 29 085530 omelette_2.pddl 43 702 11 20 0.618 0.00334604 40 085531 omelette_3.pddl 44 703 11 24 0.666 0.00299829 48 085532 omelette_4.pddl 58 843 11 50 0.675 0.0119693 246 085533 omelette_5.pddl 66 1004 11 48 0.598 0.0155517 243 085534 omelette_6.pddl 68 1004 13 64 0.579 0.0691776 1134 085535 omelette_7.pddl 68 1004 13 64 0.592 0.0721683 1134 2. More objects -> Search time increases linearly # test_objects.sh tests the effect of increasing the number of objects on search complexity, with the same kitchen_1.pddl and omelette_5.pddl , i.e. full omelette: * obj_1.pddl contains the bare minimum set of objects * obj_2.pddl contains some alternative objects * obj_3.pddl contains 12 eggs * obj_4.pddl contains multiples (two) of every object * obj_5.pddl contains multiples (ten) of every object * obj_eggs.pddl contains all objects for making 10 egg recipes t problem_name var op axiom plan parse search state ------ -------------- ----- ---- ------- ------ ------- --------- ------- 085837 obj_1.pddl 66 1004 11 48 0.61 0.0164124 243 085839 obj_2.pddl 72 1626 14 53 1.448 0.0181531 215 085843 obj_3.pddl 102 3086 44 53 3.889 0.0320748 215 085855 obj_4.pddl 116 9510 46 50 11.723 0.0407923 219 085909 obj_eggs.pddl 115 5416 102 50 13.549 0.031977 219 3. Different recipes -> Search time corresponds to # of axioms and depth of search, instead of # of operators or length of plan # test_egg_recipes.sh tests the search complexity of 10 different egg-related recipes, with the same kitchen_3.pddl and obj_eggs.pddl , i.e. with all definitions and objects for egg recipes: * scrambled_eggs.pddl specifies beaten, scrambled eggs * omelette.pddl specifies beaten, folded eggs with veggies * sunny_side_up.pddl specifies fried, steamed eggs on frypan * egg_in_hole.pddl specifies fried egg in the hole of a bread * poached_egg.pddl specifies boiled egg with vinegar t problem_name var op axiom plan parse search state ------ --------------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 085358 kitchen_egg_4-scrambled_eggs-obj_egg_4.pddl-scrambled_eggs.pddl 312 6677 161 43 9.846 0.120834 749 085408 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.03 0.119653 711 085419 kitchen_egg_4-sunny_side_up-obj_egg_4.pddl-sunny_side_up.pddl 142 4560 125 28 10.377 0.272117 2501 085432 kitchen_egg_4-egg_in_hole-obj_egg_4.pddl-crack 202 3234 172 50 10.129 2.14165 24498 085447 kitchen_3-poached_egg-obj_eggs.pddl-poached_egg.pddl 368 4944 137 25 14.394 0.0189829 144 4. More operators -> Search time increases linearly # test_operators tests the effect of increasing the number of operators (for multiple recipes) on search complexity, with the same omelette.pddl and obj_1.pddl , i.e. minimum plan length & objects: * kitchen_1.pddl contains all operators for omelette recipe * kitchen_2.pddl contains all operators for omelette + maintanance goals * kitchen_3.pddl contains all operators & definitions for 10 egg recipes * kitchen_4.pddl contains all operators & definitions for 10 egg recipes, with different action costs that reflect time costs * kitchen_5.pddl contains all operators & definitions for egg & baking recipes, with different action costs that reflect time costs t problem_name var op axiom plan parse search state ------ --------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 090721 kitchen_1-omelette_5-obj_1.pddl-omelette_5.pddl 66 1004 11 48 0.659 0.0181792 243 090722 kitchen_2-omelette-obj_1.pddl-omelette.pddl 70 1004 27 64 0.61 0.0349843 519 090733 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.058 0.115542 711 TODO: change the obj_1.pddl here to obj_4 .pddl and obj_eggs.pddl to make the problem combinatorially complicated","title":"Experiments & Results on Search Complexity"},{"location":"experiments/#experiments-results-on-search-complexity","text":"","title":"Experiments &amp; Results on Search Complexity"},{"location":"experiments/#1-more-goal-predicates-search-time-increases-more-than-linearly","text":"test_goals.sh tests the effect of increasing the number of goal predicates on search complexity, with the same kitchen_1 .pddl and obj_1 .pddl, i.e. minimum operators & objects: * omelette_1.pddl has only eggs * omelette_2.pddl adds veggies * omelette_3.pddl adds salt and pepper * omelette_4.pddl adds nutmilk and chives * omelette_5.pddl contains all positive goal predicates without any use of axioms * omelette_6.pddl contains one negative goal predicate * omelette_6.pddl contains two negative goal predicates t problem_name var op axiom plan parse search state ------ --------------- ----- ---- ------- ------ ------- ---------- ------- 085529 omelette_1.pddl 39 700 8 16 0.632 0.0016525 29 085530 omelette_2.pddl 43 702 11 20 0.618 0.00334604 40 085531 omelette_3.pddl 44 703 11 24 0.666 0.00299829 48 085532 omelette_4.pddl 58 843 11 50 0.675 0.0119693 246 085533 omelette_5.pddl 66 1004 11 48 0.598 0.0155517 243 085534 omelette_6.pddl 68 1004 13 64 0.579 0.0691776 1134 085535 omelette_7.pddl 68 1004 13 64 0.592 0.0721683 1134","title":"1. More goal predicates -&gt; Search time increases more than linearly"},{"location":"experiments/#2-more-objects-search-time-increases-linearly","text":"test_objects.sh tests the effect of increasing the number of objects on search complexity, with the same kitchen_1.pddl and omelette_5.pddl , i.e. full omelette: * obj_1.pddl contains the bare minimum set of objects * obj_2.pddl contains some alternative objects * obj_3.pddl contains 12 eggs * obj_4.pddl contains multiples (two) of every object * obj_5.pddl contains multiples (ten) of every object * obj_eggs.pddl contains all objects for making 10 egg recipes t problem_name var op axiom plan parse search state ------ -------------- ----- ---- ------- ------ ------- --------- ------- 085837 obj_1.pddl 66 1004 11 48 0.61 0.0164124 243 085839 obj_2.pddl 72 1626 14 53 1.448 0.0181531 215 085843 obj_3.pddl 102 3086 44 53 3.889 0.0320748 215 085855 obj_4.pddl 116 9510 46 50 11.723 0.0407923 219 085909 obj_eggs.pddl 115 5416 102 50 13.549 0.031977 219","title":"2. More objects -&gt; Search time increases linearly"},{"location":"experiments/#3-different-recipes-search-time-corresponds-to-of-axioms-and-depth-of-search-instead-of-of-operators-or-length-of-plan","text":"test_egg_recipes.sh tests the search complexity of 10 different egg-related recipes, with the same kitchen_3.pddl and obj_eggs.pddl , i.e. with all definitions and objects for egg recipes: * scrambled_eggs.pddl specifies beaten, scrambled eggs * omelette.pddl specifies beaten, folded eggs with veggies * sunny_side_up.pddl specifies fried, steamed eggs on frypan * egg_in_hole.pddl specifies fried egg in the hole of a bread * poached_egg.pddl specifies boiled egg with vinegar t problem_name var op axiom plan parse search state ------ --------------------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 085358 kitchen_egg_4-scrambled_eggs-obj_egg_4.pddl-scrambled_eggs.pddl 312 6677 161 43 9.846 0.120834 749 085408 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.03 0.119653 711 085419 kitchen_egg_4-sunny_side_up-obj_egg_4.pddl-sunny_side_up.pddl 142 4560 125 28 10.377 0.272117 2501 085432 kitchen_egg_4-egg_in_hole-obj_egg_4.pddl-crack 202 3234 172 50 10.129 2.14165 24498 085447 kitchen_3-poached_egg-obj_eggs.pddl-poached_egg.pddl 368 4944 137 25 14.394 0.0189829 144","title":"3. Different recipes -&gt; Search time corresponds to # of axioms and depth of search, instead of # of operators or length of plan"},{"location":"experiments/#4-more-operators-search-time-increases-linearly","text":"test_operators tests the effect of increasing the number of operators (for multiple recipes) on search complexity, with the same omelette.pddl and obj_1.pddl , i.e. minimum plan length & objects: * kitchen_1.pddl contains all operators for omelette recipe * kitchen_2.pddl contains all operators for omelette + maintanance goals * kitchen_3.pddl contains all operators & definitions for 10 egg recipes * kitchen_4.pddl contains all operators & definitions for 10 egg recipes, with different action costs that reflect time costs * kitchen_5.pddl contains all operators & definitions for egg & baking recipes, with different action costs that reflect time costs t problem_name var op axiom plan parse search state ------ --------------------------------------------------- ----- ---- ------- ------ ------- --------- ------- 090721 kitchen_1-omelette_5-obj_1.pddl-omelette_5.pddl 66 1004 11 48 0.659 0.0181792 243 090722 kitchen_2-omelette-obj_1.pddl-omelette.pddl 70 1004 27 64 0.61 0.0349843 519 090733 kitchen_egg_4-omelette-obj_egg_4.pddl-omelette.pddl 350 6680 161 52 10.058 0.115542 711 TODO: change the obj_1.pddl here to obj_4 .pddl and obj_eggs.pddl to make the problem combinatorially complicated","title":"4. More operators -&gt; Search time increases linearly"},{"location":"notes-fd/","text":"Studying output.sas # with minimum set of objects # effects of extraneous objects: * there exists 11 variables (var138 to var var148) on where oliveoil is * there exists 11 values on where tablespoon1 / bread1 is * there exists 13 values on where egg1 is begin_variable var174 -1 13 Atom holding(egg1, robot) Atom in(dcup1, egg1) Atom in(dcup2, egg1) Atom in(drawer1, egg1) Atom in(fridge1, egg1) Atom in(ucup1, egg1) Atom in(ucup2, egg1) Atom in-hole(egg1, bread1) Atom in-hole(egg1, butter) Atom on(burner, egg1) Atom on(kitchentop, egg1) Atom on(sink, egg1) <none of those> end_variable there exists 8 variables for all types of seasoning the egg may have (2 values for 4 types of seasoning mentioned in goal) var166 -1 2 Atom has-seasoning(egg1, salt, gram, one) NegatedAtom has-seasoning(egg1, salt, gram, one) end_variable begin_variable var167 -1 2 Atom has-seasoning(egg1, salt, gram, two) NegatedAtom has-seasoning(egg1, salt, gram, two) end_variable Example variable with two values # SAS variable begin_variable var2 -1 2 Atom closed(ucup2) Atom opened(ucup2) end_variable PDDL operator ( :action open :parameters ( ?param1 - furniture ) :precondition( and ( closed ?param1 ) ) :effect( and ( not ( closed ?param1 ) ) ( opened ?param1 ) ( increase ( total-cost ) 1 ) ) ) SAS operator begin_operator close ucup2 0 ## 0 preconditions, each has two numbers <v, d> 1 ## 1 effect, each has four numbers <cond, v, d, d'> 0 2 1 0 ## the first effect: no precondition, value of var2 changes from value1 (opened(ucup2)) to value0 (closed(ucup2)) 1 end_operator ### begin_operator open ucup2 0 1 0 2 0 1 ## 1 end_operator Example var with a lot of values (mutex) # where container1 is, which is mutually exclusive begin_variable var37 -1 10 Atom holding(container1, robot) Atom in(dcup1, container1) Atom in(dcup2, container1) Atom in(drawer1, container1) Atom in(fridge1, container1) Atom in(ucup1, container1) Atom in(ucup2, container1) Atom on(burner, container1) Atom on(kitchentop, container1) Atom on(sink, container1) end_variable begin_mutex_group 3 156 1 174 7 174 8 end_mutex_group Example mutex group # begin_mutex_group 11 156 0 174 0 174 1 174 2 174 3 174 4 174 5 174 6 174 9 174 10 174 11 end_mutex_group begin_variable var156 -1 2 Atom cracked(egg1) Atom raw(egg1) end_variable begin_variable var174 -1 13 Atom holding(egg1, robot) Atom in(dcup1, egg1) Atom in(dcup2, egg1) Atom in(drawer1, egg1) Atom in(fridge1, egg1) Atom in(ucup1, egg1) Atom in(ucup2, egg1) Atom in-hole(egg1, bread1) Atom in-hole(egg1, butter) Atom on(burner, egg1) Atom on(kitchentop, egg1) Atom on(sink, egg1) <none of those> end_variable Example rule # simple rule with one cond and one effect # begin_rule 1 ## 1 condition 14 0 ## cond 18 0 1 ## effect end_rule begin_variable ## cond var14 0 2 Atom new-axiom@0() ## one variable for each defined axiom NegatedAtom new-axiom@0() end_variable begin_variable ## effect var18 1 2 Atom is-egg(veggies1) NegatedAtom is-egg(veggies1) end_variable Example goal # begin_goal 2 181 0 183 0 end_goal 2 destination values, in which begin_variable var181 1 2 Atom organized(kitchen) NegatedAtom organized(kitchen) end_variable Example rule # the effect is making an axiom true, which makes the goal true begin_rule 6 ## 6 conditions 7 0 ## cond 6 0 5 0 4 0 3 0 2 0 8 0 1 ## effect end_rule begin_rule 4 8 1 176 1 1 1 180 0 181 1 0 end_rule begin_variable ## cond var7 -1 2 Atom closed(dcup1) Atom opened(dcup1) end_variable begin_variable ## effect var8 0 2 Atom new-axiom@1() NegatedAtom new-axiom@1() end_variable","title":"FastDownward"},{"location":"notes-fd/#studying-outputsas","text":"","title":"Studying output.sas"},{"location":"notes-fd/#with-minimum-set-of-objects","text":"effects of extraneous objects: * there exists 11 variables (var138 to var var148) on where oliveoil is * there exists 11 values on where tablespoon1 / bread1 is * there exists 13 values on where egg1 is begin_variable var174 -1 13 Atom holding(egg1, robot) Atom in(dcup1, egg1) Atom in(dcup2, egg1) Atom in(drawer1, egg1) Atom in(fridge1, egg1) Atom in(ucup1, egg1) Atom in(ucup2, egg1) Atom in-hole(egg1, bread1) Atom in-hole(egg1, butter) Atom on(burner, egg1) Atom on(kitchentop, egg1) Atom on(sink, egg1) <none of those> end_variable there exists 8 variables for all types of seasoning the egg may have (2 values for 4 types of seasoning mentioned in goal) var166 -1 2 Atom has-seasoning(egg1, salt, gram, one) NegatedAtom has-seasoning(egg1, salt, gram, one) end_variable begin_variable var167 -1 2 Atom has-seasoning(egg1, salt, gram, two) NegatedAtom has-seasoning(egg1, salt, gram, two) end_variable","title":"with minimum set of objects"},{"location":"notes-fd/#example-variable-with-two-values","text":"SAS variable begin_variable var2 -1 2 Atom closed(ucup2) Atom opened(ucup2) end_variable PDDL operator ( :action open :parameters ( ?param1 - furniture ) :precondition( and ( closed ?param1 ) ) :effect( and ( not ( closed ?param1 ) ) ( opened ?param1 ) ( increase ( total-cost ) 1 ) ) ) SAS operator begin_operator close ucup2 0 ## 0 preconditions, each has two numbers <v, d> 1 ## 1 effect, each has four numbers <cond, v, d, d'> 0 2 1 0 ## the first effect: no precondition, value of var2 changes from value1 (opened(ucup2)) to value0 (closed(ucup2)) 1 end_operator ### begin_operator open ucup2 0 1 0 2 0 1 ## 1 end_operator","title":"Example variable with two values"},{"location":"notes-fd/#example-var-with-a-lot-of-values-mutex","text":"where container1 is, which is mutually exclusive begin_variable var37 -1 10 Atom holding(container1, robot) Atom in(dcup1, container1) Atom in(dcup2, container1) Atom in(drawer1, container1) Atom in(fridge1, container1) Atom in(ucup1, container1) Atom in(ucup2, container1) Atom on(burner, container1) Atom on(kitchentop, container1) Atom on(sink, container1) end_variable begin_mutex_group 3 156 1 174 7 174 8 end_mutex_group","title":"Example var with a lot of values (mutex)"},{"location":"notes-fd/#example-mutex-group","text":"begin_mutex_group 11 156 0 174 0 174 1 174 2 174 3 174 4 174 5 174 6 174 9 174 10 174 11 end_mutex_group begin_variable var156 -1 2 Atom cracked(egg1) Atom raw(egg1) end_variable begin_variable var174 -1 13 Atom holding(egg1, robot) Atom in(dcup1, egg1) Atom in(dcup2, egg1) Atom in(drawer1, egg1) Atom in(fridge1, egg1) Atom in(ucup1, egg1) Atom in(ucup2, egg1) Atom in-hole(egg1, bread1) Atom in-hole(egg1, butter) Atom on(burner, egg1) Atom on(kitchentop, egg1) Atom on(sink, egg1) <none of those> end_variable","title":"Example mutex group"},{"location":"notes-fd/#example-rule","text":"","title":"Example rule"},{"location":"notes-fd/#simple-rule-with-one-cond-and-one-effect","text":"begin_rule 1 ## 1 condition 14 0 ## cond 18 0 1 ## effect end_rule begin_variable ## cond var14 0 2 Atom new-axiom@0() ## one variable for each defined axiom NegatedAtom new-axiom@0() end_variable begin_variable ## effect var18 1 2 Atom is-egg(veggies1) NegatedAtom is-egg(veggies1) end_variable","title":"simple rule with one cond and one effect"},{"location":"notes-fd/#example-goal","text":"begin_goal 2 181 0 183 0 end_goal 2 destination values, in which begin_variable var181 1 2 Atom organized(kitchen) NegatedAtom organized(kitchen) end_variable","title":"Example goal"},{"location":"notes-fd/#example-rule_1","text":"the effect is making an axiom true, which makes the goal true begin_rule 6 ## 6 conditions 7 0 ## cond 6 0 5 0 4 0 3 0 2 0 8 0 1 ## effect end_rule begin_rule 4 8 1 176 1 1 1 180 0 181 1 0 end_rule begin_variable ## cond var7 -1 2 Atom closed(dcup1) Atom opened(dcup1) end_variable begin_variable ## effect var8 0 2 Atom new-axiom@1() NegatedAtom new-axiom@1() end_variable","title":"Example rule"},{"location":"notes-lama-first/","text":"t run_name var op axiom plan cost parse search state ------ ---------- ----- ---- ------- ------ ------ ------- ---------- ------- 153103 omelette_1 34 742 10 20 20 1.291 0.00208362 68 153105 omelette_2 38 745 13 31 31 1.366 0.00439175 140 153107 omelette_3 39 749 13 42 42 1.323 0.00486575 165 153108 omelette_4 53 947 13 63 63 1.292 0.0132945 433 153110 omelette_5 61 1199 13 55 55 1.245 0.0138989 348 153111 omelette_6 63 1199 15 55 55 1.247 0.0132843 348 153113 omelette_7 63 1199 15 55 55 1.302 0.0142437 348 open dcup1 (1) getout pot1 dcup1 robot (1) close dcup1 (1) putdown pot1 burner robot (1) open fridge (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) crack-egg egg1 smallbowl1 robot (1) open dcup2 (1) getout oilbottle1 dcup2 robot (1) close dcup2 (1) add-ingredient butter smallbowl1 robot (1) putdown oilbottle1 burner robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 pot1 robot (1) transfer egg1 smallbowl1 pot1 robot (1) switchon burner pot1 (1) fry egg1 pot1 burner butter (1) switchoff burner pot1 (1) [t=0.0422464s, 8478420 KB] Plan length: 20 step(s). open dcup1 (1) getout pot1 dcup1 robot (1) close dcup1 (1) putdown pot1 burner robot (1) pickup smallbowl1 kitchentop robot (1) open fridge (1) getout butter fridge robot (1) getout egg1 fridge robot (1) close fridge (1) putdown smallbowl1 kitchentop robot (1) crack-egg egg1 smallbowl1 robot (1) add-ingredient butter smallbowl1 robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 pot1 robot (1) transfer egg1 smallbowl1 pot1 robot (1) switchon burner pot1 (1) fry egg1 pot1 burner butter (1) switchoff burner pot1 (1) [t=0.0729507s, 8496852 KB] Plan length: 18 step(s). open dcup1 (1) getout pot1 dcup1 robot (1) close dcup1 (1) open fridge (1) getout butter fridge robot (1) getout egg1 fridge robot (1) putdown pot1 burner robot (1) crack-egg egg1 smallbowl1 robot (1) add-ingredient butter smallbowl1 robot (1) pickup smallbowl1 kitchentop robot (1) transfer butter smallbowl1 pot1 robot (1) transfer egg1 smallbowl1 pot1 robot (1) switchon burner pot1 (1) fry egg1 pot1 burner butter (1) switchoff burner pot1 (1) close fridge (1) [t=0.141309s, 8496852 KB] Plan length: 16 step(s).","title":"Notes lama first"},{"location":"project-minutes/","text":"Minutes #","title":"Minutes & Notes"},{"location":"project-minutes/#minutes","text":"","title":"Minutes"},{"location":"project-plans/","text":"Plans #","title":"Plans"},{"location":"project-plans/#plans","text":"","title":"Plans"},{"location":"project-test/","text":"Test runs of LEAP architecture # Given a problem domain that combines grocery and kitchen","title":"Test runs of LEAP architecture"},{"location":"project-test/#test-runs-of-leap-architecture","text":"Given a problem domain that combines grocery and kitchen","title":"Test runs of LEAP architecture"},{"location":"setup-mkdocs/","text":"Set up the documentation # The documentation source files are in GenesisCore/documentation folder. Here is the layout of the documentation project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page Step 1: Install MkDocs # MkDocs is a Python package for generating static sites, especially good for the documentation style. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager. Install with pip # If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version version 1.2.2 from ... Install with a Package Manager # If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager. Step 2: Start MkDocs Server # MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... Now you can view the documentation site in http://127.0.0.1:8000/ , being updated in real time as you save your edits to the files. Step 3: Edit Pages # Before you make changes to the documentation, make sure to git pull the latest changes made by others to avoid conflict. Add a page # If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Major reorganization is possible upon discussion with Yang : Write in Markdown # Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers Step 4: Deploy After Editing # NOTE: At this moment, only Yang should deploy the changes to the website to avoid git merge problems. Please let her know of the changes you made. Routine deploy with one command # Currently, the wiki page is hosted publicly on GitHub. We may later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://ztyang-mit.github.io/tom-minecraft/ . Note that if you only made changes within the documentation folder, you don't have to git push . The deploy command does it for you. Summary # In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you make changes to the documentation, you need to use the following two commands at the project directory. $ git pull $ mkdocs serve # before editting, start the MkDocs server During editing, you add and organize pages at the configuration page, mkdocs.yml . After editing, you should let Yang know of the changes you made and git push","title":"Set up MkDocs"},{"location":"setup-mkdocs/#set-up-the-documentation","text":"The documentation source files are in GenesisCore/documentation folder. Here is the layout of the documentation project: mkdocs.yml # The configuration file, e.g., for organizing the pages docs/ index.md # The documentation homepage ... # Other markdown pages imgs/ ... # Images css/ extra.css # style file to customize based on site/theme.css and site/theme_extra.css site/ # You can ignore thing here, MkDocs generNates them when you deploy the page","title":"Set up the documentation"},{"location":"setup-mkdocs/#step-1-install-mkdocs","text":"MkDocs is a Python package for generating static sites, especially good for the documentation style. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can install MkDocs using pip or other package manager.","title":"Step 1: Install MkDocs"},{"location":"setup-mkdocs/#install-with-pip","text":"If you use the Python package manager, pip , then you can: $ pip install --upgrade pip $ pip install mkdocs To check that it is installed: $ mkdocs --version mkdocs, version version 1.2.2 from ...","title":"Install with pip"},{"location":"setup-mkdocs/#install-with-a-package-manager","text":"If you prefer useing another package manager (such as apt-get , dnf , homebrew , yum , chocolatey , etc.) to install packages on your system, then you may install MkDocs with your package manager.","title":"Install with a Package Manager"},{"location":"setup-mkdocs/#step-2-start-mkdocs-server","text":"MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 160402 15:50:43 server:271] Serving on http://127.0.0.1:8000 [I 160402 15:50:43 handlers:58] Start watching changes ... Now you can view the documentation site in http://127.0.0.1:8000/ , being updated in real time as you save your edits to the files.","title":"Step 2: Start MkDocs Server"},{"location":"setup-mkdocs/#step-3-edit-pages","text":"Before you make changes to the documentation, make sure to git pull the latest changes made by others to avoid conflict.","title":"Step 3: Edit Pages"},{"location":"setup-mkdocs/#add-a-page","text":"If you want to add a page to the wiki, reate a new markdown file in the docs/ directory. Then, add its name and markdown file name to mkdocs.yml , where you will see: nav: - Genesis: - Genesis System: index.md - Contribute to Documentation: mkdocs.md - Representation: - Inner Language - Innerese: innerese.md - ... - Fundamentals: - Inference by Rules: inference.md - ... - The current hierarchy and order is designed so that a new student can use the documentation as a tutorial. Major reorganization is possible upon discussion with Yang :","title":"Add a page"},{"location":"setup-mkdocs/#write-in-markdown","text":"Our wiki pages are written in Markdown , a lightweight markup language with plain text formatting syntax. The following cheatsheet designed by Theme Spectre showed the most frequently used syntax: To make it even easier to write in Markdown, you can add Markdown plugin to your editor. For example, I use markdown-editor in Atom to enjoy the following features: Toggle text styles using shortcut such as Ctrl+B Continue lists and table rows when press enter Correct ordered list numbers","title":"Write in Markdown"},{"location":"setup-mkdocs/#step-4-deploy-after-editing","text":"NOTE: At this moment, only Yang should deploy the changes to the website to avoid git merge problems. Please let her know of the changes you made.","title":"Step 4: Deploy After Editing"},{"location":"setup-mkdocs/#routine-deploy-with-one-command","text":"Currently, the wiki page is hosted publicly on GitHub. We may later shift over to private domains. After you have made the changes, simply do this in the same directory as the mkdocs.yml file: mkdocs gh-deploy --clean The page will be updated on https://ztyang-mit.github.io/tom-minecraft/ . Note that if you only made changes within the documentation folder, you don't have to git push . The deploy command does it for you.","title":"Routine deploy with one command"},{"location":"setup-mkdocs/#summary","text":"In this article, you have learned how to install the MkDocs package, write documentation pages, and deloy the site. Every time you make changes to the documentation, you need to use the following two commands at the project directory. $ git pull $ mkdocs serve # before editting, start the MkDocs server During editing, you add and organize pages at the configuration page, mkdocs.yml . After editing, you should let Yang know of the changes you made and git push","title":"Summary"},{"location":"setup-notes/","text":"Notes # Editors # To embed codes in this documentation, I use https://emgithub.com/ To embed Google Doc/Sheet/Slides in this documentation, go to that document, click menu bar File > Publich to the Web > Embed > Publish . Programmers # To run a test script, instead of ./test_some_script.sh use ./test_some_script.sh 2> /dev/null to suppress warning from killing ghost programs. For easier debugging and learning about unfamiliar packages (e.g. PDDLGym), I'm using PyCharm. But somehow the packages need to be imported from a different path, compared to when I'm testing my script from command line. The following code changes the import script automatically: import sys if sys.stdin and sys.stdin.isatty(): ## to use pddlgym from command line ## e.g., python run.py kitchen_extended.pddl scrambled_eggs.pddl -o obj_extended.pddl -v 0 -e 'experiments/planner_FD' from .pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from .pddlgym.pddlgym.core import PDDLEnv else: ## to use pddlgym from PyCharm ## e.g., when testing `experiments/env.py`, or `experiments/pddlgym/pddlgym/downward_translator/normalize.py` from pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from pddlgym.pddlgym.core import PDDLEnv","title":"Editor's Notes"},{"location":"setup-notes/#notes","text":"","title":"Notes"},{"location":"setup-notes/#editors","text":"To embed codes in this documentation, I use https://emgithub.com/ To embed Google Doc/Sheet/Slides in this documentation, go to that document, click menu bar File > Publich to the Web > Embed > Publish .","title":"Editors"},{"location":"setup-notes/#programmers","text":"To run a test script, instead of ./test_some_script.sh use ./test_some_script.sh 2> /dev/null to suppress warning from killing ghost programs. For easier debugging and learning about unfamiliar packages (e.g. PDDLGym), I'm using PyCharm. But somehow the packages need to be imported from a different path, compared to when I'm testing my script from command line. The following code changes the import script automatically: import sys if sys.stdin and sys.stdin.isatty(): ## to use pddlgym from command line ## e.g., python run.py kitchen_extended.pddl scrambled_eggs.pddl -o obj_extended.pddl -v 0 -e 'experiments/planner_FD' from .pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from .pddlgym.pddlgym.core import PDDLEnv else: ## to use pddlgym from PyCharm ## e.g., when testing `experiments/env.py`, or `experiments/pddlgym/pddlgym/downward_translator/normalize.py` from pddlgym.pddlgym.parser import PDDLDomainParser, PDDLProblemParser from pddlgym.pddlgym.core import PDDLEnv","title":"Programmers"},{"location":"setup-repository/","text":"Set up the Repository # To clone the LEAP repository, you need to send Yang your GitHub username to be invited as a collaborator. Open terminal and go to your favorite work directory (e.g., ~/Documents) to clone the project: git clone git@github.com:zt-yang/leap-architecture.git Planners setup # Add FastDownward or PyperPlan as git submodules: cd planners git submodule add https://github.com/aibasel/downward.git git submodule add https://github.com/aibasel/pyperplan.git git submodule init git submodule update ./downward/build.py release PDDLGym setup # To enable our LEAP agent to interact with the world through observing and replanning (as opposted to take in fully observed state and spill out a plan), we use PDDLGym for constructing a gym-like environment (with state, step, reset) from PDDL. cd environments git submodule add https://github.com/tomsilver/pddlgym git submodule init git submodule update brew install swi-prolog To install swi-prolog with Homebrew, I am runing terminal from Rosetta. PDDLGym support the following subset of PDDL1.2: STRIPS Typing (hierarchical is not working for Prolog inference mode) Quantifiers (forall, exists) Disjunctions (or) Equality Constants Derived predicates (somehow a body of forall doesn't work) It doesn't support the following extensions that our domain uses Conditional effects Action costs So to integrate, I modified PDDLGym so that it ignores warning when handling those extensions. Revised axiom due to ValueError: Cannot instantiate condition: not normalized by pddlgym/downward_translate/pddl/conditions.py ( :derived (is-egg ?i ) (forall (?i - egg) (raw ?i ) ) ) ## occured only once thus i replaced predicate in precondition with the axiom body (:derived (has-parked ?a - agent) (forall (?c - car) (when (agent-owns ?a ?c) (parked ?c) ) ) ) Study Downward Translator # to test LEAP with run.py , we need to comment out the last line setup() in environments/pddlgym/downward_translate/options.py","title":"Set up the Repository"},{"location":"setup-repository/#set-up-the-repository","text":"To clone the LEAP repository, you need to send Yang your GitHub username to be invited as a collaborator. Open terminal and go to your favorite work directory (e.g., ~/Documents) to clone the project: git clone git@github.com:zt-yang/leap-architecture.git","title":"Set up the Repository"},{"location":"setup-repository/#planners-setup","text":"Add FastDownward or PyperPlan as git submodules: cd planners git submodule add https://github.com/aibasel/downward.git git submodule add https://github.com/aibasel/pyperplan.git git submodule init git submodule update ./downward/build.py release","title":"Planners setup"},{"location":"setup-repository/#pddlgym-setup","text":"To enable our LEAP agent to interact with the world through observing and replanning (as opposted to take in fully observed state and spill out a plan), we use PDDLGym for constructing a gym-like environment (with state, step, reset) from PDDL. cd environments git submodule add https://github.com/tomsilver/pddlgym git submodule init git submodule update brew install swi-prolog To install swi-prolog with Homebrew, I am runing terminal from Rosetta. PDDLGym support the following subset of PDDL1.2: STRIPS Typing (hierarchical is not working for Prolog inference mode) Quantifiers (forall, exists) Disjunctions (or) Equality Constants Derived predicates (somehow a body of forall doesn't work) It doesn't support the following extensions that our domain uses Conditional effects Action costs So to integrate, I modified PDDLGym so that it ignores warning when handling those extensions. Revised axiom due to ValueError: Cannot instantiate condition: not normalized by pddlgym/downward_translate/pddl/conditions.py ( :derived (is-egg ?i ) (forall (?i - egg) (raw ?i ) ) ) ## occured only once thus i replaced predicate in precondition with the axiom body (:derived (has-parked ?a - agent) (forall (?c - car) (when (agent-owns ?a ?c) (parked ?c) ) ) )","title":"PDDLGym setup"},{"location":"setup-repository/#study-downward-translator","text":"to test LEAP with run.py , we need to comment out the last line setup() in environments/pddlgym/downward_translate/options.py","title":"Study Downward Translator"},{"location":"sim-alfred/","text":"AI2THOR's Alfred @ UW # ALFRED (Action Learning From Realistic Environments and Directives), is a new benchmark for learning a mapping from natural language instructions and egocentric vision to sequences of actions for household tasks. The ALFRED dataset contains 8k+ expert demostrations with 3 or more language annotations each. A trajectory consists of a sequence of expert actions, the corresponding image observations, and language annotations describing segments of the trajectory. path are planned in gridspace example task videos in Dropbox , where image arrays are of size 300 by 300 Example goal definition # pick_and_place_simple-Pillow-None-ArmChair-225 # from file full_2.1.0/train/pick_and_place_simple-Pillow-None-ArmChair-225/trial_T20190908_104554_100496/problem_0.pddl (:goal (and (exists (?r - receptacle) (exists (?o - object) (and (inReceptacle ?o ?r) (objectType ?o PillowType) (receptacleType ?r ArmChairType) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) ) pick_and_place_with_movable_recep-Fork-Mug-DiningTable-18 # from file full_2.1.0/train/pick_and_place_with_movable_recep-Fork-Mug-DiningTable-18/trial_T20190911_012507_770604/problem_0.pddl (:goal (and (exists (?r - receptacle) (and (receptacleType ?r DiningTableType) (exists (?o - object) (and (objectType ?o ForkType) (exists (?mo - object) (and (objectType ?mo MugType) (isReceptacleObject ?mo) (inReceptacleObject ?o ?mo) (inReceptacle ?mo ?r) ) ) ) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) ) pick_clean_then_place_in_recep-Cup-None-Microwave-1 # from file full_2.1.0/train/pick_clean_then_place_in_recep-Cup-None-Microwave-1/trial_T20190909_150843_298006/problem_0.pddl (:goal (and (forall (?re - receptacle) (not (opened ?re)) ) (exists (?r - receptacle) (exists (?o - object) (and (cleanable ?o) (objectType ?o CupType) (receptacleType ?r MicrowaveType) (isClean ?o) (inReceptacle ?o ?r) ) ) ) ) ) Example problem definition # the full problem definition from file full_2.1.0/train/pick_and_place_simple-Pillow-None-ArmChair-225/trial_T20190908_104554_100496/problem_0.pddl (define (problem plan_0_690) (:domain put_task) (:metric minimize (totalCost)) (:objects agent1 - agent Statue - object TissueBox - object CellPhone - object TeddyBear - object Pot - object SoapBottle - object Book - object SoapBar - object Glassbottle - object CD - object Bowl - object Apple - object Newspaper - object HousePlant - object Pencil - object Window - object FloorLamp - object WineBottle - object Plunger - object PepperShaker - object Poster - object Candle - object PaperTowel - object Knife - object RemoteControl - object Toaster - object Spatula - object LightSwitch - object Vase - object AlarmClock - object SprayBottle - object Television - object Fork - object BaseballBat - object Potato - object Kettle - object Ladle - object ShowerGlass - object PaperTowelRoll - object Spoon - object DeskLamp - object Towel - object Pillow - object Mirror - object Lettuce - object Mug - object Egg - object Bathtub - object WateringCan - object Plate - object ScrubBrush - object LaundryHamperLid - object Watch - object Painting - object TennisRacket - object Tomato - object DishSponge - object Curtains - object ToiletPaper - object Cup - object Chair - object ToiletPaperRoll - object Blinds - object Cloth - object BasketBall - object Sink - object Pen - object Pan - object KeyChain - object ShowerDoor - object Footstool - object HandTowel - object Laptop - object Boots - object ButterKnife - object StoveKnob - object CreditCard - object SaltShaker - object Bread - object Box - object StatueType - otype TissueBoxType - otype CellPhoneType - otype TeddyBearType - otype PotType - otype SoapBottleType - otype BookType - otype SoapBarType - otype GlassbottleType - otype CDType - otype BowlType - otype AppleType - otype NewspaperType - otype HousePlantType - otype PencilType - otype WindowType - otype FloorLampType - otype WineBottleType - otype PlungerType - otype PepperShakerType - otype PosterType - otype CandleType - otype PaperTowelType - otype KnifeType - otype RemoteControlType - otype ToasterType - otype SpatulaType - otype LightSwitchType - otype VaseType - otype AlarmClockType - otype SprayBottleType - otype TelevisionType - otype ForkType - otype BaseballBatType - otype PotatoType - otype KettleType - otype LadleType - otype ShowerGlassType - otype PaperTowelRollType - otype SpoonType - otype DeskLampType - otype TowelType - otype PillowType - otype MirrorType - otype LettuceType - otype MugType - otype EggType - otype BathtubType - otype WateringCanType - otype PlateType - otype ScrubBrushType - otype LaundryHamperLidType - otype WatchType - otype PaintingType - otype TennisRacketType - otype TomatoType - otype DishSpongeType - otype CurtainsType - otype ToiletPaperType - otype CupType - otype ChairType - otype ToiletPaperRollType - otype BlindsType - otype ClothType - otype BasketBallType - otype SinkType - otype PenType - otype PanType - otype KeyChainType - otype ShowerDoorType - otype FootstoolType - otype HandTowelType - otype LaptopType - otype BootsType - otype ButterKnifeType - otype StoveKnobType - otype CreditCardType - otype SaltShakerType - otype BreadType - otype BoxType - otype CartType - rtype SideTableType - rtype LaundryHamperType - rtype ShelfType - rtype DresserType - rtype MicrowaveType - rtype SinkBasinType - rtype HandTowelHolderType - rtype StoveBurnerType - rtype ArmChairType - rtype ToiletType - rtype CounterTopType - rtype BathtubBasinType - rtype CoffeeTableType - rtype DrawerType - rtype BedType - rtype DiningTableType - rtype SofaType - rtype OttomanType - rtype CabinetType - rtype CoffeeMachineType - rtype DeskType - rtype GarbageCanType - rtype SafeType - rtype ToiletPaperHangerType - rtype FridgeType - rtype TowelHolderType - rtype Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 - object Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 - object Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 - receptacle Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 - receptacle SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 - receptacle CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 - receptacle Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 - receptacle Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 - receptacle Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 - receptacle Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 - receptacle GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 - receptacle ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 - receptacle loc_bar__minus_10_bar_13_bar_0_bar_45 - location loc_bar__minus_5_bar_10_bar_1_bar_60 - location loc_bar__minus_5_bar_13_bar_1_bar_60 - location loc_bar__minus_9_bar_15_bar_0_bar_60 - location loc_bar__minus_17_bar_17_bar_2_bar_60 - location loc_bar__minus_6_bar_8_bar_1_bar_45 - location loc_bar__minus_4_bar_7_bar_2_bar_60 - location loc_bar__minus_14_bar_11_bar_3_bar_45 - location loc_bar__minus_4_bar_11_bar_3_bar_60 - location loc_bar__minus_13_bar_8_bar_3_bar_45 - location loc_bar__minus_6_bar_14_bar_1_bar_45 - location loc_bar__minus_15_bar_10_bar_3_bar_60 - location loc_bar__minus_1_bar_17_bar_0_bar_60 - location loc_bar__minus_6_bar_14_bar_1_bar_60 - location loc_bar__minus_7_bar_15_bar_0_bar_60 - location loc_bar__minus_6_bar_7_bar_1_bar_60 - location loc_bar__minus_10_bar_9_bar_2_bar_30 - location ) (:init (= (totalCost) 0) (canContain ToiletType DishSpongeType) (canContain ToiletType TissueBoxType) (canContain ToiletType ClothType) (canContain ToiletType SoapBottleType) (canContain ToiletType SoapBarType) (canContain ToiletType SprayBottleType) (canContain ToiletType HandTowelType) (canContain ToiletType NewspaperType) (canContain ToiletType PaperTowelType) (canContain ToiletType ToiletPaperType) (canContain ToiletType CandleType) (canContain ToiletType ToiletPaperRollType) (canContain CounterTopType TissueBoxType) (canContain CounterTopType CellPhoneType) (canContain CounterTopType PotType) (canContain CounterTopType SoapBottleType) (canContain CounterTopType SoapBarType) (canContain CounterTopType GlassbottleType) (canContain CounterTopType BookType) (canContain CounterTopType CDType) (canContain CounterTopType BowlType) (canContain CounterTopType AppleType) (canContain CounterTopType NewspaperType) (canContain CounterTopType PencilType) (canContain CounterTopType WineBottleType) (canContain CounterTopType PepperShakerType) (canContain CounterTopType CandleType) (canContain CounterTopType PaperTowelType) (canContain CounterTopType KnifeType) (canContain CounterTopType RemoteControlType) (canContain CounterTopType SpatulaType) (canContain CounterTopType AlarmClockType) (canContain CounterTopType VaseType) (canContain CounterTopType SprayBottleType) (canContain CounterTopType BreadType) (canContain CounterTopType ForkType) (canContain CounterTopType BaseballBatType) (canContain CounterTopType PotatoType) (canContain CounterTopType KettleType) (canContain CounterTopType LadleType) (canContain CounterTopType SpoonType) (canContain CounterTopType LettuceType) (canContain CounterTopType MugType) (canContain CounterTopType WateringCanType) (canContain CounterTopType EggType) (canContain CounterTopType PlateType) (canContain CounterTopType WatchType) (canContain CounterTopType TennisRacketType) (canContain CounterTopType TomatoType) (canContain CounterTopType DishSpongeType) (canContain CounterTopType ToiletPaperType) (canContain CounterTopType BoxType) (canContain CounterTopType ToiletPaperRollType) (canContain CounterTopType CupType) (canContain CounterTopType PenType) (canContain CounterTopType ClothType) (canContain CounterTopType BasketBallType) (canContain CounterTopType PanType) (canContain CounterTopType KeyChainType) (canContain CounterTopType HandTowelType) (canContain CounterTopType ButterKnifeType) (canContain CounterTopType LaptopType) (canContain CounterTopType CreditCardType) (canContain CounterTopType SaltShakerType) (canContain CounterTopType StatueType) (canContain SideTableType TissueBoxType) (canContain SideTableType CellPhoneType) (canContain SideTableType PotType) (canContain SideTableType SoapBottleType) (canContain SideTableType SoapBarType) (canContain SideTableType GlassbottleType) (canContain SideTableType BookType) (canContain SideTableType CDType) (canContain SideTableType BowlType) (canContain SideTableType AppleType) (canContain SideTableType NewspaperType) (canContain SideTableType PencilType) (canContain SideTableType WineBottleType) (canContain SideTableType PepperShakerType) (canContain SideTableType CandleType) (canContain SideTableType PaperTowelType) (canContain SideTableType KnifeType) (canContain SideTableType RemoteControlType) (canContain SideTableType SpatulaType) (canContain SideTableType AlarmClockType) (canContain SideTableType VaseType) (canContain SideTableType SprayBottleType) (canContain SideTableType BreadType) (canContain SideTableType ForkType) (canContain SideTableType BaseballBatType) (canContain SideTableType PotatoType) (canContain SideTableType KettleType) (canContain SideTableType LadleType) (canContain SideTableType SpoonType) (canContain SideTableType LettuceType) (canContain SideTableType MugType) (canContain SideTableType WateringCanType) (canContain SideTableType EggType) (canContain SideTableType PlateType) (canContain SideTableType WatchType) (canContain SideTableType TennisRacketType) (canContain SideTableType TomatoType) (canContain SideTableType DishSpongeType) (canContain SideTableType ToiletPaperType) (canContain SideTableType BoxType) (canContain SideTableType ToiletPaperRollType) (canContain SideTableType CupType) (canContain SideTableType PenType) (canContain SideTableType ClothType) (canContain SideTableType BasketBallType) (canContain SideTableType PanType) (canContain SideTableType KeyChainType) (canContain SideTableType HandTowelType) (canContain SideTableType ButterKnifeType) (canContain SideTableType LaptopType) (canContain SideTableType CreditCardType) (canContain SideTableType SaltShakerType) (canContain SideTableType StatueType) (canContain BathtubBasinType DishSpongeType) (canContain BathtubBasinType SoapBarType) (canContain BathtubBasinType ClothType) (canContain BathtubBasinType HandTowelType) (canContain DrawerType TissueBoxType) (canContain DrawerType CellPhoneType) (canContain DrawerType SoapBottleType) (canContain DrawerType BookType) (canContain DrawerType SoapBarType) (canContain DrawerType CDType) (canContain DrawerType NewspaperType) (canContain DrawerType PencilType) (canContain DrawerType PepperShakerType) (canContain DrawerType CandleType) (canContain DrawerType KnifeType) (canContain DrawerType RemoteControlType) (canContain DrawerType SpatulaType) (canContain DrawerType SprayBottleType) (canContain DrawerType ForkType) (canContain DrawerType LadleType) (canContain DrawerType SpoonType) (canContain DrawerType WateringCanType) (canContain DrawerType WatchType) (canContain DrawerType DishSpongeType) (canContain DrawerType ToiletPaperType) (canContain DrawerType ToiletPaperRollType) (canContain DrawerType PenType) (canContain DrawerType ClothType) (canContain DrawerType KeyChainType) (canContain DrawerType HandTowelType) (canContain DrawerType ButterKnifeType) (canContain DrawerType CreditCardType) (canContain DrawerType SaltShakerType) (canContain LaundryHamperType ClothType) (canContain BedType CellPhoneType) (canContain BedType BasketBallType) (canContain BedType BookType) (canContain BedType BaseballBatType) (canContain BedType LaptopType) (canContain BedType TennisRacketType) (canContain BedType NewspaperType) (canContain BedType PillowType) (canContain DiningTableType TissueBoxType) (canContain DiningTableType CellPhoneType) (canContain DiningTableType PotType) (canContain DiningTableType SoapBottleType) (canContain DiningTableType SoapBarType) (canContain DiningTableType GlassbottleType) (canContain DiningTableType BookType) (canContain DiningTableType CDType) (canContain DiningTableType BowlType) (canContain DiningTableType AppleType) (canContain DiningTableType NewspaperType) (canContain DiningTableType PencilType) (canContain DiningTableType WineBottleType) (canContain DiningTableType PepperShakerType) (canContain DiningTableType CandleType) (canContain DiningTableType PaperTowelType) (canContain DiningTableType KnifeType) (canContain DiningTableType RemoteControlType) (canContain DiningTableType SpatulaType) (canContain DiningTableType AlarmClockType) (canContain DiningTableType VaseType) (canContain DiningTableType SprayBottleType) (canContain DiningTableType BreadType) (canContain DiningTableType ForkType) (canContain DiningTableType BaseballBatType) (canContain DiningTableType PotatoType) (canContain DiningTableType KettleType) (canContain DiningTableType LadleType) (canContain DiningTableType SpoonType) (canContain DiningTableType LettuceType) (canContain DiningTableType MugType) (canContain DiningTableType WateringCanType) (canContain DiningTableType EggType) (canContain DiningTableType PlateType) (canContain DiningTableType WatchType) (canContain DiningTableType TennisRacketType) (canContain DiningTableType TomatoType) (canContain DiningTableType DishSpongeType) (canContain DiningTableType ToiletPaperType) (canContain DiningTableType BoxType) (canContain DiningTableType ToiletPaperRollType) (canContain DiningTableType CupType) (canContain DiningTableType PenType) (canContain DiningTableType ClothType) (canContain DiningTableType BasketBallType) (canContain DiningTableType PanType) (canContain DiningTableType KeyChainType) (canContain DiningTableType HandTowelType) (canContain DiningTableType ButterKnifeType) (canContain DiningTableType LaptopType) (canContain DiningTableType CreditCardType) (canContain DiningTableType SaltShakerType) (canContain DiningTableType StatueType) (canContain SofaType ClothType) (canContain SofaType RemoteControlType) (canContain SofaType CellPhoneType) (canContain SofaType BasketBallType) (canContain SofaType BookType) (canContain SofaType KeyChainType) (canContain SofaType LaptopType) (canContain SofaType NewspaperType) (canContain SofaType CreditCardType) (canContain SofaType PillowType) (canContain SofaType BoxType) (canContain ShelfType TissueBoxType) (canContain ShelfType CellPhoneType) (canContain ShelfType PotType) (canContain ShelfType SoapBottleType) (canContain ShelfType GlassbottleType) (canContain ShelfType SoapBarType) (canContain ShelfType BookType) (canContain ShelfType CDType) (canContain ShelfType BowlType) (canContain ShelfType NewspaperType) (canContain ShelfType PencilType) (canContain ShelfType WineBottleType) (canContain ShelfType PepperShakerType) (canContain ShelfType CandleType) (canContain ShelfType PaperTowelType) (canContain ShelfType RemoteControlType) (canContain ShelfType AlarmClockType) (canContain ShelfType VaseType) (canContain ShelfType SprayBottleType) (canContain ShelfType KettleType) (canContain ShelfType MugType) (canContain ShelfType WateringCanType) (canContain ShelfType PlateType) (canContain ShelfType WatchType) (canContain ShelfType DishSpongeType) (canContain ShelfType ToiletPaperType) (canContain ShelfType ToiletPaperRollType) (canContain ShelfType CupType) (canContain ShelfType PenType) (canContain ShelfType ClothType) (canContain ShelfType KeyChainType) (canContain ShelfType HandTowelType) (canContain ShelfType CreditCardType) (canContain ShelfType SaltShakerType) (canContain ShelfType StatueType) (canContain ShelfType BoxType) (canContain OttomanType ClothType) (canContain OttomanType RemoteControlType) (canContain OttomanType CellPhoneType) (canContain OttomanType BasketBallType) (canContain OttomanType BookType) (canContain OttomanType KeyChainType) (canContain OttomanType LaptopType) (canContain OttomanType NewspaperType) (canContain OttomanType CreditCardType) (canContain OttomanType PillowType) (canContain OttomanType BoxType) (canContain DresserType TissueBoxType) (canContain DresserType CellPhoneType) (canContain DresserType GlassbottleType) (canContain DresserType BookType) (canContain DresserType CDType) (canContain DresserType BowlType) (canContain DresserType NewspaperType) (canContain DresserType PencilType) (canContain DresserType WineBottleType) (canContain DresserType CandleType) (canContain DresserType RemoteControlType) (canContain DresserType AlarmClockType) (canContain DresserType VaseType) (canContain DresserType SprayBottleType) (canContain DresserType MugType) (canContain DresserType WateringCanType) (canContain DresserType PlateType) (canContain DresserType WatchType) (canContain DresserType TennisRacketType) (canContain DresserType ToiletPaperType) (canContain DresserType CupType) (canContain DresserType ToiletPaperRollType) (canContain DresserType PenType) (canContain DresserType ClothType) (canContain DresserType BasketBallType) (canContain DresserType KeyChainType) (canContain DresserType LaptopType) (canContain DresserType CreditCardType) (canContain DresserType StatueType) (canContain DresserType BoxType) (canContain MicrowaveType MugType) (canContain MicrowaveType EggType) (canContain MicrowaveType PlateType) (canContain MicrowaveType GlassbottleType) (canContain MicrowaveType BreadType) (canContain MicrowaveType PotatoType) (canContain MicrowaveType BowlType) (canContain MicrowaveType TomatoType) (canContain MicrowaveType AppleType) (canContain MicrowaveType CupType) (canContain CartType MugType) (canContain CartType DishSpongeType) (canContain CartType TissueBoxType) (canContain CartType ClothType) (canContain CartType SoapBottleType) (canContain CartType VaseType) (canContain CartType SoapBarType) (canContain CartType SprayBottleType) (canContain CartType HandTowelType) (canContain CartType PaperTowelType) (canContain CartType PlungerType) (canContain CartType ToiletPaperType) (canContain CartType StatueType) (canContain CartType CandleType) (canContain CartType ToiletPaperRollType) (canContain SafeType CellPhoneType) (canContain SafeType VaseType) (canContain SafeType KeyChainType) (canContain SafeType WatchType) (canContain SafeType CDType) (canContain SafeType CreditCardType) (canContain SafeType StatueType) (canContain CabinetType TissueBoxType) (canContain CabinetType PotType) (canContain CabinetType SoapBottleType) (canContain CabinetType GlassbottleType) (canContain CabinetType SoapBarType) (canContain CabinetType BookType) (canContain CabinetType CDType) (canContain CabinetType BowlType) (canContain CabinetType NewspaperType) (canContain CabinetType WineBottleType) (canContain CabinetType PlungerType) (canContain CabinetType PepperShakerType) (canContain CabinetType CandleType) (canContain CabinetType VaseType) (canContain CabinetType SprayBottleType) (canContain CabinetType KettleType) (canContain CabinetType LadleType) (canContain CabinetType MugType) (canContain CabinetType WateringCanType) (canContain CabinetType PlateType) (canContain CabinetType DishSpongeType) (canContain CabinetType ToiletPaperType) (canContain CabinetType ToiletPaperRollType) (canContain CabinetType CupType) (canContain CabinetType ClothType) (canContain CabinetType PanType) (canContain CabinetType HandTowelType) (canContain CabinetType SaltShakerType) (canContain CabinetType BoxType) (canContain CoffeeMachineType MugType) (canContain DeskType TissueBoxType) (canContain DeskType CellPhoneType) (canContain DeskType SoapBottleType) (canContain DeskType GlassbottleType) (canContain DeskType BookType) (canContain DeskType CDType) (canContain DeskType BowlType) (canContain DeskType NewspaperType) (canContain DeskType PencilType) (canContain DeskType WineBottleType) (canContain DeskType CandleType) (canContain DeskType RemoteControlType) (canContain DeskType AlarmClockType) (canContain DeskType VaseType) (canContain DeskType SprayBottleType) (canContain DeskType MugType) (canContain DeskType WateringCanType) (canContain DeskType PlateType) (canContain DeskType WatchType) (canContain DeskType TennisRacketType) (canContain DeskType ToiletPaperType) (canContain DeskType CupType) (canContain DeskType ToiletPaperRollType) (canContain DeskType PenType) (canContain DeskType ClothType) (canContain DeskType BasketBallType) (canContain DeskType KeyChainType) (canContain DeskType LaptopType) (canContain DeskType CreditCardType) (canContain DeskType StatueType) (canContain DeskType BoxType) (canContain GarbageCanType TissueBoxType) (canContain GarbageCanType SoapBottleType) (canContain GarbageCanType SoapBarType) (canContain GarbageCanType CDType) (canContain GarbageCanType AppleType) (canContain GarbageCanType NewspaperType) (canContain GarbageCanType PencilType) (canContain GarbageCanType WineBottleType) (canContain GarbageCanType PaperTowelType) (canContain GarbageCanType SprayBottleType) (canContain GarbageCanType PotatoType) (canContain GarbageCanType LettuceType) (canContain GarbageCanType EggType) (canContain GarbageCanType TomatoType) (canContain GarbageCanType DishSpongeType) (canContain GarbageCanType ToiletPaperType) (canContain GarbageCanType ToiletPaperRollType) (canContain GarbageCanType PenType) (canContain GarbageCanType ClothType) (canContain GarbageCanType HandTowelType) (canContain GarbageCanType BreadType) (canContain HandTowelHolderType HandTowelType) (canContain SinkBasinType PotType) (canContain SinkBasinType SoapBarType) (canContain SinkBasinType GlassbottleType) (canContain SinkBasinType BowlType) (canContain SinkBasinType AppleType) (canContain SinkBasinType KnifeType) (canContain SinkBasinType SpatulaType) (canContain SinkBasinType ForkType) (canContain SinkBasinType PotatoType) (canContain SinkBasinType KettleType) (canContain SinkBasinType LadleType) (canContain SinkBasinType SpoonType) (canContain SinkBasinType LettuceType) (canContain SinkBasinType MugType) (canContain SinkBasinType EggType) (canContain SinkBasinType PlateType) (canContain SinkBasinType TomatoType) (canContain SinkBasinType DishSpongeType) (canContain SinkBasinType CupType) (canContain SinkBasinType ClothType) (canContain SinkBasinType PanType) (canContain SinkBasinType HandTowelType) (canContain SinkBasinType ButterKnifeType) (canContain StoveBurnerType PanType) (canContain StoveBurnerType KettleType) (canContain StoveBurnerType PotType) (canContain CoffeeTableType TissueBoxType) (canContain CoffeeTableType CellPhoneType) (canContain CoffeeTableType PotType) (canContain CoffeeTableType SoapBottleType) (canContain CoffeeTableType SoapBarType) (canContain CoffeeTableType GlassbottleType) (canContain CoffeeTableType BookType) (canContain CoffeeTableType CDType) (canContain CoffeeTableType BowlType) (canContain CoffeeTableType AppleType) (canContain CoffeeTableType NewspaperType) (canContain CoffeeTableType PencilType) (canContain CoffeeTableType WineBottleType) (canContain CoffeeTableType PepperShakerType) (canContain CoffeeTableType CandleType) (canContain CoffeeTableType PaperTowelType) (canContain CoffeeTableType KnifeType) (canContain CoffeeTableType RemoteControlType) (canContain CoffeeTableType SpatulaType) (canContain CoffeeTableType AlarmClockType) (canContain CoffeeTableType VaseType) (canContain CoffeeTableType SprayBottleType) (canContain CoffeeTableType BreadType) (canContain CoffeeTableType ForkType) (canContain CoffeeTableType BaseballBatType) (canContain CoffeeTableType PotatoType) (canContain CoffeeTableType KettleType) (canContain CoffeeTableType LadleType) (canContain CoffeeTableType SpoonType) (canContain CoffeeTableType LettuceType) (canContain CoffeeTableType MugType) (canContain CoffeeTableType WateringCanType) (canContain CoffeeTableType EggType) (canContain CoffeeTableType PlateType) (canContain CoffeeTableType WatchType) (canContain CoffeeTableType TennisRacketType) (canContain CoffeeTableType TomatoType) (canContain CoffeeTableType DishSpongeType) (canContain CoffeeTableType ToiletPaperType) (canContain CoffeeTableType BoxType) (canContain CoffeeTableType ToiletPaperRollType) (canContain CoffeeTableType CupType) (canContain CoffeeTableType PenType) (canContain CoffeeTableType ClothType) (canContain CoffeeTableType BasketBallType) (canContain CoffeeTableType PanType) (canContain CoffeeTableType KeyChainType) (canContain CoffeeTableType HandTowelType) (canContain CoffeeTableType ButterKnifeType) (canContain CoffeeTableType LaptopType) (canContain CoffeeTableType CreditCardType) (canContain CoffeeTableType SaltShakerType) (canContain CoffeeTableType StatueType) (canContain ToiletPaperHangerType ToiletPaperType) (canContain ToiletPaperHangerType ToiletPaperRollType) (canContain FridgeType MugType) (canContain FridgeType EggType) (canContain FridgeType PotType) (canContain FridgeType PlateType) (canContain FridgeType PanType) (canContain FridgeType GlassbottleType) (canContain FridgeType BreadType) (canContain FridgeType PotatoType) (canContain FridgeType BowlType) (canContain FridgeType TomatoType) (canContain FridgeType AppleType) (canContain FridgeType WineBottleType) (canContain FridgeType LettuceType) (canContain FridgeType CupType) (canContain TowelHolderType TowelType) (receptacleType Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 SofaType) (receptacleType Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 SofaType) (receptacleType SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 SideTableType) (receptacleType CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 CoffeeTableType) (receptacleType Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 DrawerType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 ShelfType) (receptacleType Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 ShelfType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 ShelfType) (receptacleType Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 ShelfType) (receptacleType Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 ShelfType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 ShelfType) (receptacleType GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 GarbageCanType) (receptacleType ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 ArmChairType) (objectType Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 PillowType) (objectType Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 PillowType) (openable Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998) (atLocation agent1 loc_bar__minus_10_bar_9_bar_2_bar_30) (inReceptacle Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016) (inReceptacle Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016) (wasInReceptacle Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016) (wasInReceptacle Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 10) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 10) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 13) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 12) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 12) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 17) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 17) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 16) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 9) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 8) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 7) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 7) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 15) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 7) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 10) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 17) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 6) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 10) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 7) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 25) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 25) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 5) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 5) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 9) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 24) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 24) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 19) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 19) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 11) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_14_bar_11_bar_3_bar_45) 11) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 14) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 15) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 14) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 6) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 6) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 15) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 13) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 6) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_4_bar_11_bar_3_bar_60) 12) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 5) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 5) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 6) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 11) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 11) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 23) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 15) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 8) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 9) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 26) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 26) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 15) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 15) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 18) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 18) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 9) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_13_bar_8_bar_3_bar_45) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 14) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 14) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 17) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 17) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 18) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 18) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 8) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 8) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 17) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 16) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 22) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_1_bar_17_bar_0_bar_60) 22) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 15) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 12) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 15) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 19) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 19) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 25) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 25) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 19) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 19) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 14) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_4_bar_7_bar_2_bar_60) 15) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 8) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 11) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 28) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 28) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 14) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 18) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 18) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 13) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 13) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 6) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 14) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_7_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 11) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 8) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 5) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 5) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 7) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 17) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 17) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 6) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 6) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 13) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_5_bar_10_bar_1_bar_60) 12) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_5_bar_13_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_9_bar_15_bar_0_bar_60) 12) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_17_bar_17_bar_2_bar_60) 22) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 22) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 14) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_15_bar_10_bar_3_bar_60) 12) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_14_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_7_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 10) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 23) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 11) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 9) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 9) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 10) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 20) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 20) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 16) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 16) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 7) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 12) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 13) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 8) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 17) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 13) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 16) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 23) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 17) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 2) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 2) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 11) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 11) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 16) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (receptacleAtLocation Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 loc_bar__minus_10_bar_13_bar_0_bar_45) (receptacleAtLocation Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 loc_bar__minus_13_bar_8_bar_3_bar_45) (receptacleAtLocation SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 loc_bar__minus_17_bar_17_bar_2_bar_60) (receptacleAtLocation CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 loc_bar__minus_4_bar_11_bar_3_bar_60) (receptacleAtLocation Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 loc_bar__minus_14_bar_11_bar_3_bar_45) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 loc_bar__minus_6_bar_14_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 loc_bar__minus_6_bar_8_bar_1_bar_45) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 loc_bar__minus_6_bar_14_bar_1_bar_45) (receptacleAtLocation Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 loc_bar__minus_5_bar_10_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 loc_bar__minus_6_bar_7_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 loc_bar__minus_5_bar_13_bar_1_bar_60) (receptacleAtLocation GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 loc_bar__minus_1_bar_17_bar_0_bar_60) (receptacleAtLocation ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 loc_bar__minus_4_bar_7_bar_2_bar_60) (objectAtLocation Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 loc_bar__minus_15_bar_10_bar_3_bar_60) (objectAtLocation Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 loc_bar__minus_9_bar_15_bar_0_bar_60) ) (:goal (and (exists (?r - receptacle) (exists (?o - object) (and (inReceptacle ?o ?r) (objectType ?o PillowType) (receptacleType ?r ArmChairType) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) ) )","title":"AI2THOR's Alfred"},{"location":"sim-alfred/#ai2thors-alfred-uw","text":"ALFRED (Action Learning From Realistic Environments and Directives), is a new benchmark for learning a mapping from natural language instructions and egocentric vision to sequences of actions for household tasks. The ALFRED dataset contains 8k+ expert demostrations with 3 or more language annotations each. A trajectory consists of a sequence of expert actions, the corresponding image observations, and language annotations describing segments of the trajectory. path are planned in gridspace example task videos in Dropbox , where image arrays are of size 300 by 300","title":"AI2THOR's Alfred @ UW"},{"location":"sim-alfred/#example-goal-definition","text":"","title":"Example goal definition"},{"location":"sim-alfred/#pick_and_place_simple-pillow-none-armchair-225","text":"from file full_2.1.0/train/pick_and_place_simple-Pillow-None-ArmChair-225/trial_T20190908_104554_100496/problem_0.pddl (:goal (and (exists (?r - receptacle) (exists (?o - object) (and (inReceptacle ?o ?r) (objectType ?o PillowType) (receptacleType ?r ArmChairType) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) )","title":"pick_and_place_simple-Pillow-None-ArmChair-225"},{"location":"sim-alfred/#pick_and_place_with_movable_recep-fork-mug-diningtable-18","text":"from file full_2.1.0/train/pick_and_place_with_movable_recep-Fork-Mug-DiningTable-18/trial_T20190911_012507_770604/problem_0.pddl (:goal (and (exists (?r - receptacle) (and (receptacleType ?r DiningTableType) (exists (?o - object) (and (objectType ?o ForkType) (exists (?mo - object) (and (objectType ?mo MugType) (isReceptacleObject ?mo) (inReceptacleObject ?o ?mo) (inReceptacle ?mo ?r) ) ) ) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) )","title":"pick_and_place_with_movable_recep-Fork-Mug-DiningTable-18"},{"location":"sim-alfred/#pick_clean_then_place_in_recep-cup-none-microwave-1","text":"from file full_2.1.0/train/pick_clean_then_place_in_recep-Cup-None-Microwave-1/trial_T20190909_150843_298006/problem_0.pddl (:goal (and (forall (?re - receptacle) (not (opened ?re)) ) (exists (?r - receptacle) (exists (?o - object) (and (cleanable ?o) (objectType ?o CupType) (receptacleType ?r MicrowaveType) (isClean ?o) (inReceptacle ?o ?r) ) ) ) ) )","title":"pick_clean_then_place_in_recep-Cup-None-Microwave-1"},{"location":"sim-alfred/#example-problem-definition","text":"the full problem definition from file full_2.1.0/train/pick_and_place_simple-Pillow-None-ArmChair-225/trial_T20190908_104554_100496/problem_0.pddl (define (problem plan_0_690) (:domain put_task) (:metric minimize (totalCost)) (:objects agent1 - agent Statue - object TissueBox - object CellPhone - object TeddyBear - object Pot - object SoapBottle - object Book - object SoapBar - object Glassbottle - object CD - object Bowl - object Apple - object Newspaper - object HousePlant - object Pencil - object Window - object FloorLamp - object WineBottle - object Plunger - object PepperShaker - object Poster - object Candle - object PaperTowel - object Knife - object RemoteControl - object Toaster - object Spatula - object LightSwitch - object Vase - object AlarmClock - object SprayBottle - object Television - object Fork - object BaseballBat - object Potato - object Kettle - object Ladle - object ShowerGlass - object PaperTowelRoll - object Spoon - object DeskLamp - object Towel - object Pillow - object Mirror - object Lettuce - object Mug - object Egg - object Bathtub - object WateringCan - object Plate - object ScrubBrush - object LaundryHamperLid - object Watch - object Painting - object TennisRacket - object Tomato - object DishSponge - object Curtains - object ToiletPaper - object Cup - object Chair - object ToiletPaperRoll - object Blinds - object Cloth - object BasketBall - object Sink - object Pen - object Pan - object KeyChain - object ShowerDoor - object Footstool - object HandTowel - object Laptop - object Boots - object ButterKnife - object StoveKnob - object CreditCard - object SaltShaker - object Bread - object Box - object StatueType - otype TissueBoxType - otype CellPhoneType - otype TeddyBearType - otype PotType - otype SoapBottleType - otype BookType - otype SoapBarType - otype GlassbottleType - otype CDType - otype BowlType - otype AppleType - otype NewspaperType - otype HousePlantType - otype PencilType - otype WindowType - otype FloorLampType - otype WineBottleType - otype PlungerType - otype PepperShakerType - otype PosterType - otype CandleType - otype PaperTowelType - otype KnifeType - otype RemoteControlType - otype ToasterType - otype SpatulaType - otype LightSwitchType - otype VaseType - otype AlarmClockType - otype SprayBottleType - otype TelevisionType - otype ForkType - otype BaseballBatType - otype PotatoType - otype KettleType - otype LadleType - otype ShowerGlassType - otype PaperTowelRollType - otype SpoonType - otype DeskLampType - otype TowelType - otype PillowType - otype MirrorType - otype LettuceType - otype MugType - otype EggType - otype BathtubType - otype WateringCanType - otype PlateType - otype ScrubBrushType - otype LaundryHamperLidType - otype WatchType - otype PaintingType - otype TennisRacketType - otype TomatoType - otype DishSpongeType - otype CurtainsType - otype ToiletPaperType - otype CupType - otype ChairType - otype ToiletPaperRollType - otype BlindsType - otype ClothType - otype BasketBallType - otype SinkType - otype PenType - otype PanType - otype KeyChainType - otype ShowerDoorType - otype FootstoolType - otype HandTowelType - otype LaptopType - otype BootsType - otype ButterKnifeType - otype StoveKnobType - otype CreditCardType - otype SaltShakerType - otype BreadType - otype BoxType - otype CartType - rtype SideTableType - rtype LaundryHamperType - rtype ShelfType - rtype DresserType - rtype MicrowaveType - rtype SinkBasinType - rtype HandTowelHolderType - rtype StoveBurnerType - rtype ArmChairType - rtype ToiletType - rtype CounterTopType - rtype BathtubBasinType - rtype CoffeeTableType - rtype DrawerType - rtype BedType - rtype DiningTableType - rtype SofaType - rtype OttomanType - rtype CabinetType - rtype CoffeeMachineType - rtype DeskType - rtype GarbageCanType - rtype SafeType - rtype ToiletPaperHangerType - rtype FridgeType - rtype TowelHolderType - rtype Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 - object Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 - object Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 - receptacle Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 - receptacle SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 - receptacle CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 - receptacle Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 - receptacle Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 - receptacle Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 - receptacle Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 - receptacle Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 - receptacle GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 - receptacle ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 - receptacle loc_bar__minus_10_bar_13_bar_0_bar_45 - location loc_bar__minus_5_bar_10_bar_1_bar_60 - location loc_bar__minus_5_bar_13_bar_1_bar_60 - location loc_bar__minus_9_bar_15_bar_0_bar_60 - location loc_bar__minus_17_bar_17_bar_2_bar_60 - location loc_bar__minus_6_bar_8_bar_1_bar_45 - location loc_bar__minus_4_bar_7_bar_2_bar_60 - location loc_bar__minus_14_bar_11_bar_3_bar_45 - location loc_bar__minus_4_bar_11_bar_3_bar_60 - location loc_bar__minus_13_bar_8_bar_3_bar_45 - location loc_bar__minus_6_bar_14_bar_1_bar_45 - location loc_bar__minus_15_bar_10_bar_3_bar_60 - location loc_bar__minus_1_bar_17_bar_0_bar_60 - location loc_bar__minus_6_bar_14_bar_1_bar_60 - location loc_bar__minus_7_bar_15_bar_0_bar_60 - location loc_bar__minus_6_bar_7_bar_1_bar_60 - location loc_bar__minus_10_bar_9_bar_2_bar_30 - location ) (:init (= (totalCost) 0) (canContain ToiletType DishSpongeType) (canContain ToiletType TissueBoxType) (canContain ToiletType ClothType) (canContain ToiletType SoapBottleType) (canContain ToiletType SoapBarType) (canContain ToiletType SprayBottleType) (canContain ToiletType HandTowelType) (canContain ToiletType NewspaperType) (canContain ToiletType PaperTowelType) (canContain ToiletType ToiletPaperType) (canContain ToiletType CandleType) (canContain ToiletType ToiletPaperRollType) (canContain CounterTopType TissueBoxType) (canContain CounterTopType CellPhoneType) (canContain CounterTopType PotType) (canContain CounterTopType SoapBottleType) (canContain CounterTopType SoapBarType) (canContain CounterTopType GlassbottleType) (canContain CounterTopType BookType) (canContain CounterTopType CDType) (canContain CounterTopType BowlType) (canContain CounterTopType AppleType) (canContain CounterTopType NewspaperType) (canContain CounterTopType PencilType) (canContain CounterTopType WineBottleType) (canContain CounterTopType PepperShakerType) (canContain CounterTopType CandleType) (canContain CounterTopType PaperTowelType) (canContain CounterTopType KnifeType) (canContain CounterTopType RemoteControlType) (canContain CounterTopType SpatulaType) (canContain CounterTopType AlarmClockType) (canContain CounterTopType VaseType) (canContain CounterTopType SprayBottleType) (canContain CounterTopType BreadType) (canContain CounterTopType ForkType) (canContain CounterTopType BaseballBatType) (canContain CounterTopType PotatoType) (canContain CounterTopType KettleType) (canContain CounterTopType LadleType) (canContain CounterTopType SpoonType) (canContain CounterTopType LettuceType) (canContain CounterTopType MugType) (canContain CounterTopType WateringCanType) (canContain CounterTopType EggType) (canContain CounterTopType PlateType) (canContain CounterTopType WatchType) (canContain CounterTopType TennisRacketType) (canContain CounterTopType TomatoType) (canContain CounterTopType DishSpongeType) (canContain CounterTopType ToiletPaperType) (canContain CounterTopType BoxType) (canContain CounterTopType ToiletPaperRollType) (canContain CounterTopType CupType) (canContain CounterTopType PenType) (canContain CounterTopType ClothType) (canContain CounterTopType BasketBallType) (canContain CounterTopType PanType) (canContain CounterTopType KeyChainType) (canContain CounterTopType HandTowelType) (canContain CounterTopType ButterKnifeType) (canContain CounterTopType LaptopType) (canContain CounterTopType CreditCardType) (canContain CounterTopType SaltShakerType) (canContain CounterTopType StatueType) (canContain SideTableType TissueBoxType) (canContain SideTableType CellPhoneType) (canContain SideTableType PotType) (canContain SideTableType SoapBottleType) (canContain SideTableType SoapBarType) (canContain SideTableType GlassbottleType) (canContain SideTableType BookType) (canContain SideTableType CDType) (canContain SideTableType BowlType) (canContain SideTableType AppleType) (canContain SideTableType NewspaperType) (canContain SideTableType PencilType) (canContain SideTableType WineBottleType) (canContain SideTableType PepperShakerType) (canContain SideTableType CandleType) (canContain SideTableType PaperTowelType) (canContain SideTableType KnifeType) (canContain SideTableType RemoteControlType) (canContain SideTableType SpatulaType) (canContain SideTableType AlarmClockType) (canContain SideTableType VaseType) (canContain SideTableType SprayBottleType) (canContain SideTableType BreadType) (canContain SideTableType ForkType) (canContain SideTableType BaseballBatType) (canContain SideTableType PotatoType) (canContain SideTableType KettleType) (canContain SideTableType LadleType) (canContain SideTableType SpoonType) (canContain SideTableType LettuceType) (canContain SideTableType MugType) (canContain SideTableType WateringCanType) (canContain SideTableType EggType) (canContain SideTableType PlateType) (canContain SideTableType WatchType) (canContain SideTableType TennisRacketType) (canContain SideTableType TomatoType) (canContain SideTableType DishSpongeType) (canContain SideTableType ToiletPaperType) (canContain SideTableType BoxType) (canContain SideTableType ToiletPaperRollType) (canContain SideTableType CupType) (canContain SideTableType PenType) (canContain SideTableType ClothType) (canContain SideTableType BasketBallType) (canContain SideTableType PanType) (canContain SideTableType KeyChainType) (canContain SideTableType HandTowelType) (canContain SideTableType ButterKnifeType) (canContain SideTableType LaptopType) (canContain SideTableType CreditCardType) (canContain SideTableType SaltShakerType) (canContain SideTableType StatueType) (canContain BathtubBasinType DishSpongeType) (canContain BathtubBasinType SoapBarType) (canContain BathtubBasinType ClothType) (canContain BathtubBasinType HandTowelType) (canContain DrawerType TissueBoxType) (canContain DrawerType CellPhoneType) (canContain DrawerType SoapBottleType) (canContain DrawerType BookType) (canContain DrawerType SoapBarType) (canContain DrawerType CDType) (canContain DrawerType NewspaperType) (canContain DrawerType PencilType) (canContain DrawerType PepperShakerType) (canContain DrawerType CandleType) (canContain DrawerType KnifeType) (canContain DrawerType RemoteControlType) (canContain DrawerType SpatulaType) (canContain DrawerType SprayBottleType) (canContain DrawerType ForkType) (canContain DrawerType LadleType) (canContain DrawerType SpoonType) (canContain DrawerType WateringCanType) (canContain DrawerType WatchType) (canContain DrawerType DishSpongeType) (canContain DrawerType ToiletPaperType) (canContain DrawerType ToiletPaperRollType) (canContain DrawerType PenType) (canContain DrawerType ClothType) (canContain DrawerType KeyChainType) (canContain DrawerType HandTowelType) (canContain DrawerType ButterKnifeType) (canContain DrawerType CreditCardType) (canContain DrawerType SaltShakerType) (canContain LaundryHamperType ClothType) (canContain BedType CellPhoneType) (canContain BedType BasketBallType) (canContain BedType BookType) (canContain BedType BaseballBatType) (canContain BedType LaptopType) (canContain BedType TennisRacketType) (canContain BedType NewspaperType) (canContain BedType PillowType) (canContain DiningTableType TissueBoxType) (canContain DiningTableType CellPhoneType) (canContain DiningTableType PotType) (canContain DiningTableType SoapBottleType) (canContain DiningTableType SoapBarType) (canContain DiningTableType GlassbottleType) (canContain DiningTableType BookType) (canContain DiningTableType CDType) (canContain DiningTableType BowlType) (canContain DiningTableType AppleType) (canContain DiningTableType NewspaperType) (canContain DiningTableType PencilType) (canContain DiningTableType WineBottleType) (canContain DiningTableType PepperShakerType) (canContain DiningTableType CandleType) (canContain DiningTableType PaperTowelType) (canContain DiningTableType KnifeType) (canContain DiningTableType RemoteControlType) (canContain DiningTableType SpatulaType) (canContain DiningTableType AlarmClockType) (canContain DiningTableType VaseType) (canContain DiningTableType SprayBottleType) (canContain DiningTableType BreadType) (canContain DiningTableType ForkType) (canContain DiningTableType BaseballBatType) (canContain DiningTableType PotatoType) (canContain DiningTableType KettleType) (canContain DiningTableType LadleType) (canContain DiningTableType SpoonType) (canContain DiningTableType LettuceType) (canContain DiningTableType MugType) (canContain DiningTableType WateringCanType) (canContain DiningTableType EggType) (canContain DiningTableType PlateType) (canContain DiningTableType WatchType) (canContain DiningTableType TennisRacketType) (canContain DiningTableType TomatoType) (canContain DiningTableType DishSpongeType) (canContain DiningTableType ToiletPaperType) (canContain DiningTableType BoxType) (canContain DiningTableType ToiletPaperRollType) (canContain DiningTableType CupType) (canContain DiningTableType PenType) (canContain DiningTableType ClothType) (canContain DiningTableType BasketBallType) (canContain DiningTableType PanType) (canContain DiningTableType KeyChainType) (canContain DiningTableType HandTowelType) (canContain DiningTableType ButterKnifeType) (canContain DiningTableType LaptopType) (canContain DiningTableType CreditCardType) (canContain DiningTableType SaltShakerType) (canContain DiningTableType StatueType) (canContain SofaType ClothType) (canContain SofaType RemoteControlType) (canContain SofaType CellPhoneType) (canContain SofaType BasketBallType) (canContain SofaType BookType) (canContain SofaType KeyChainType) (canContain SofaType LaptopType) (canContain SofaType NewspaperType) (canContain SofaType CreditCardType) (canContain SofaType PillowType) (canContain SofaType BoxType) (canContain ShelfType TissueBoxType) (canContain ShelfType CellPhoneType) (canContain ShelfType PotType) (canContain ShelfType SoapBottleType) (canContain ShelfType GlassbottleType) (canContain ShelfType SoapBarType) (canContain ShelfType BookType) (canContain ShelfType CDType) (canContain ShelfType BowlType) (canContain ShelfType NewspaperType) (canContain ShelfType PencilType) (canContain ShelfType WineBottleType) (canContain ShelfType PepperShakerType) (canContain ShelfType CandleType) (canContain ShelfType PaperTowelType) (canContain ShelfType RemoteControlType) (canContain ShelfType AlarmClockType) (canContain ShelfType VaseType) (canContain ShelfType SprayBottleType) (canContain ShelfType KettleType) (canContain ShelfType MugType) (canContain ShelfType WateringCanType) (canContain ShelfType PlateType) (canContain ShelfType WatchType) (canContain ShelfType DishSpongeType) (canContain ShelfType ToiletPaperType) (canContain ShelfType ToiletPaperRollType) (canContain ShelfType CupType) (canContain ShelfType PenType) (canContain ShelfType ClothType) (canContain ShelfType KeyChainType) (canContain ShelfType HandTowelType) (canContain ShelfType CreditCardType) (canContain ShelfType SaltShakerType) (canContain ShelfType StatueType) (canContain ShelfType BoxType) (canContain OttomanType ClothType) (canContain OttomanType RemoteControlType) (canContain OttomanType CellPhoneType) (canContain OttomanType BasketBallType) (canContain OttomanType BookType) (canContain OttomanType KeyChainType) (canContain OttomanType LaptopType) (canContain OttomanType NewspaperType) (canContain OttomanType CreditCardType) (canContain OttomanType PillowType) (canContain OttomanType BoxType) (canContain DresserType TissueBoxType) (canContain DresserType CellPhoneType) (canContain DresserType GlassbottleType) (canContain DresserType BookType) (canContain DresserType CDType) (canContain DresserType BowlType) (canContain DresserType NewspaperType) (canContain DresserType PencilType) (canContain DresserType WineBottleType) (canContain DresserType CandleType) (canContain DresserType RemoteControlType) (canContain DresserType AlarmClockType) (canContain DresserType VaseType) (canContain DresserType SprayBottleType) (canContain DresserType MugType) (canContain DresserType WateringCanType) (canContain DresserType PlateType) (canContain DresserType WatchType) (canContain DresserType TennisRacketType) (canContain DresserType ToiletPaperType) (canContain DresserType CupType) (canContain DresserType ToiletPaperRollType) (canContain DresserType PenType) (canContain DresserType ClothType) (canContain DresserType BasketBallType) (canContain DresserType KeyChainType) (canContain DresserType LaptopType) (canContain DresserType CreditCardType) (canContain DresserType StatueType) (canContain DresserType BoxType) (canContain MicrowaveType MugType) (canContain MicrowaveType EggType) (canContain MicrowaveType PlateType) (canContain MicrowaveType GlassbottleType) (canContain MicrowaveType BreadType) (canContain MicrowaveType PotatoType) (canContain MicrowaveType BowlType) (canContain MicrowaveType TomatoType) (canContain MicrowaveType AppleType) (canContain MicrowaveType CupType) (canContain CartType MugType) (canContain CartType DishSpongeType) (canContain CartType TissueBoxType) (canContain CartType ClothType) (canContain CartType SoapBottleType) (canContain CartType VaseType) (canContain CartType SoapBarType) (canContain CartType SprayBottleType) (canContain CartType HandTowelType) (canContain CartType PaperTowelType) (canContain CartType PlungerType) (canContain CartType ToiletPaperType) (canContain CartType StatueType) (canContain CartType CandleType) (canContain CartType ToiletPaperRollType) (canContain SafeType CellPhoneType) (canContain SafeType VaseType) (canContain SafeType KeyChainType) (canContain SafeType WatchType) (canContain SafeType CDType) (canContain SafeType CreditCardType) (canContain SafeType StatueType) (canContain CabinetType TissueBoxType) (canContain CabinetType PotType) (canContain CabinetType SoapBottleType) (canContain CabinetType GlassbottleType) (canContain CabinetType SoapBarType) (canContain CabinetType BookType) (canContain CabinetType CDType) (canContain CabinetType BowlType) (canContain CabinetType NewspaperType) (canContain CabinetType WineBottleType) (canContain CabinetType PlungerType) (canContain CabinetType PepperShakerType) (canContain CabinetType CandleType) (canContain CabinetType VaseType) (canContain CabinetType SprayBottleType) (canContain CabinetType KettleType) (canContain CabinetType LadleType) (canContain CabinetType MugType) (canContain CabinetType WateringCanType) (canContain CabinetType PlateType) (canContain CabinetType DishSpongeType) (canContain CabinetType ToiletPaperType) (canContain CabinetType ToiletPaperRollType) (canContain CabinetType CupType) (canContain CabinetType ClothType) (canContain CabinetType PanType) (canContain CabinetType HandTowelType) (canContain CabinetType SaltShakerType) (canContain CabinetType BoxType) (canContain CoffeeMachineType MugType) (canContain DeskType TissueBoxType) (canContain DeskType CellPhoneType) (canContain DeskType SoapBottleType) (canContain DeskType GlassbottleType) (canContain DeskType BookType) (canContain DeskType CDType) (canContain DeskType BowlType) (canContain DeskType NewspaperType) (canContain DeskType PencilType) (canContain DeskType WineBottleType) (canContain DeskType CandleType) (canContain DeskType RemoteControlType) (canContain DeskType AlarmClockType) (canContain DeskType VaseType) (canContain DeskType SprayBottleType) (canContain DeskType MugType) (canContain DeskType WateringCanType) (canContain DeskType PlateType) (canContain DeskType WatchType) (canContain DeskType TennisRacketType) (canContain DeskType ToiletPaperType) (canContain DeskType CupType) (canContain DeskType ToiletPaperRollType) (canContain DeskType PenType) (canContain DeskType ClothType) (canContain DeskType BasketBallType) (canContain DeskType KeyChainType) (canContain DeskType LaptopType) (canContain DeskType CreditCardType) (canContain DeskType StatueType) (canContain DeskType BoxType) (canContain GarbageCanType TissueBoxType) (canContain GarbageCanType SoapBottleType) (canContain GarbageCanType SoapBarType) (canContain GarbageCanType CDType) (canContain GarbageCanType AppleType) (canContain GarbageCanType NewspaperType) (canContain GarbageCanType PencilType) (canContain GarbageCanType WineBottleType) (canContain GarbageCanType PaperTowelType) (canContain GarbageCanType SprayBottleType) (canContain GarbageCanType PotatoType) (canContain GarbageCanType LettuceType) (canContain GarbageCanType EggType) (canContain GarbageCanType TomatoType) (canContain GarbageCanType DishSpongeType) (canContain GarbageCanType ToiletPaperType) (canContain GarbageCanType ToiletPaperRollType) (canContain GarbageCanType PenType) (canContain GarbageCanType ClothType) (canContain GarbageCanType HandTowelType) (canContain GarbageCanType BreadType) (canContain HandTowelHolderType HandTowelType) (canContain SinkBasinType PotType) (canContain SinkBasinType SoapBarType) (canContain SinkBasinType GlassbottleType) (canContain SinkBasinType BowlType) (canContain SinkBasinType AppleType) (canContain SinkBasinType KnifeType) (canContain SinkBasinType SpatulaType) (canContain SinkBasinType ForkType) (canContain SinkBasinType PotatoType) (canContain SinkBasinType KettleType) (canContain SinkBasinType LadleType) (canContain SinkBasinType SpoonType) (canContain SinkBasinType LettuceType) (canContain SinkBasinType MugType) (canContain SinkBasinType EggType) (canContain SinkBasinType PlateType) (canContain SinkBasinType TomatoType) (canContain SinkBasinType DishSpongeType) (canContain SinkBasinType CupType) (canContain SinkBasinType ClothType) (canContain SinkBasinType PanType) (canContain SinkBasinType HandTowelType) (canContain SinkBasinType ButterKnifeType) (canContain StoveBurnerType PanType) (canContain StoveBurnerType KettleType) (canContain StoveBurnerType PotType) (canContain CoffeeTableType TissueBoxType) (canContain CoffeeTableType CellPhoneType) (canContain CoffeeTableType PotType) (canContain CoffeeTableType SoapBottleType) (canContain CoffeeTableType SoapBarType) (canContain CoffeeTableType GlassbottleType) (canContain CoffeeTableType BookType) (canContain CoffeeTableType CDType) (canContain CoffeeTableType BowlType) (canContain CoffeeTableType AppleType) (canContain CoffeeTableType NewspaperType) (canContain CoffeeTableType PencilType) (canContain CoffeeTableType WineBottleType) (canContain CoffeeTableType PepperShakerType) (canContain CoffeeTableType CandleType) (canContain CoffeeTableType PaperTowelType) (canContain CoffeeTableType KnifeType) (canContain CoffeeTableType RemoteControlType) (canContain CoffeeTableType SpatulaType) (canContain CoffeeTableType AlarmClockType) (canContain CoffeeTableType VaseType) (canContain CoffeeTableType SprayBottleType) (canContain CoffeeTableType BreadType) (canContain CoffeeTableType ForkType) (canContain CoffeeTableType BaseballBatType) (canContain CoffeeTableType PotatoType) (canContain CoffeeTableType KettleType) (canContain CoffeeTableType LadleType) (canContain CoffeeTableType SpoonType) (canContain CoffeeTableType LettuceType) (canContain CoffeeTableType MugType) (canContain CoffeeTableType WateringCanType) (canContain CoffeeTableType EggType) (canContain CoffeeTableType PlateType) (canContain CoffeeTableType WatchType) (canContain CoffeeTableType TennisRacketType) (canContain CoffeeTableType TomatoType) (canContain CoffeeTableType DishSpongeType) (canContain CoffeeTableType ToiletPaperType) (canContain CoffeeTableType BoxType) (canContain CoffeeTableType ToiletPaperRollType) (canContain CoffeeTableType CupType) (canContain CoffeeTableType PenType) (canContain CoffeeTableType ClothType) (canContain CoffeeTableType BasketBallType) (canContain CoffeeTableType PanType) (canContain CoffeeTableType KeyChainType) (canContain CoffeeTableType HandTowelType) (canContain CoffeeTableType ButterKnifeType) (canContain CoffeeTableType LaptopType) (canContain CoffeeTableType CreditCardType) (canContain CoffeeTableType SaltShakerType) (canContain CoffeeTableType StatueType) (canContain ToiletPaperHangerType ToiletPaperType) (canContain ToiletPaperHangerType ToiletPaperRollType) (canContain FridgeType MugType) (canContain FridgeType EggType) (canContain FridgeType PotType) (canContain FridgeType PlateType) (canContain FridgeType PanType) (canContain FridgeType GlassbottleType) (canContain FridgeType BreadType) (canContain FridgeType PotatoType) (canContain FridgeType BowlType) (canContain FridgeType TomatoType) (canContain FridgeType AppleType) (canContain FridgeType WineBottleType) (canContain FridgeType LettuceType) (canContain FridgeType CupType) (canContain TowelHolderType TowelType) (receptacleType Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 SofaType) (receptacleType Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 SofaType) (receptacleType SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 SideTableType) (receptacleType CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 CoffeeTableType) (receptacleType Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 DrawerType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 ShelfType) (receptacleType Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 ShelfType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 ShelfType) (receptacleType Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 ShelfType) (receptacleType Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 ShelfType) (receptacleType Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 ShelfType) (receptacleType GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 GarbageCanType) (receptacleType ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 ArmChairType) (objectType Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 PillowType) (objectType Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 PillowType) (openable Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998) (atLocation agent1 loc_bar__minus_10_bar_9_bar_2_bar_30) (inReceptacle Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016) (inReceptacle Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016) (wasInReceptacle Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016) (wasInReceptacle Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 10) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 10) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 13) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 12) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 12) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 17) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 17) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 16) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 9) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 8) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 7) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 7) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 15) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_10_bar_13_bar_0_bar_45) 7) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 13) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 8) (= (distance loc_bar__minus_10_bar_13_bar_0_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_10_bar_13_bar_0_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 10) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 17) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 6) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 10) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 7) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 25) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 25) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_8_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 15) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 10) (= (distance loc_bar__minus_6_bar_8_bar_1_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 5) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_8_bar_1_bar_45) 5) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 9) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 24) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 24) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 19) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 19) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 11) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_14_bar_11_bar_3_bar_45) 11) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 14) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 15) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 14) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_14_bar_11_bar_3_bar_45) 14) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 6) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 6) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 15) (= (distance loc_bar__minus_14_bar_11_bar_3_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_14_bar_11_bar_3_bar_45) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 16) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 13) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 6) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_4_bar_11_bar_3_bar_60) 12) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 5) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 5) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 6) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 11) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 11) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 23) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 15) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 8) (= (distance loc_bar__minus_4_bar_11_bar_3_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 9) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_4_bar_11_bar_3_bar_60) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 26) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 26) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 15) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 15) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 18) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 18) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 9) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_13_bar_8_bar_3_bar_45) 9) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 14) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 14) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 17) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 17) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 18) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 18) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_45) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_13_bar_8_bar_3_bar_45) 16) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 8) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 8) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 17) (= (distance loc_bar__minus_13_bar_8_bar_3_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_13_bar_8_bar_3_bar_45) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 16) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 22) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_1_bar_17_bar_0_bar_60) 22) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 15) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 12) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 15) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 19) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 19) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 13) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_1_bar_17_bar_0_bar_60) 13) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 25) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 25) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 12) (= (distance loc_bar__minus_1_bar_17_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 19) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_1_bar_17_bar_0_bar_60) 19) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 14) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_4_bar_7_bar_2_bar_60) 15) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 8) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 11) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 16) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 16) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 28) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 28) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_4_bar_7_bar_2_bar_60) 14) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 18) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 18) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 13) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 13) (= (distance loc_bar__minus_4_bar_7_bar_2_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 6) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_4_bar_7_bar_2_bar_60) 6) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 14) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_7_bar_15_bar_0_bar_60) 14) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 11) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 8) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 5) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 5) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_7_bar_15_bar_0_bar_60) 7) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 17) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 17) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 6) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 6) (= (distance loc_bar__minus_7_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 13) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_7_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_5_bar_10_bar_1_bar_60) 12) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_5_bar_13_bar_1_bar_60) 15) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_9_bar_15_bar_0_bar_60) 12) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_17_bar_17_bar_2_bar_60) 22) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 22) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_14_bar_1_bar_45) 14) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_10_bar_9_bar_2_bar_30) 14) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_15_bar_10_bar_3_bar_60) 12) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 12) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_14_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 15) (= (distance loc_bar__minus_10_bar_9_bar_2_bar_30 loc_bar__minus_6_bar_7_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_10_bar_9_bar_2_bar_30) 10) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 6) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 23) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 11) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_5_bar_10_bar_1_bar_60) 11) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 13) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_10_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 9) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_5_bar_10_bar_1_bar_60) 9) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 10) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 10) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 20) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 20) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_5_bar_13_bar_1_bar_60) 8) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 16) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 16) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 7) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 7) (= (distance loc_bar__minus_5_bar_13_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 12) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_5_bar_13_bar_1_bar_60) 12) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 13) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 13) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 9) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_9_bar_15_bar_0_bar_60) 9) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 8) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 8) (= (distance loc_bar__minus_9_bar_15_bar_0_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_9_bar_15_bar_0_bar_60) 15) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_17_bar_17_bar_2_bar_60) 17) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 13) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 13) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 16) (= (distance loc_bar__minus_17_bar_17_bar_2_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 23) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_17_bar_17_bar_2_bar_60) 23) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_15_bar_10_bar_3_bar_60) 17) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 17) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_14_bar_1_bar_60) 2) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 2) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_45 loc_bar__minus_6_bar_7_bar_1_bar_60) 11) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_45) 11) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 16) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 16) (= (distance loc_bar__minus_15_bar_10_bar_3_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 15) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_15_bar_10_bar_3_bar_60) 15) (= (distance loc_bar__minus_6_bar_14_bar_1_bar_60 loc_bar__minus_6_bar_7_bar_1_bar_60) 10) (= (distance loc_bar__minus_6_bar_7_bar_1_bar_60 loc_bar__minus_6_bar_14_bar_1_bar_60) 10) (receptacleAtLocation Sofa__minus_8_dot_5_comma__minus_8_dot_5_comma_18_dot_232_comma_18_dot_232_comma__minus_0_dot_016_comma__minus_0_dot_016 loc_bar__minus_10_bar_13_bar_0_bar_45) (receptacleAtLocation Sofa__minus_18_dot_28_comma__minus_18_dot_28_comma_7_dot_6_comma_7_dot_6_comma__minus_0_dot_016_comma__minus_0_dot_016 loc_bar__minus_13_bar_8_bar_3_bar_45) (receptacleAtLocation SideTable__minus_18_dot_452_comma__minus_18_dot_452_comma_13_dot_3852_comma_13_dot_3852_comma_0_dot_024_comma_0_dot_024 loc_bar__minus_17_bar_17_bar_2_bar_60) (receptacleAtLocation CoffeeTable__minus_7_dot_892_comma__minus_7_dot_892_comma_10_dot_4616_comma_10_dot_4616_comma_0_dot_0084_comma_0_dot_0084 loc_bar__minus_4_bar_11_bar_3_bar_60) (receptacleAtLocation Drawer__minus_17_dot_733296_comma__minus_17_dot_733296_comma_13_dot_37799932_comma_13_dot_37799932_comma_1_dot_8938998_comma_1_dot_8938998 loc_bar__minus_14_bar_11_bar_3_bar_45) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_0_dot_6968_comma_0_dot_6968 loc_bar__minus_6_bar_14_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_346000672_comma__minus_1_dot_346000672_comma_10_dot_696_comma_10_dot_696_comma_0_dot_7032_comma_0_dot_7032 loc_bar__minus_6_bar_8_bar_1_bar_45) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_1_dot_6748_comma_1_dot_6748 loc_bar__minus_6_bar_14_bar_1_bar_45) (receptacleAtLocation Shelf__minus_1_dot_846003892_comma__minus_1_dot_846003892_comma_9_dot_21560192_comma_9_dot_21560192_comma_1_dot_9108_comma_1_dot_9108 loc_bar__minus_5_bar_10_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_860004_comma__minus_1_dot_860004_comma_9_dot_21760176_comma_9_dot_21760176_comma_0_dot_7012_comma_0_dot_7012 loc_bar__minus_6_bar_7_bar_1_bar_60) (receptacleAtLocation Shelf__minus_1_dot_85999584_comma__minus_1_dot_85999584_comma_12_dot_15600204_comma_12_dot_15600204_comma_2_dot_2752_comma_2_dot_2752 loc_bar__minus_5_bar_13_bar_1_bar_60) (receptacleAtLocation GarbageCan__minus_0_dot_90916252_comma__minus_0_dot_90916252_comma_19_dot_11539076_comma_19_dot_11539076_comma_0_dot_023272708_comma_0_dot_023272708 loc_bar__minus_1_bar_17_bar_0_bar_60) (receptacleAtLocation ArmChair__minus_3_dot_504_comma__minus_3_dot_504_comma_2_dot_264_comma_2_dot_264_comma__minus_0_dot_1316_comma__minus_0_dot_1316 loc_bar__minus_4_bar_7_bar_2_bar_60) (objectAtLocation Pillow__minus_17_dot_697546_comma__minus_17_dot_697546_comma_9_dot_57340716_comma_9_dot_57340716_comma_1_dot_9374274_comma_1_dot_9374274 loc_bar__minus_15_bar_10_bar_3_bar_60) (objectAtLocation Pillow__minus_9_dot_48670484_comma__minus_9_dot_48670484_comma_17_dot_64955328_comma_17_dot_64955328_comma_1_dot_937426_comma_1_dot_937426 loc_bar__minus_9_bar_15_bar_0_bar_60) ) (:goal (and (exists (?r - receptacle) (exists (?o - object) (and (inReceptacle ?o ?r) (objectType ?o PillowType) (receptacleType ?r ArmChairType) ) ) ) (forall (?re - receptacle) (not (opened ?re)) ) ) ) )","title":"Example problem definition"},{"location":"sim-habitat/","text":"Habitat Rearrangement @ Facebook #","title":"Habitat Rearrangement @ Facebook"},{"location":"sim-habitat/#habitat-rearrangement-facebook","text":"","title":"Habitat Rearrangement @ Facebook"},{"location":"sim-igibson/","text":"iGibson's BEHAVIOR: @ Stanford # Notes on their paper # Notes on their implementation # uses .bddl files to specify goals, which include constructs (forpairs and (forn that are used like (exists , e.g. exists two pieces of shoes are put down next to the table only objects and init that are relevant in the problem are listed in problem.bddl reconstructed video clips of one human demonstraction for each of the 100 activities in Dropbox , where image arrays are of size 128 by 128 Predicates used # (inside ?obj1 ?obj2) (nextto ?obj1 ?obj2) (touching ?obj1 ?obj2) (ontop ?obj1 ?obj2) (onfloor ?obj1 ?obj2) (under ?obj1 ?obj2) (cooked ?obj1) (dusty ?obj1) (frozen ?obj1) (open ?obj1) (stained ?obj1) (sliced ?obj1) (soaked ?obj1) (toggled_on ?obj1) ;; mentioned but not actually used (broken ?obj1) (timeset ?obj1) (burnt ?obj1) (perished ?obj1) (screwed ?obj1) BDDL constructs # (forpairs (?var1 - type2) (?var2 - type2) <condition>) specifies \"for pairs of items that satisfy the condition\": (forpairs (?stocking.n.01 - stocking.n.01) (?cube.n.05 - cube.n.05) (inside ?cube.n.05 ?stocking.n.01) ) (forn (N) (?var - type) <condition>) specifies \"for examples N items that satisfy the condition\": (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (nextto ?gym_shoe.n.01 ?table.n.02_1) ) (fornpairs specifies \"for examples N pairs of items that satisfy the condition\". BDDL definition of example activity # (define (problem brushing_lint_off_clothing_0) (:domain igibson) (:objects sweater.n.01_1 sweater.n.01_2 sweater.n.01_3 sweater.n.01_4 - sweater.n.01 floor.n.01_1 - floor.n.01 bed.n.01_1 - bed.n.01 scrub_brush.n.01_1 - scrub_brush.n.01 agent.n.01_1 - agent.n.01 ) (:init (onfloor sweater.n.01_1 floor.n.01_1) (onfloor sweater.n.01_2 floor.n.01_1) (ontop sweater.n.01_3 bed.n.01_1) (ontop sweater.n.01_4 bed.n.01_1) (dusty sweater.n.01_1) (dusty sweater.n.01_2) (dusty sweater.n.01_3) (dusty sweater.n.01_4) (onfloor scrub_brush.n.01_1 floor.n.01_1) (not (dusty scrub_brush.n.01_1) ) (inroom floor.n.01_1 bedroom) (inroom bed.n.01_1 bedroom) (onfloor agent.n.01_1 floor.n.01_1) ) (:goal (and (forall (?sweater.n.01 - sweater.n.01) (not (dusty ?sweater.n.01) ) ) (forall (?sweater.n.01 - sweater.n.01) (ontop ?sweater.n.01 ?bed.n.01_1) ) ) ) ) URDF definition of example object # Objects in .bddl appear in object_scope tag in .urdf . For example, the location of sweater.n.01_1 is uniquely defined in file /igibson/data/ig_dataset/scenes/Beechwood_1_int/urdf/Beechwood_1_int_task_brushing_lint_off_clothing_0_0.urdf where /igibson/data/ig_dataset is extracted from downloaded behavior_data_bundle.zip <link bounding_box=\"0.0653052495083491 0.5302351523387753 0.41672515978519237\" category=\"sweater\" joint_positions=\"[{}]\" model=\"sweater_000\" name=\"sweater_100\" object_scope=\"sweater.n.01_1\" room=\"bedroom_0\" rpy=\"2.8526263153393647 1.5587201439643557 -1.7242493779318842\" states=\"{&quot;VerticalAdjacency&quot;: null, &quot;HorizontalAdjacency&quot;: null, &quot;ContactBodies&quot;: null, &quot;AABB&quot;: null, &quot;Pose&quot;: null, &quot;Stained&quot;: {&quot;particles&quot;: {&quot;dirt_dump&quot;: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], &quot;random_bbox_dims&quot;: [[0.026195604501169197, 0.026195604501169197, 0.004], [0.03573388195198314, 0.03573388195198314, 0.004], [0.024851839778765032, 0.024851839778765032, 0.004], [0.022419248633333857, 0.022419248633333857, 0.004], [0.03373335108174163, 0.03373335108174163, 0.004], [0.041424080732280585, 0.041424080732280585, 0.004], [0.038020350710816955, 0.038020350710816955, 0.004], [0.0329636571631501, 0.0329636571631501, 0.004], [0.02934565624343374, 0.02934565624343374, 0.004], [0.026772989501223518, 0.026772989501223518, 0.004], [0.022535692809698377, 0.022535692809698377, 0.004], [0.039959500855667116, 0.039959500855667116, 0.004], [0.029527386381408033, 0.029527386381408033, 0.004], [0.03542366024031154, 0.03542366024031154, 0.004], [0.03468628837029925, 0.03468628837029925, 0.004], [0.020809380058282288, 0.020809380058282288, 0.004], [0.025045343967904414, 0.025045343967904414, 0.004], [0.04092164786826981, 0.04092164786826981, 0.004], [0.02574179113939813, 0.02574179113939813, 0.004], [0.03457646574957623, 0.03457646574957623, 0.004]]}}, &quot;Dusty&quot;: {&quot;particles&quot;: [[null, [-6.4971513748168945, -3.404371976852417, 0.05141346901655197], [0.19125089049339294, 0.03617021441459656, -0.03086436726152897, 0.9803888201713562]], [null, [-6.446415424346924, -3.5374882221221924, 0.06482921540737152], [-0.03602251783013344, -0.010998752899467945, -0.018574034795165062, 0.9991177916526794]], [null, [-6.362188816070557, -3.3786730766296387, 0.045560769736766815], [0.009277323260903358, 0.00951681099832058, -0.5435599684715271, 0.8392651081085205]], [null, [-6.545812129974365, -3.489015817642212, 0.04524658992886543], [0.19416584074497223, -0.006309961434453726, -0.5295246839523315, 0.8257502317428589]], null, [null, [-6.408360958099365, -3.628054141998291, 0.0378640815615654], [-0.034921642392873764, 0.14623099565505981, -0.018998349085450172, 0.9884513020515442]], [null, [-6.516524791717529, -3.6305572986602783, 0.058602310717105865], [0.14024357497692108, -0.08579050004482269, -0.1966172158718109, 0.9665988683700562]], [null, [-6.485074520111084, -3.5070207118988037, 0.043625302612781525], [0.10483767837285995, 0.13317422568798065, -0.4169555902481079, 0.8929846882820129]], [null, [-6.546047210693359, -3.4792582988739014, 0.048361051827669144], [0.1851772516965866, 0.013391231186687946, -0.5655433535575867, 0.8035488128662109]], [null, [-6.631643772125244, -3.4663052558898926, 0.03845023736357689], [0.22211401164531708, -0.001216256059706211, -0.6665422916412354, 0.7116073369979858]], [null, [-6.575324058532715, -3.670689344406128, 0.044780243188142776], [0.006615441292524338, -0.10300734639167786, -0.3804311752319336, 0.9190309047698975]], [null, [-6.362612724304199, -3.7119691371917725, 0.044740889221429825], [-0.019456973299384117, 0.15591785311698914, -0.5151968002319336, 0.842545747756958]], [null, [-6.5113935470581055, -3.5679073333740234, 0.04981470853090286], [-0.14224763214588165, -0.09159466624259949, -0.4861069321632385, 0.8573657274246216]], null, [null, [-6.3777008056640625, -3.49575138092041, 0.03339405730366707], [-0.0606803297996521, 0.12671928107738495, -0.5964592695236206, 0.7902508974075317]], [null, [-6.478073596954346, -3.6925437450408936, 0.04874435067176819], [0.06432120501995087, 0.06500521302223206, -0.6130579113960266, 0.7847273945808411]], [null, [-6.367181777954102, -3.6412549018859863, 0.04565606266260147], [-0.03387808799743652, -0.12622994184494019, -0.24675683677196503, 0.9602235555648804]], null, null, [null, [-6.29764986038208, -3.3356051445007324, 0.05639209598302841], [-0.18679864704608917, -0.07720296084880829, -0.3072079122066498, 0.9299296736717224]]]}}\" xyz=\"-6.501590635708295 -3.5446136809926023 0.033868759894567044\" /> <joint name=\"j_sweater_100\" type=\"floating\"> <origin rpy=\"2.8526263153393647 1.5587201439643557 -1.7242493779318842\" xyz=\"-6.501590635708295 -3.5446136809926023 0.033868759894567044\"/> <child link=\"sweater_100\"/> <parent link=\"world\"/> </joint> BDDL goal definitions of 100 activities # (:igibson-problems (:assembling_gift_baskets (and (forpairs (?basket.n.01 - basket.n.01) (?candle.n.01 - candle.n.01) (inside ?candle.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?cheese.n.01 - cheese.n.01) (inside ?cheese.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?cookie.n.01 - cookie.n.01) (inside ?cookie.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?bow.n.08 - bow.n.08) (inside ?bow.n.08 ?basket.n.01) ) ) ) (:bottling_fruit (and (exists (?jar.n.01 - jar.n.01) (and (inside ?strawberry.n.01_1 ?jar.n.01) (not (inside ?peach.n.03_1 ?jar.n.01) ) ) ) (exists (?jar.n.01 - jar.n.01) (and (inside ?peach.n.03_1 ?jar.n.01) (not (inside ?strawberry.n.01_1 ?jar.n.01) ) ) ) (forall (?jar.n.01 - jar.n.01) (not (open ?jar.n.01) ) ) (sliced strawberry.n.01_1) (sliced peach.n.03_1) ) ) (:boxing_books_up_for_storage (and (forall (?book.n.02 - book.n.02) (inside ?book.n.02 ?carton.n.02_1) ) ) ) (:bringing_in_wood (and (forall (?plywood.n.01 - plywood.n.01) (onfloor ?plywood.n.01 ?floor.n.01_2) ) ) ) (:brushing_lint_off_clothing (and (forall (?sweater.n.01 - sweater.n.01) (not (dusty ?sweater.n.01) ) ) (forall (?sweater.n.01 - sweater.n.01) (ontop ?sweater.n.01 ?bed.n.01_1) ) ) ) (:chopping_vegetables (and (forall (?tomato.n.01 - tomato.n.01) (and (exists (?dish.n.01 - dish.n.01) (inside ?tomato.n.01 ?dish.n.01) ) (sliced ?tomato.n.01) ) ) (forall (?mushroom.n.05 - mushroom.n.05) (and (exists (?dish.n.01 - dish.n.01) (inside ?mushroom.n.05 ?dish.n.01) ) (sliced ?mushroom.n.05) ) ) (forall (?chestnut.n.03 - chestnut.n.03) (and (exists (?dish.n.01 - dish.n.01) (inside ?chestnut.n.03 ?dish.n.01) ) (sliced ?chestnut.n.03) ) ) (forall (?vidalia_onion.n.01 - vidalia_onion.n.01) (and (exists (?dish.n.01 - dish.n.01) (inside ?vidalia_onion.n.01 ?dish.n.01) ) (sliced ?vidalia_onion.n.01) ) ) ) ) (:cleaning_a_car (and (not (dusty ?car.n.01_1) ) (inside ?soap.n.01_1 ?bucket.n.01_1) (inside ?rag.n.01_1 ?bucket.n.01_1) ) ) (:cleaning_barbecue_grill (and (not (stained ?grill.n.02_1) ) (not (dusty ?grill.n.02_1) ) ) ) (:cleaning_bathrooms (and (not (stained ?toilet.n.02_1) ) (not (stained ?bathtub.n.01_1) ) (not (stained ?sink.n.01_1) ) (not (stained ?floor.n.01_1) ) (and (soaked ?rag.n.01_1) (inside ?rag.n.01_1 ?bucket.n.01_1) ) ) ) (:cleaning_bathtub (and (not (stained ?bathtub.n.01_1) ) ) ) (:cleaning_bedroom (and (forall (?apparel.n.01 - apparel.n.01) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?apparel.n.01 ?cabinet.n.01) ) ) (and (inside ?jewelry.n.01_1 ?cabinet.n.01_1) (inside ?perfume.n.02_1 ?cabinet.n.01_1) ) (ontop ?sheet.n.03_1 ?bed.n.01_1) (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (nextto ?vacuum.n.04_1 ?bed.n.01_1) (ontop ?painting.n.01_1 ?sheet.n.03_1) ) ) (:cleaning_carpets (and (not (stained ?floor.n.01_1) ) ) ) (:cleaning_closet (and (forall (?jewelry.n.01 - jewelry.n.01) (inside ?jewelry.n.01 ?cabinet.n.01_3) ) (not (inside ?umbrella.n.01_1 ?cabinet.n.01_3) ) (or (inside ?hat.n.01_1 ?cabinet.n.01_1) (ontop ?hat.n.01_1 ?shelf.n.01_1) ) (forall (?sandal.n.01 - sandal.n.01) (and (nextto ?sandal.n.01 ?shelf.n.01_1) (onfloor ?sandal.n.01 ?floor.n.01_1) ) ) (not (dusty ?cabinet.n.01_3) ) (not (dusty ?shelf.n.01_1) ) (not (dusty ?floor.n.01_1) ) ) ) (:cleaning_cupboards (and (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (forall (?book.n.02 - book.n.02) (forall (?cabinet.n.01 - cabinet.n.01) (not (inside ?book.n.02 ?cabinet.n.01) ) ) ) (inside ?screwdriver.n.01_1 ?bin.n.01_1) (forall (?marker.n.03 - marker.n.03) (inside ?marker.n.03 ?bucket.n.01_1) ) (inside ?pen.n.01_1 ?bucket.n.01_1) ) ) (:cleaning_floors (and (not (stained ?floor.n.01_1) ) (not (dusty ?floor.n.01_1) ) ) ) (:cleaning_freezer (and (not (stained ?electric_refrigerator.n.01_1) ) (forall (?food.n.01 - food.n.01) (not (inside ?food.n.01 ?electric_refrigerator.n.01_1) ) ) ) ) (:cleaning_garage (and (not (dusty ?floor.n.01_1) ) (not (dusty ?cabinet.n.01_1) ) (not (stained ?cabinet.n.01_1) ) (forall (?newspaper.n.03 - newspaper.n.03) (or (inside ?newspaper.n.03 ?bin.n.01_1) (not (onfloor ?newspaper.n.03 ?floor.n.01_1) ) ) ) (forall (?bottle.n.01 - bottle.n.01) (ontop ?bottle.n.01 ?table.n.02_1) ) ) ) (:cleaning_high_chair (and (not (dusty ?highchair.n.01_1) ) ) ) (:cleaning_kitchen_cupboard (and (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (forall (?bowl.n.01 - bowl.n.01) (and (inside ?bowl.n.01 ?cabinet.n.01) (not (inside ?cup.n.01_1 ?cabinet.n.01) ) ) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (forall (?cup.n.01 - cup.n.01) (and (inside ?cup.n.01 ?cabinet.n.01) (not (inside ?bowl.n.01_1 ?cabinet.n.01) ) ) ) ) ) ) (:cleaning_microwave_oven (and (not (dusty ?microwave.n.02_1) ) (not (stained ?microwave.n.02_1) ) ) ) (:cleaning_out_drawers (and (nextto ?piece_of_cloth.n.01_1 ?sink.n.01_1) (nextto ?bowl.n.01_1 ?sink.n.01_1) (nextto ?bowl.n.01_2 ?sink.n.01_1) (nextto ?spoon.n.01_1 ?sink.n.01_1) (nextto ?spoon.n.01_2 ?sink.n.01_1) ) ) (:cleaning_oven (and (forall (?rag.n.01 - rag.n.01) (soaked ?rag.n.01) ) (soaked ?scrub_brush.n.01_1) (not (stained ?oven.n.01_1) ) ) ) (:cleaning_shoes (and (forall (?shoe.n.01 - shoe.n.01) (not (stained ?shoe.n.01) ) ) (forall (?shoe.n.01 - shoe.n.01) (not (dusty ?shoe.n.01) ) ) (onfloor ?towel.n.01_1 ?floor.n.01_1) ) ) (:cleaning_sneakers (and (ontop ?towel.n.01_1 ?countertop.n.01_1) (nextto ?brush.n.02_1 ?towel.n.01_1) (inside ?soap.n.01_1 ?sink.n.01_1) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (not (dusty ?gym_shoe.n.01) ) ) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (not (stained ?gym_shoe.n.01) ) ) (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (nextto ?gym_shoe.n.01 ?table.n.02_1) ) (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (under ?gym_shoe.n.01 ?table.n.02_1) ) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (onfloor ?gym_shoe.n.01 ?floor.n.01_1) ) ) ) (:cleaning_stove (and (not (dusty ?stove.n.01_1) ) (not (stained ?stove.n.01_1) ) (nextto ?rag.n.01_1 ?sink.n.01_1) (nextto ?dishtowel.n.01_1 ?sink.n.01_1) ) ) (:cleaning_table_after_clearing (and (not (stained ?table.n.02_1) ) ) ) (:cleaning_the_hot_tub (and (onfloor ?pool.n.01_1 ?floor.n.01_1) (not (stained ?pool.n.01_1) ) ) ) (:cleaning_the_pool (and (onfloor ?pool.n.01_1 ?floor.n.01_1) (not (stained ?pool.n.01_1) ) (ontop ?scrub_brush.n.01_1 ?shelf.n.01_1) (onfloor ?detergent.n.02_1 ?floor.n.01_1) ) ) (:cleaning_toilet (and (not (stained ?toilet.n.02_1) ) (onfloor ?scrub_brush.n.01_1 ?floor.n.01_1) (onfloor ?detergent.n.02_1 ?floor.n.01_1) ) ) (:cleaning_up_after_a_meal (and (forall (?bowl.n.01 - bowl.n.01) (not (stained ?bowl.n.01) ) ) (forall (?plate.n.04 - plate.n.04) (not (stained ?plate.n.04) ) ) (forall (?cup.n.01 - cup.n.01) (not (stained ?cup.n.01) ) ) (forall (?hamburger.n.01 - hamburger.n.01) (inside ?hamburger.n.01 ?sack.n.01_1) ) (onfloor ?sack.n.01_1 ?floor.n.01_1) (not (stained ?floor.n.01_1) ) (not (stained ?chair.n.01_2) ) (not (stained ?floor.n.01_1) ) (not (stained ?table.n.02_1) ) ) ) (:cleaning_up_refrigerator (and (forall (?rag.n.01 - rag.n.01) (nextto ?rag.n.01 ?sink.n.01_1) ) (inside ?soap.n.01_1 ?sink.n.01_1) (forall (?tray.n.01 - tray.n.01) (inside ?tray.n.01 ?electric_refrigerator.n.01_1) ) (not (stained ?tray.n.01_1) ) (not (stained ?tray.n.01_2) ) (nextto ?bowl.n.01_1 ?sink.n.01_1) (not (dusty ?bowl.n.01_1) ) (not (stained ?electric_refrigerator.n.01_1) ) ) ) (:cleaning_up_the_kitchen_only (and (ontop ?blender.n.01_1 ?countertop.n.01_1) (nextto ?soap.n.01_1 ?sink.n.01_1) (exists (?cabinet.n.01 - cabinet.n.01) (and (inside ?vegetable_oil.n.01_1 ?cabinet.n.01) (not (inside ?plate.n.04_1 ?cabinet.n.01) ) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (and (inside ?plate.n.04_1 ?cabinet.n.01) (not (inside ?vegetable_oil.n.01_1 ?cabinet.n.01) ) ) ) (and (not (dusty ?cabinet.n.01_1) ) (not (dusty ?cabinet.n.01_2) ) (not (dusty ?floor.n.01_1) ) ) (not (stained ?plate.n.04_1) ) (or (nextto ?rag.n.01_1 ?sink.n.01_1) (inside ?rag.n.01_1 ?sink.n.01_1) ) (and (inside ?casserole.n.02_1 ?electric_refrigerator.n.01_1) (inside ?apple.n.01_1 ?electric_refrigerator.n.01_1) ) ) ) (:cleaning_windows (and (and (soaked ?rag.n.01_1) (soaked ?rag.n.01_2) ) (and (not (dusty ?window.n.01_1) ) (not (dusty ?window.n.01_2) ) ) ) ) (:clearing_the_table_after_dinner (and (forall (?cup.n.01 - cup.n.01) (exists (?bucket.n.01 - bucket.n.01) (inside ?cup.n.01 ?bucket.n.01) ) ) (forall (?bowl.n.01 - bowl.n.01) (exists (?bucket.n.01 - bucket.n.01) (inside ?bowl.n.01 ?bucket.n.01) ) ) (exists (?bucket.n.01 - bucket.n.01) (inside ?catsup.n.01_1 ?bucket.n.01) ) ) ) (:collect_misplaced_items (and (ontop ?gym_shoe.n.01_1 ?table.n.02_2) (ontop ?necklace.n.01_1 ?table.n.02_2) (ontop ?notebook.n.01_1 ?table.n.02_2) (forall (?sock.n.01 - sock.n.01) (ontop ?sock.n.01 ?table.n.02_2) ) ) ) (:collecting_aluminum_cans (and (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?bucket.n.01_1) ) ) ) (:defrosting_freezer (and (nextto ?receptacle.n.01_1 ?electric_refrigerator.n.01_1) (nextto ?bucket.n.01_1 ?countertop.n.01_1) (ontop ?scraper.n.01_1 ?electric_refrigerator.n.01_1) (ontop ?towel.n.01_1 ?countertop.n.01_1) (inside ?rag.n.01_1 ?sink.n.01_1) (soaked ?rag.n.01_1) (forall (?food.n.02 - food.n.02) (inside ?food.n.02 ?bucket.n.01_1) ) ) ) (:filling_a_Christmas_stocking (and (forpairs (?stocking.n.01 - stocking.n.01) (?cube.n.05 - cube.n.05) (inside ?cube.n.05 ?stocking.n.01) ) (forpairs (?stocking.n.01 - stocking.n.01) (?candy.n.01 - candy.n.01) (inside ?candy.n.01 ?stocking.n.01) ) (forpairs (?stocking.n.01 - stocking.n.01) (?pen.n.01 - pen.n.01) (inside ?pen.n.01 ?stocking.n.01) ) ) ) (:filling_an_Easter_basket (and (forall (?basket.n.01 - basket.n.01) (ontop ?basket.n.01 ?countertop.n.01_1) ) (forpairs (?basket.n.01 - basket.n.01) (?egg.n.02 - egg.n.02) (inside ?egg.n.02 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?candy.n.01 - candy.n.01) (inside ?candy.n.01 ?basket.n.01) ) (exists (?basket.n.01 - basket.n.01) (and (inside ?jewelry.n.01_1 ?basket.n.01) (inside ?ball.n.01_1 ?basket.n.01) ) ) (forpairs (?bow.n.08 - bow.n.08) (?basket.n.01 - basket.n.01) (or (ontop ?bow.n.08 ?basket.n.01) (inside ?bow.n.08 ?basket.n.01) ) ) (forpairs (?book.n.02 - book.n.02) (?basket.n.01 - basket.n.01) (nextto ?book.n.02 ?basket.n.01) ) ) ) (:installing_a_fax_machine (and (ontop ?facsimile.n.02_1 ?table.n.02_1) (toggled_on ?facsimile.n.02_1) ) ) (:installing_a_modem (and (toggled_on ?modem.n.01_1) (under ?modem.n.01_1 ?table.n.02_1) ) ) (:installing_a_printer (and (ontop ?printer.n.03_1 ?table.n.02_1) (toggled_on ?printer.n.03_1) ) ) (:installing_a_scanner (and (toggled_on ?scanner.n.02_1) (under ?scanner.n.02_1 ?table.n.02_1) ) ) (:installing_alarms (and (forpairs (?alarm.n.02 - alarm.n.02) (?table.n.02 - table.n.02) (ontop ?alarm.n.02 ?table.n.02) ) (forall (?alarm.n.02 - alarm.n.02) (toggled_on ?alarm.n.02) ) ) ) (:laying_tile_floors (and (forall (?tile.n.01 - tile.n.01) (onfloor ?tile.n.01 ?floor.n.01_2) ) ) ) (:laying_wood_floors (and (forall (?plywood.n.01 - plywood.n.01) (onfloor ?plywood.n.01 ?floor.n.01_2) ) (forall (?plywood.n.01 - plywood.n.01) (or (nextto ?plywood.n.01 ?plywood.n.01_1) (nextto ?plywood.n.01 ?plywood.n.01_2) (nextto ?plywood.n.01 ?plywood.n.01_3) (nextto ?plywood.n.01 ?plywood.n.01_4) ) ) ) ) (:loading_the_dishwasher (and (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?dishwasher.n.01_1) ) (forall (?bowl.n.01 - bowl.n.01) (inside ?bowl.n.01 ?dishwasher.n.01_1) ) (inside ?mug.n.04_1 ?dishwasher.n.01_1) ) ) (:locking_every_door (and (not (open ?door.n.01_1) ) (not (open ?door.n.01_2) ) ) ) (:locking_every_window (and (not (open ?window.n.01_1) ) (not (open ?window.n.01_2) ) (not (open ?window.n.01_3) ) (not (open ?window.n.01_4) ) ) ) (:making_tea (and (sliced ?lemon.n.01_1) (ontop ?teapot.n.01_1 ?stove.n.01_1) (inside ?tea_bag.n.01_1 ?teapot.n.01_1) (soaked ?tea_bag.n.01_1) (toggled_on ?stove.n.01_1) ) ) (:mopping_floors (and (not (stained ?floor.n.01_1) ) (nextto ?bucket.n.01_1 ?sink.n.01_1) (inside ?soap.n.01_1 ?bucket.n.01_1) (nextto ?broom.n.01_1 ?sink.n.01_1) ) ) (:moving_boxes_to_storage (and (onfloor ?carton.n.02_1 ?floor.n.01_2) (ontop ?carton.n.02_2 ?carton.n.02_1) ) ) (:opening_packages (and (forall (?package.n.02 - package.n.02) (open ?package.n.02) ) ) ) (:opening_presents (and (forall (?package.n.02 - package.n.02) (open ?package.n.02) ) ) ) (:organizing_boxes_in_garage (and (exists (?carton.n.02 - carton.n.02) (and (forall (?ball.n.01 - ball.n.01) (inside ?ball.n.01 ?carton.n.02) ) (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?carton.n.02) ) (inside ?saucepan.n.01_1 ?carton.n.02) ) ) (forall (?carton.n.02 - carton.n.02) (onfloor ?carton.n.02 floor.n.01_1) ) ) ) (:organizing_file_cabinet (and (ontop ?marker.n.03_1 ?table.n.02_1) (forall (?document.n.01 - document.n.01) (inside ?document.n.01 ?cabinet.n.01_1) ) (forall (?folder.n.02 - folder.n.02) (inside ?folder.n.02 ?cabinet.n.01_1) ) ) ) (:organizing_school_stuff (and (and (nextto ?folder.n.02_1 ?book.n.02_1) (nextto ?folder.n.02_1 ?backpack.n.01_1) (nextto ?book.n.02_1 ?backpack.n.01_1) ) (inside ?highlighter.n.02_1 ?backpack.n.01_1) (inside ?pencil.n.01_1 ?backpack.n.01_1) (inside ?pen.n.01_1 ?backpack.n.01_1) (inside ?calculator.n.02_1 ?backpack.n.01_1) (ontop ?backpack.n.01_1 ?bed.n.01_1) ) ) (:packing_adult_s_bags (and (forall (?jewelry.n.01 - jewelry.n.01) (inside ?jewelry.n.01 ?backpack.n.01_1) ) (forall (?makeup.n.01 - makeup.n.01) (inside ?makeup.n.01 ?backpack.n.01_1) ) (inside ?toothbrush.n.01_1 ?backpack.n.01_1) (inside ?mouse.n.04_1 ?backpack.n.01_1) (onfloor ?backpack.n.01_1 ?floor.n.01_2) ) ) (:packing_bags_or_suitcase (and (forall (?underwear.n.01 - underwear.n.01) (inside ?underwear.n.01 ?backpack.n.01_1) ) (inside ?toothbrush.n.01_1 ?backpack.n.01_1) (inside ?shampoo.n.01_1 ?backpack.n.01_1) (inside ?hardback.n.01_1 ?backpack.n.01_1) (inside ?toothpaste.n.01_1 ?backpack.n.01_1) (or (ontop ?backpack.n.01_1 ?bed.n.01_1) (onfloor ?backpack.n.01_1 ?floor.n.01_1) ) ) ) (:packing_boxes_for_household_move_or_trip (and (exists (?carton.n.02 - carton.n.02) (and (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?carton.n.02) ) (inside ?dishtowel.n.01_1 ?carton.n.02) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?book.n.02 - book.n.02) (inside ?book.n.02 ?carton.n.02) ) (forall (?shirt.n.01 - shirt.n.01) (inside ?shirt.n.01 ?carton.n.02) ) (inside ?sweater.n.01_1 ?carton.n.02) ) ) ) ) (:packing_car_for_trip (and (inside briefcase.n.01_1 car.n.01_1) (inside pencil_box.n.01_1 car.n.01_1) (inside headset.n.01_1 car.n.01_1) (inside duffel_bag.n.01_1 car.n.01_1) ) ) (:packing_child_s_bag (and (nextto ?backpack.n.01_1 ?bed.n.01_1) (inside ?sunglass.n.01_1 ?backpack.n.01_1) (inside ?notebook.n.01_1 ?backpack.n.01_1) (inside ?bracelet.n.02_1 ?backpack.n.01_1) (inside ?apple.n.01_1 ?backpack.n.01_1) (inside ?earphone.n.01_1 ?backpack.n.01_1) ) ) (:packing_food_for_work (and (inside ?sandwich.n.01_1 ?carton.n.02_1) (inside ?apple.n.01_1 ?carton.n.02_1) (inside ?snack_food.n.01_1 ?carton.n.02_1) (inside ?juice.n.01_1 ?carton.n.02_1) (or (onfloor ?carton.n.02_1 ?floor.n.01_1) (ontop ?carton.n.02_1 ?countertop.n.01_1) ) ) ) (:packing_lunches (and (forpairs (?chip.n.04 - chip.n.04) (?carton.n.02 - carton.n.02) (inside ?chip.n.04 ?carton.n.02) ) (forpairs (?cookie.n.01 - cookie.n.01) (?carton.n.02 - carton.n.02) (inside ?cookie.n.01 ?carton.n.02) ) (exists (?carton.n.02 - carton.n.02) (and (inside ?salad.n.01_1 ?carton.n.02) (inside ?juice.n.01_1 ?carton.n.02) (not (inside ?sandwich.n.01_1 ?carton.n.02) ) ) ) (exists (?carton.n.02 - carton.n.02) (and (inside ?sandwich.n.01_1 ?carton.n.02) (inside ?pop.n.02_1 ?carton.n.02) (not (inside ?salad.n.01_1 ?carton.n.02) ) ) ) (or (inside ?apple.n.01_1 ?carton.n.02_1) (inside ?banana.n.02_1 ?carton.n.02_1) ) (or (inside ?apple.n.01_1 ?carton.n.02_2) (inside ?banana.n.02_1 ?carton.n.02_2) ) ) ) (:packing_picnics (and (exists (?carton.n.02 - carton.n.02) (and (forall (?chip.n.04 - chip.n.04) (inside ?chip.n.04 ?carton.n.02) ) (forall (?sandwich.n.01 - sandwich.n.01) (inside ?sandwich.n.01 ?carton.n.02) ) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?strawberry.n.01 - strawberry.n.01) (inside ?strawberry.n.01 ?carton.n.02) ) (forall (?grape.n.01 - grape.n.01) (inside ?grape.n.01 ?carton.n.02) ) (forall (?peach.n.03 - peach.n.03) (inside ?peach.n.03 ?carton.n.02) ) (nextto ?melon.n.01_1 ?carton.n.02) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?carton.n.02) ) (forall (?beer.n.01 - beer.n.01) (inside ?beer.n.01 ?carton.n.02) ) (forall (?water.n.06 - water.n.06) (inside ?water.n.06 ?carton.n.02) ) ) ) ) ) (:picking_up_take-out_food (and (forall (?carton.n.02 - carton.n.02) (ontop ?carton.n.02 ?table.n.02_1) ) (inside ?sushi.n.01_1 ?carton.n.02_1) (inside ?hamburger.n.01_1 ?carton.n.02_1) ) ) (:picking_up_trash (and (forall (?pad.n.01 - pad.n.01) (inside ?pad.n.01 ?ashcan.n.01_1) ) (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?ashcan.n.01_1) ) ) ) (:polishing_furniture (and (not (dusty ?table.n.02_1) ) (not (dusty ?shelf.n.01_1) ) (under ?rag.n.01_1 ?table.n.02_1) ) ) (:polishing_shoes (and (nextto ?rag.n.01_1 ?sink.n.01_1) (soaked ?rag.n.01_1) (and (not (stained ?shoe.n.01_1) ) (not (stained ?shoe.n.01_2) ) ) ) ) (:polishing_silver (and (not (dusty ?spoon.n.01_1) ) (not (dusty ?spoon.n.01_2) ) (not (dusty ?spoon.n.01_3) ) (not (dusty ?spoon.n.01_4) ) (not (inside ?rag.n.01_1 ?cabinet.n.01_1) ) (inside ?spoon.n.01_1 ?cabinet.n.01_1) (inside ?spoon.n.01_2 ?cabinet.n.01_1) (inside ?spoon.n.01_3 ?cabinet.n.01_1) (inside ?spoon.n.01_4 ?cabinet.n.01_1) ) ) (:preparing_a_shower_for_child (and (onfloor ?towel.n.01_1 ?floor.n.01_1) (onfloor ?shampoo.n.01_1 ?floor.n.01_1) (nextto ?soap.n.01_1 ?sink.n.01_1) ) ) (:preparing_salad (and (forpairs (?lettuce.n.03 - lettuce.n.03) (?plate.n.04 - plate.n.04) (ontop ?lettuce.n.03 ?plate.n.04) ) (forpairs (?apple.n.01 - apple.n.01) (?plate.n.04 - plate.n.04) (and (sliced ?apple.n.01) (ontop ?apple.n.01 ?plate.n.04) ) ) (forpairs (?tomato.n.01 - tomato.n.01) (?plate.n.04 - plate.n.04) (and (ontop ?tomato.n.01 ?plate.n.04) (sliced ?tomato.n.01) ) ) (forpairs (?radish.n.01 - radish.n.01) (?plate.n.04 - plate.n.04) (ontop ?radish.n.01 ?plate.n.04) ) ) ) (:preserving_food (and (forall (?strawberry.n.01 - strawberry.n.01) (sliced ?strawberry.n.01) ) (forall (?strawberry.n.01 - strawberry.n.01) (cooked ?strawberry.n.01) ) (forall (?strawberry.n.01 - strawberry.n.01) (inside ?strawberry.n.01 ?jar.n.01_1) ) (not (open ?jar.n.01_1) ) (inside ?beef.n.02_1 ?electric_refrigerator.n.01_1) (frozen ?beef.n.02_1) ) ) (:putting_away_Christmas_decorations (and (forall (?wreath.n.01 - wreath.n.01) (nextto ?wreath.n.01 ?cabinet.n.01_1) ) (forall (?bow.n.08 - bow.n.08) (nextto ?bow.n.08 ?cabinet.n.01_1) ) (forall (?ribbon.n.01 - ribbon.n.01) (inside ?ribbon.n.01 ?cabinet.n.01_1) ) ) ) (:putting_away_Halloween_decorations (and (forall (?pumpkin.n.02 - pumpkin.n.02) (inside ?pumpkin.n.02 ?cabinet.n.01_1) ) (forall (?candle.n.01 - candle.n.01) (inside ?candle.n.01 ?cabinet.n.01_1) ) (or (nextto ?sheet.n.03_1 ?table.n.02_1) (ontop ?sheet.n.03_1 ?table.n.02_1) ) (nextto ?caldron.n.01_1 ?table.n.02_1) ) ) (:putting_away_toys (and (forall (?plaything.n.01 - plaything.n.01) (exists (?carton.n.02 - carton.n.02) (inside ?plaything.n.01 ?carton.n.02) ) ) ) ) (:putting_dishes_away_after_cleaning (and (exists (?cabinet.n.01 - cabinet.n.01) (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?cabinet.n.01_1) ) ) ) ) (:putting_leftovers_away (and (forall (?pasta.n.02 - pasta.n.02) (inside ?pasta.n.02 ?electric_refrigerator.n.01_1) ) (forall (?sauce.n.01 - sauce.n.01) (inside ?sauce.n.01 ?electric_refrigerator.n.01_1) ) ) ) (:putting_up_Christmas_decorations_inside (and (forall (?wrapping.n.01 - wrapping.n.01) (or (nextto ?wrapping.n.01 ?christmas_tree.n.05_1) (under ?wrapping.n.01 ?christmas_tree.n.05_1) ) ) (forall (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_1) ) (forn (1) (?bow.n.08 - bow.n.08) (ontop ?bow.n.08 ?table.n.02_1) ) (forn (2) (?bow.n.08 - bow.n.08) (ontop ?bow.n.08 ?sofa.n.01_1) ) (ontop ?wreath.n.01_1 ?table.n.02_1) ) ) (:re-shelving_library_books (and (ontop ?book.n.02_1 ?shelf.n.01_1) (ontop ?book.n.02_2 ?shelf.n.01_1) (ontop ?book.n.02_3 ?shelf.n.01_1) (ontop ?book.n.02_4 ?shelf.n.01_1) (ontop ?book.n.02_5 ?table.n.02_1) (ontop ?book.n.02_6 ?table.n.02_1) (ontop ?book.n.02_7 ?table.n.02_1) (ontop ?book.n.02_8 ?table.n.02_1) ) ) (:rearranging_furniture (and (nextto ?lamp.n.02_1 ?door.n.01_1) (nextto ?lamp.n.02_2 ?window.n.01_1) (touching ?seat.n.03_1 ?bed.n.01_1) (nextto ?seat.n.03_2 ?window.n.01_1) ) ) (:serving_a_meal (and (forall (?plate.n.04 - plate.n.04) (ontop ?plate.n.04 ?table.n.02_1) ) (forall (?knife.n.01 - knife.n.01) (ontop ?knife.n.01 ?table.n.02_1) ) (forall (?fork.n.01 - fork.n.01) (ontop ?fork.n.01 ?table.n.02_1) ) (forpairs (?spoon.n.01 - spoon.n.01) (?soup.n.01 - soup.n.01) (nextto ?spoon.n.01 ?soup.n.01) ) (forall (?water.n.06 - water.n.06) (ontop ?water.n.06 ?table.n.02_1) ) (forpairs (?chicken.n.01 - chicken.n.01) (?plate.n.04 - plate.n.04) (ontop ?chicken.n.01 ?plate.n.04) ) (forpairs (?salad.n.01 - salad.n.01) (?plate.n.04 - plate.n.04) (nextto ?salad.n.01 ?plate.n.04) ) (forpairs (?bread.n.01 - bread.n.01) (?plate.n.04 - plate.n.04) (nextto ?bread.n.01 ?plate.n.04) ) (forpairs (?cake.n.03 - cake.n.03) (?plate.n.04 - plate.n.04) (nextto ?cake.n.03 ?plate.n.04) ) ) ) (:serving_hors_d_oeuvres (and (ontop ?tray.n.01_1 ?table.n.02_1) (forall (?cracker.n.01 - cracker.n.01) (ontop ?cracker.n.01 ?table.n.02_1) ) (forpairs (?salad.n.01 - salad.n.01) (?cracker.n.01 - cracker.n.01) (nextto ?salad.n.01 ?cracker.n.01) ) (forpairs (?cheese.n.01 - cheese.n.01) (?parsley.n.02 - parsley.n.02) (ontop ?parsley.n.02 ?cheese.n.01) ) ) ) (:setting_mousetraps (and (onfloor ?mousetrap.n.01_1 ?floor.n.01_1) (onfloor ?mousetrap.n.01_2 ?floor.n.01_1) (nextto ?mousetrap.n.01_3 ?toilet.n.02_1) (nextto ?mousetrap.n.01_4 ?toilet.n.02_1) ) ) (:setting_up_candles (and (forn (3) (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_1) ) (forn (3) (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_2) ) ) ) (:sorting_books (and (forall (?hardback.n.01 - hardback.n.01) (ontop ?hardback.n.01 ?shelf.n.01_1) ) (forall (?book.n.02 - book.n.02) (ontop ?book.n.02 ?shelf.n.01_1) ) ) ) (:sorting_groceries (and (inside ?bread.n.01_1 ?cabinet.n.01_1) (inside ?flour.n.01_1 ?cabinet.n.01_1) (and (inside ?milk.n.01_1 ?electric_refrigerator.n.01_1) (inside ?meat.n.01_1 ?electric_refrigerator.n.01_1) (inside ?cheese.n.01_1 ?electric_refrigerator.n.01_1) (inside ?yogurt.n.01_1 ?electric_refrigerator.n.01_1) (inside ?soup.n.01_1 ?electric_refrigerator.n.01_1) ) (forall (?carrot.n.03 - carrot.n.03) (and (inside ?carrot.n.03 ?electric_refrigerator.n.01_1) (or (nextto ?carrot.n.03 ?carrot.n.03_1) (nextto ?carrot.n.03 ?carrot.n.03_2) (nextto ?carrot.n.03 ?carrot.n.03_3) ) ) ) (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) (forall (?apple.n.01 - apple.n.01) (and (inside ?apple.n.01 ?electric_refrigerator.n.01_1) (or (nextto ?apple.n.01 ?apple.n.01_1) (nextto ?apple.n.01 ?apple.n.01_2) ) ) ) (forall (?orange.n.01 - orange.n.01) (and (ontop ?orange.n.01 ?table.n.02_1) (or (nextto ?orange.n.01 ?orange.n.01_1) (nextto ?orange.n.01 ?orange.n.01_2) (nextto ?orange.n.01 ?orange.n.01_3) ) ) ) ) ) (:sorting_mail (and (forall (?envelope.n.01 - envelope.n.01) (or (touching ?envelope.n.01 ?envelope.n.01_1) (touching ?envelope.n.01 ?envelope.n.01_2) (touching ?envelope.n.01 ?envelope.n.01_3) (touching ?envelope.n.01 ?envelope.n.01_4) ) ) (forall (?newspaper.n.03 - newspaper.n.03) (or (touching ?newspaper.n.03 ?newspaper.n.03_1) (touching ?newspaper.n.03 ?newspaper.n.03_2) (touching ?newspaper.n.03 ?newspaper.n.03_3) (touching ?newspaper.n.03 ?newspaper.n.03_4) ) ) ) ) (:storing_food (and (inside ?oatmeal.n.01_1 ?cabinet.n.01_1) (inside ?oatmeal.n.01_2 ?cabinet.n.01_1) (inside ?chip.n.04_1 ?cabinet.n.01_1) (inside ?chip.n.04_2 ?cabinet.n.01_1) (inside ?vegetable_oil.n.01_1 ?cabinet.n.01_1) (inside ?vegetable_oil.n.01_2 ?cabinet.n.01_1) (inside ?sugar.n.01_1 ?cabinet.n.01_1) (inside ?sugar.n.01_2 ?cabinet.n.01_1) ) ) (:storing_the_groceries (and (inside ?cereal.n.03_1 ?cabinet.n.01_1) (inside ?cereal.n.03_2 ?cabinet.n.01_1) (nextto ?cereal.n.03_1 ?cereal.n.03_2) (inside ?lettuce.n.03_1 ?electric_refrigerator.n.01_1) (inside ?lettuce.n.03_2 ?electric_refrigerator.n.01_1) (nextto ?lettuce.n.03_1 ?lettuce.n.03_2) (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) (inside ?broccoli.n.02_2 ?electric_refrigerator.n.01_1) (nextto ?broccoli.n.02_1 ?broccoli.n.02_2) (inside ?raspberry.n.02_1 ?electric_refrigerator.n.01_1) (inside ?raspberry.n.02_2 ?electric_refrigerator.n.01_1) (nextto ?raspberry.n.02_1 ?raspberry.n.02_2) (inside ?pork.n.01_1 ?electric_refrigerator.n.01_1) (inside ?pork.n.01_2 ?electric_refrigerator.n.01_1) (nextto ?pork.n.01_1 ?pork.n.01_2) ) ) (:thawing_frozen_food (and (nextto ?date.n.08_1 ?fish.n.02_1) (nextto ?fish.n.02_1 ?sink.n.01_1) (nextto ?fish.n.02_2 ?sink.n.01_1) (nextto ?fish.n.02_3 ?sink.n.01_1) (nextto ?fish.n.02_4 ?sink.n.01_1) (nextto ?olive.n.04_1 ?sink.n.01_1) ) ) (:throwing_away_leftovers (and (forall (?hamburger.n.01 - hamburger.n.01) (inside ?hamburger.n.01 ?ashcan.n.01_1) ) ) ) (:unpacking_suitcase (and (onfloor ?carton.n.02_1 ?floor.n.01_1) (forall (?sock.n.01 - sock.n.01) (ontop ?sock.n.01 ?sofa.n.01_1) ) (ontop ?perfume.n.02_1 ?sofa.n.01_1) (ontop ?toothbrush.n.01_1 ?sofa.n.01_1) (ontop ?notebook.n.01_1 ?sofa.n.01_1) ) ) (:vacuuming_floors (and (not (dusty ?floor.n.01_1) ) ) ) (:washing_cars_or_other_vehicles (and (not (dusty car.n.01_1) ) (not (stained car.n.01_1) ) ) ) (:washing_dishes (and (forall (?plate.n.04 - plate.n.04) (not (stained ?plate.n.04) ) ) (not (stained ?cup.n.01_1) ) (not (stained ?bowl.n.01_1) ) ) ) (:washing_floor (and (not (or (dusty ?floor.n.01_1) (stained ?floor.n.01_1) ) ) ) ) (:washing_pots_and_pans (and (forall (?pan.n.01 - pan.n.01) (and (not (stained ?pan.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?pan.n.01 ?cabinet.n.01) ) ) ) (forall (?kettle.n.01 - kettle.n.01) (and (not (stained ?kettle.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?kettle.n.01 ?cabinet.n.01) ) ) ) (forall (?teapot.n.01 - teapot.n.01) (and (not (stained ?teapot.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?teapot.n.01 ?cabinet.n.01) ) ) ) ) ) (:watering_houseplants (and (forall (?pot_plant.n.01 - pot_plant.n.01) (soaked ?pot_plant.n.01) ) ) ) (:waxing_cars_or_other_vehicles (and (not (dusty ?vehicle.n.01_1) ) ) ) )","title":"iGibson's BEHAVIOR"},{"location":"sim-igibson/#igibsons-behavior-stanford","text":"","title":"iGibson's BEHAVIOR: @ Stanford"},{"location":"sim-igibson/#notes-on-their-paper","text":"","title":"Notes on their paper"},{"location":"sim-igibson/#notes-on-their-implementation","text":"uses .bddl files to specify goals, which include constructs (forpairs and (forn that are used like (exists , e.g. exists two pieces of shoes are put down next to the table only objects and init that are relevant in the problem are listed in problem.bddl reconstructed video clips of one human demonstraction for each of the 100 activities in Dropbox , where image arrays are of size 128 by 128","title":"Notes on their implementation"},{"location":"sim-igibson/#predicates-used","text":"(inside ?obj1 ?obj2) (nextto ?obj1 ?obj2) (touching ?obj1 ?obj2) (ontop ?obj1 ?obj2) (onfloor ?obj1 ?obj2) (under ?obj1 ?obj2) (cooked ?obj1) (dusty ?obj1) (frozen ?obj1) (open ?obj1) (stained ?obj1) (sliced ?obj1) (soaked ?obj1) (toggled_on ?obj1) ;; mentioned but not actually used (broken ?obj1) (timeset ?obj1) (burnt ?obj1) (perished ?obj1) (screwed ?obj1)","title":"Predicates used"},{"location":"sim-igibson/#bddl-constructs","text":"(forpairs (?var1 - type2) (?var2 - type2) <condition>) specifies \"for pairs of items that satisfy the condition\": (forpairs (?stocking.n.01 - stocking.n.01) (?cube.n.05 - cube.n.05) (inside ?cube.n.05 ?stocking.n.01) ) (forn (N) (?var - type) <condition>) specifies \"for examples N items that satisfy the condition\": (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (nextto ?gym_shoe.n.01 ?table.n.02_1) ) (fornpairs specifies \"for examples N pairs of items that satisfy the condition\".","title":"BDDL constructs"},{"location":"sim-igibson/#bddl-definition-of-example-activity","text":"(define (problem brushing_lint_off_clothing_0) (:domain igibson) (:objects sweater.n.01_1 sweater.n.01_2 sweater.n.01_3 sweater.n.01_4 - sweater.n.01 floor.n.01_1 - floor.n.01 bed.n.01_1 - bed.n.01 scrub_brush.n.01_1 - scrub_brush.n.01 agent.n.01_1 - agent.n.01 ) (:init (onfloor sweater.n.01_1 floor.n.01_1) (onfloor sweater.n.01_2 floor.n.01_1) (ontop sweater.n.01_3 bed.n.01_1) (ontop sweater.n.01_4 bed.n.01_1) (dusty sweater.n.01_1) (dusty sweater.n.01_2) (dusty sweater.n.01_3) (dusty sweater.n.01_4) (onfloor scrub_brush.n.01_1 floor.n.01_1) (not (dusty scrub_brush.n.01_1) ) (inroom floor.n.01_1 bedroom) (inroom bed.n.01_1 bedroom) (onfloor agent.n.01_1 floor.n.01_1) ) (:goal (and (forall (?sweater.n.01 - sweater.n.01) (not (dusty ?sweater.n.01) ) ) (forall (?sweater.n.01 - sweater.n.01) (ontop ?sweater.n.01 ?bed.n.01_1) ) ) ) )","title":"BDDL definition of example activity"},{"location":"sim-igibson/#urdf-definition-of-example-object","text":"Objects in .bddl appear in object_scope tag in .urdf . For example, the location of sweater.n.01_1 is uniquely defined in file /igibson/data/ig_dataset/scenes/Beechwood_1_int/urdf/Beechwood_1_int_task_brushing_lint_off_clothing_0_0.urdf where /igibson/data/ig_dataset is extracted from downloaded behavior_data_bundle.zip <link bounding_box=\"0.0653052495083491 0.5302351523387753 0.41672515978519237\" category=\"sweater\" joint_positions=\"[{}]\" model=\"sweater_000\" name=\"sweater_100\" object_scope=\"sweater.n.01_1\" room=\"bedroom_0\" rpy=\"2.8526263153393647 1.5587201439643557 -1.7242493779318842\" states=\"{&quot;VerticalAdjacency&quot;: null, &quot;HorizontalAdjacency&quot;: null, &quot;ContactBodies&quot;: null, &quot;AABB&quot;: null, &quot;Pose&quot;: null, &quot;Stained&quot;: {&quot;particles&quot;: {&quot;dirt_dump&quot;: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], &quot;random_bbox_dims&quot;: [[0.026195604501169197, 0.026195604501169197, 0.004], [0.03573388195198314, 0.03573388195198314, 0.004], [0.024851839778765032, 0.024851839778765032, 0.004], [0.022419248633333857, 0.022419248633333857, 0.004], [0.03373335108174163, 0.03373335108174163, 0.004], [0.041424080732280585, 0.041424080732280585, 0.004], [0.038020350710816955, 0.038020350710816955, 0.004], [0.0329636571631501, 0.0329636571631501, 0.004], [0.02934565624343374, 0.02934565624343374, 0.004], [0.026772989501223518, 0.026772989501223518, 0.004], [0.022535692809698377, 0.022535692809698377, 0.004], [0.039959500855667116, 0.039959500855667116, 0.004], [0.029527386381408033, 0.029527386381408033, 0.004], [0.03542366024031154, 0.03542366024031154, 0.004], [0.03468628837029925, 0.03468628837029925, 0.004], [0.020809380058282288, 0.020809380058282288, 0.004], [0.025045343967904414, 0.025045343967904414, 0.004], [0.04092164786826981, 0.04092164786826981, 0.004], [0.02574179113939813, 0.02574179113939813, 0.004], [0.03457646574957623, 0.03457646574957623, 0.004]]}}, &quot;Dusty&quot;: {&quot;particles&quot;: [[null, [-6.4971513748168945, -3.404371976852417, 0.05141346901655197], [0.19125089049339294, 0.03617021441459656, -0.03086436726152897, 0.9803888201713562]], [null, [-6.446415424346924, -3.5374882221221924, 0.06482921540737152], [-0.03602251783013344, -0.010998752899467945, -0.018574034795165062, 0.9991177916526794]], [null, [-6.362188816070557, -3.3786730766296387, 0.045560769736766815], [0.009277323260903358, 0.00951681099832058, -0.5435599684715271, 0.8392651081085205]], [null, [-6.545812129974365, -3.489015817642212, 0.04524658992886543], [0.19416584074497223, -0.006309961434453726, -0.5295246839523315, 0.8257502317428589]], null, [null, [-6.408360958099365, -3.628054141998291, 0.0378640815615654], [-0.034921642392873764, 0.14623099565505981, -0.018998349085450172, 0.9884513020515442]], [null, [-6.516524791717529, -3.6305572986602783, 0.058602310717105865], [0.14024357497692108, -0.08579050004482269, -0.1966172158718109, 0.9665988683700562]], [null, [-6.485074520111084, -3.5070207118988037, 0.043625302612781525], [0.10483767837285995, 0.13317422568798065, -0.4169555902481079, 0.8929846882820129]], [null, [-6.546047210693359, -3.4792582988739014, 0.048361051827669144], [0.1851772516965866, 0.013391231186687946, -0.5655433535575867, 0.8035488128662109]], [null, [-6.631643772125244, -3.4663052558898926, 0.03845023736357689], [0.22211401164531708, -0.001216256059706211, -0.6665422916412354, 0.7116073369979858]], [null, [-6.575324058532715, -3.670689344406128, 0.044780243188142776], [0.006615441292524338, -0.10300734639167786, -0.3804311752319336, 0.9190309047698975]], [null, [-6.362612724304199, -3.7119691371917725, 0.044740889221429825], [-0.019456973299384117, 0.15591785311698914, -0.5151968002319336, 0.842545747756958]], [null, [-6.5113935470581055, -3.5679073333740234, 0.04981470853090286], [-0.14224763214588165, -0.09159466624259949, -0.4861069321632385, 0.8573657274246216]], null, [null, [-6.3777008056640625, -3.49575138092041, 0.03339405730366707], [-0.0606803297996521, 0.12671928107738495, -0.5964592695236206, 0.7902508974075317]], [null, [-6.478073596954346, -3.6925437450408936, 0.04874435067176819], [0.06432120501995087, 0.06500521302223206, -0.6130579113960266, 0.7847273945808411]], [null, [-6.367181777954102, -3.6412549018859863, 0.04565606266260147], [-0.03387808799743652, -0.12622994184494019, -0.24675683677196503, 0.9602235555648804]], null, null, [null, [-6.29764986038208, -3.3356051445007324, 0.05639209598302841], [-0.18679864704608917, -0.07720296084880829, -0.3072079122066498, 0.9299296736717224]]]}}\" xyz=\"-6.501590635708295 -3.5446136809926023 0.033868759894567044\" /> <joint name=\"j_sweater_100\" type=\"floating\"> <origin rpy=\"2.8526263153393647 1.5587201439643557 -1.7242493779318842\" xyz=\"-6.501590635708295 -3.5446136809926023 0.033868759894567044\"/> <child link=\"sweater_100\"/> <parent link=\"world\"/> </joint>","title":"URDF definition of example object"},{"location":"sim-igibson/#bddl-goal-definitions-of-100-activities","text":"(:igibson-problems (:assembling_gift_baskets (and (forpairs (?basket.n.01 - basket.n.01) (?candle.n.01 - candle.n.01) (inside ?candle.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?cheese.n.01 - cheese.n.01) (inside ?cheese.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?cookie.n.01 - cookie.n.01) (inside ?cookie.n.01 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?bow.n.08 - bow.n.08) (inside ?bow.n.08 ?basket.n.01) ) ) ) (:bottling_fruit (and (exists (?jar.n.01 - jar.n.01) (and (inside ?strawberry.n.01_1 ?jar.n.01) (not (inside ?peach.n.03_1 ?jar.n.01) ) ) ) (exists (?jar.n.01 - jar.n.01) (and (inside ?peach.n.03_1 ?jar.n.01) (not (inside ?strawberry.n.01_1 ?jar.n.01) ) ) ) (forall (?jar.n.01 - jar.n.01) (not (open ?jar.n.01) ) ) (sliced strawberry.n.01_1) (sliced peach.n.03_1) ) ) (:boxing_books_up_for_storage (and (forall (?book.n.02 - book.n.02) (inside ?book.n.02 ?carton.n.02_1) ) ) ) (:bringing_in_wood (and (forall (?plywood.n.01 - plywood.n.01) (onfloor ?plywood.n.01 ?floor.n.01_2) ) ) ) (:brushing_lint_off_clothing (and (forall (?sweater.n.01 - sweater.n.01) (not (dusty ?sweater.n.01) ) ) (forall (?sweater.n.01 - sweater.n.01) (ontop ?sweater.n.01 ?bed.n.01_1) ) ) ) (:chopping_vegetables (and (forall (?tomato.n.01 - tomato.n.01) (and (exists (?dish.n.01 - dish.n.01) (inside ?tomato.n.01 ?dish.n.01) ) (sliced ?tomato.n.01) ) ) (forall (?mushroom.n.05 - mushroom.n.05) (and (exists (?dish.n.01 - dish.n.01) (inside ?mushroom.n.05 ?dish.n.01) ) (sliced ?mushroom.n.05) ) ) (forall (?chestnut.n.03 - chestnut.n.03) (and (exists (?dish.n.01 - dish.n.01) (inside ?chestnut.n.03 ?dish.n.01) ) (sliced ?chestnut.n.03) ) ) (forall (?vidalia_onion.n.01 - vidalia_onion.n.01) (and (exists (?dish.n.01 - dish.n.01) (inside ?vidalia_onion.n.01 ?dish.n.01) ) (sliced ?vidalia_onion.n.01) ) ) ) ) (:cleaning_a_car (and (not (dusty ?car.n.01_1) ) (inside ?soap.n.01_1 ?bucket.n.01_1) (inside ?rag.n.01_1 ?bucket.n.01_1) ) ) (:cleaning_barbecue_grill (and (not (stained ?grill.n.02_1) ) (not (dusty ?grill.n.02_1) ) ) ) (:cleaning_bathrooms (and (not (stained ?toilet.n.02_1) ) (not (stained ?bathtub.n.01_1) ) (not (stained ?sink.n.01_1) ) (not (stained ?floor.n.01_1) ) (and (soaked ?rag.n.01_1) (inside ?rag.n.01_1 ?bucket.n.01_1) ) ) ) (:cleaning_bathtub (and (not (stained ?bathtub.n.01_1) ) ) ) (:cleaning_bedroom (and (forall (?apparel.n.01 - apparel.n.01) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?apparel.n.01 ?cabinet.n.01) ) ) (and (inside ?jewelry.n.01_1 ?cabinet.n.01_1) (inside ?perfume.n.02_1 ?cabinet.n.01_1) ) (ontop ?sheet.n.03_1 ?bed.n.01_1) (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (nextto ?vacuum.n.04_1 ?bed.n.01_1) (ontop ?painting.n.01_1 ?sheet.n.03_1) ) ) (:cleaning_carpets (and (not (stained ?floor.n.01_1) ) ) ) (:cleaning_closet (and (forall (?jewelry.n.01 - jewelry.n.01) (inside ?jewelry.n.01 ?cabinet.n.01_3) ) (not (inside ?umbrella.n.01_1 ?cabinet.n.01_3) ) (or (inside ?hat.n.01_1 ?cabinet.n.01_1) (ontop ?hat.n.01_1 ?shelf.n.01_1) ) (forall (?sandal.n.01 - sandal.n.01) (and (nextto ?sandal.n.01 ?shelf.n.01_1) (onfloor ?sandal.n.01 ?floor.n.01_1) ) ) (not (dusty ?cabinet.n.01_3) ) (not (dusty ?shelf.n.01_1) ) (not (dusty ?floor.n.01_1) ) ) ) (:cleaning_cupboards (and (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (forall (?book.n.02 - book.n.02) (forall (?cabinet.n.01 - cabinet.n.01) (not (inside ?book.n.02 ?cabinet.n.01) ) ) ) (inside ?screwdriver.n.01_1 ?bin.n.01_1) (forall (?marker.n.03 - marker.n.03) (inside ?marker.n.03 ?bucket.n.01_1) ) (inside ?pen.n.01_1 ?bucket.n.01_1) ) ) (:cleaning_floors (and (not (stained ?floor.n.01_1) ) (not (dusty ?floor.n.01_1) ) ) ) (:cleaning_freezer (and (not (stained ?electric_refrigerator.n.01_1) ) (forall (?food.n.01 - food.n.01) (not (inside ?food.n.01 ?electric_refrigerator.n.01_1) ) ) ) ) (:cleaning_garage (and (not (dusty ?floor.n.01_1) ) (not (dusty ?cabinet.n.01_1) ) (not (stained ?cabinet.n.01_1) ) (forall (?newspaper.n.03 - newspaper.n.03) (or (inside ?newspaper.n.03 ?bin.n.01_1) (not (onfloor ?newspaper.n.03 ?floor.n.01_1) ) ) ) (forall (?bottle.n.01 - bottle.n.01) (ontop ?bottle.n.01 ?table.n.02_1) ) ) ) (:cleaning_high_chair (and (not (dusty ?highchair.n.01_1) ) ) ) (:cleaning_kitchen_cupboard (and (forall (?cabinet.n.01 - cabinet.n.01) (not (dusty ?cabinet.n.01) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (forall (?bowl.n.01 - bowl.n.01) (and (inside ?bowl.n.01 ?cabinet.n.01) (not (inside ?cup.n.01_1 ?cabinet.n.01) ) ) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (forall (?cup.n.01 - cup.n.01) (and (inside ?cup.n.01 ?cabinet.n.01) (not (inside ?bowl.n.01_1 ?cabinet.n.01) ) ) ) ) ) ) (:cleaning_microwave_oven (and (not (dusty ?microwave.n.02_1) ) (not (stained ?microwave.n.02_1) ) ) ) (:cleaning_out_drawers (and (nextto ?piece_of_cloth.n.01_1 ?sink.n.01_1) (nextto ?bowl.n.01_1 ?sink.n.01_1) (nextto ?bowl.n.01_2 ?sink.n.01_1) (nextto ?spoon.n.01_1 ?sink.n.01_1) (nextto ?spoon.n.01_2 ?sink.n.01_1) ) ) (:cleaning_oven (and (forall (?rag.n.01 - rag.n.01) (soaked ?rag.n.01) ) (soaked ?scrub_brush.n.01_1) (not (stained ?oven.n.01_1) ) ) ) (:cleaning_shoes (and (forall (?shoe.n.01 - shoe.n.01) (not (stained ?shoe.n.01) ) ) (forall (?shoe.n.01 - shoe.n.01) (not (dusty ?shoe.n.01) ) ) (onfloor ?towel.n.01_1 ?floor.n.01_1) ) ) (:cleaning_sneakers (and (ontop ?towel.n.01_1 ?countertop.n.01_1) (nextto ?brush.n.02_1 ?towel.n.01_1) (inside ?soap.n.01_1 ?sink.n.01_1) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (not (dusty ?gym_shoe.n.01) ) ) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (not (stained ?gym_shoe.n.01) ) ) (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (nextto ?gym_shoe.n.01 ?table.n.02_1) ) (forn (2) (?gym_shoe.n.01 - gym_shoe.n.01) (under ?gym_shoe.n.01 ?table.n.02_1) ) (forall (?gym_shoe.n.01 - gym_shoe.n.01) (onfloor ?gym_shoe.n.01 ?floor.n.01_1) ) ) ) (:cleaning_stove (and (not (dusty ?stove.n.01_1) ) (not (stained ?stove.n.01_1) ) (nextto ?rag.n.01_1 ?sink.n.01_1) (nextto ?dishtowel.n.01_1 ?sink.n.01_1) ) ) (:cleaning_table_after_clearing (and (not (stained ?table.n.02_1) ) ) ) (:cleaning_the_hot_tub (and (onfloor ?pool.n.01_1 ?floor.n.01_1) (not (stained ?pool.n.01_1) ) ) ) (:cleaning_the_pool (and (onfloor ?pool.n.01_1 ?floor.n.01_1) (not (stained ?pool.n.01_1) ) (ontop ?scrub_brush.n.01_1 ?shelf.n.01_1) (onfloor ?detergent.n.02_1 ?floor.n.01_1) ) ) (:cleaning_toilet (and (not (stained ?toilet.n.02_1) ) (onfloor ?scrub_brush.n.01_1 ?floor.n.01_1) (onfloor ?detergent.n.02_1 ?floor.n.01_1) ) ) (:cleaning_up_after_a_meal (and (forall (?bowl.n.01 - bowl.n.01) (not (stained ?bowl.n.01) ) ) (forall (?plate.n.04 - plate.n.04) (not (stained ?plate.n.04) ) ) (forall (?cup.n.01 - cup.n.01) (not (stained ?cup.n.01) ) ) (forall (?hamburger.n.01 - hamburger.n.01) (inside ?hamburger.n.01 ?sack.n.01_1) ) (onfloor ?sack.n.01_1 ?floor.n.01_1) (not (stained ?floor.n.01_1) ) (not (stained ?chair.n.01_2) ) (not (stained ?floor.n.01_1) ) (not (stained ?table.n.02_1) ) ) ) (:cleaning_up_refrigerator (and (forall (?rag.n.01 - rag.n.01) (nextto ?rag.n.01 ?sink.n.01_1) ) (inside ?soap.n.01_1 ?sink.n.01_1) (forall (?tray.n.01 - tray.n.01) (inside ?tray.n.01 ?electric_refrigerator.n.01_1) ) (not (stained ?tray.n.01_1) ) (not (stained ?tray.n.01_2) ) (nextto ?bowl.n.01_1 ?sink.n.01_1) (not (dusty ?bowl.n.01_1) ) (not (stained ?electric_refrigerator.n.01_1) ) ) ) (:cleaning_up_the_kitchen_only (and (ontop ?blender.n.01_1 ?countertop.n.01_1) (nextto ?soap.n.01_1 ?sink.n.01_1) (exists (?cabinet.n.01 - cabinet.n.01) (and (inside ?vegetable_oil.n.01_1 ?cabinet.n.01) (not (inside ?plate.n.04_1 ?cabinet.n.01) ) ) ) (exists (?cabinet.n.01 - cabinet.n.01) (and (inside ?plate.n.04_1 ?cabinet.n.01) (not (inside ?vegetable_oil.n.01_1 ?cabinet.n.01) ) ) ) (and (not (dusty ?cabinet.n.01_1) ) (not (dusty ?cabinet.n.01_2) ) (not (dusty ?floor.n.01_1) ) ) (not (stained ?plate.n.04_1) ) (or (nextto ?rag.n.01_1 ?sink.n.01_1) (inside ?rag.n.01_1 ?sink.n.01_1) ) (and (inside ?casserole.n.02_1 ?electric_refrigerator.n.01_1) (inside ?apple.n.01_1 ?electric_refrigerator.n.01_1) ) ) ) (:cleaning_windows (and (and (soaked ?rag.n.01_1) (soaked ?rag.n.01_2) ) (and (not (dusty ?window.n.01_1) ) (not (dusty ?window.n.01_2) ) ) ) ) (:clearing_the_table_after_dinner (and (forall (?cup.n.01 - cup.n.01) (exists (?bucket.n.01 - bucket.n.01) (inside ?cup.n.01 ?bucket.n.01) ) ) (forall (?bowl.n.01 - bowl.n.01) (exists (?bucket.n.01 - bucket.n.01) (inside ?bowl.n.01 ?bucket.n.01) ) ) (exists (?bucket.n.01 - bucket.n.01) (inside ?catsup.n.01_1 ?bucket.n.01) ) ) ) (:collect_misplaced_items (and (ontop ?gym_shoe.n.01_1 ?table.n.02_2) (ontop ?necklace.n.01_1 ?table.n.02_2) (ontop ?notebook.n.01_1 ?table.n.02_2) (forall (?sock.n.01 - sock.n.01) (ontop ?sock.n.01 ?table.n.02_2) ) ) ) (:collecting_aluminum_cans (and (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?bucket.n.01_1) ) ) ) (:defrosting_freezer (and (nextto ?receptacle.n.01_1 ?electric_refrigerator.n.01_1) (nextto ?bucket.n.01_1 ?countertop.n.01_1) (ontop ?scraper.n.01_1 ?electric_refrigerator.n.01_1) (ontop ?towel.n.01_1 ?countertop.n.01_1) (inside ?rag.n.01_1 ?sink.n.01_1) (soaked ?rag.n.01_1) (forall (?food.n.02 - food.n.02) (inside ?food.n.02 ?bucket.n.01_1) ) ) ) (:filling_a_Christmas_stocking (and (forpairs (?stocking.n.01 - stocking.n.01) (?cube.n.05 - cube.n.05) (inside ?cube.n.05 ?stocking.n.01) ) (forpairs (?stocking.n.01 - stocking.n.01) (?candy.n.01 - candy.n.01) (inside ?candy.n.01 ?stocking.n.01) ) (forpairs (?stocking.n.01 - stocking.n.01) (?pen.n.01 - pen.n.01) (inside ?pen.n.01 ?stocking.n.01) ) ) ) (:filling_an_Easter_basket (and (forall (?basket.n.01 - basket.n.01) (ontop ?basket.n.01 ?countertop.n.01_1) ) (forpairs (?basket.n.01 - basket.n.01) (?egg.n.02 - egg.n.02) (inside ?egg.n.02 ?basket.n.01) ) (forpairs (?basket.n.01 - basket.n.01) (?candy.n.01 - candy.n.01) (inside ?candy.n.01 ?basket.n.01) ) (exists (?basket.n.01 - basket.n.01) (and (inside ?jewelry.n.01_1 ?basket.n.01) (inside ?ball.n.01_1 ?basket.n.01) ) ) (forpairs (?bow.n.08 - bow.n.08) (?basket.n.01 - basket.n.01) (or (ontop ?bow.n.08 ?basket.n.01) (inside ?bow.n.08 ?basket.n.01) ) ) (forpairs (?book.n.02 - book.n.02) (?basket.n.01 - basket.n.01) (nextto ?book.n.02 ?basket.n.01) ) ) ) (:installing_a_fax_machine (and (ontop ?facsimile.n.02_1 ?table.n.02_1) (toggled_on ?facsimile.n.02_1) ) ) (:installing_a_modem (and (toggled_on ?modem.n.01_1) (under ?modem.n.01_1 ?table.n.02_1) ) ) (:installing_a_printer (and (ontop ?printer.n.03_1 ?table.n.02_1) (toggled_on ?printer.n.03_1) ) ) (:installing_a_scanner (and (toggled_on ?scanner.n.02_1) (under ?scanner.n.02_1 ?table.n.02_1) ) ) (:installing_alarms (and (forpairs (?alarm.n.02 - alarm.n.02) (?table.n.02 - table.n.02) (ontop ?alarm.n.02 ?table.n.02) ) (forall (?alarm.n.02 - alarm.n.02) (toggled_on ?alarm.n.02) ) ) ) (:laying_tile_floors (and (forall (?tile.n.01 - tile.n.01) (onfloor ?tile.n.01 ?floor.n.01_2) ) ) ) (:laying_wood_floors (and (forall (?plywood.n.01 - plywood.n.01) (onfloor ?plywood.n.01 ?floor.n.01_2) ) (forall (?plywood.n.01 - plywood.n.01) (or (nextto ?plywood.n.01 ?plywood.n.01_1) (nextto ?plywood.n.01 ?plywood.n.01_2) (nextto ?plywood.n.01 ?plywood.n.01_3) (nextto ?plywood.n.01 ?plywood.n.01_4) ) ) ) ) (:loading_the_dishwasher (and (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?dishwasher.n.01_1) ) (forall (?bowl.n.01 - bowl.n.01) (inside ?bowl.n.01 ?dishwasher.n.01_1) ) (inside ?mug.n.04_1 ?dishwasher.n.01_1) ) ) (:locking_every_door (and (not (open ?door.n.01_1) ) (not (open ?door.n.01_2) ) ) ) (:locking_every_window (and (not (open ?window.n.01_1) ) (not (open ?window.n.01_2) ) (not (open ?window.n.01_3) ) (not (open ?window.n.01_4) ) ) ) (:making_tea (and (sliced ?lemon.n.01_1) (ontop ?teapot.n.01_1 ?stove.n.01_1) (inside ?tea_bag.n.01_1 ?teapot.n.01_1) (soaked ?tea_bag.n.01_1) (toggled_on ?stove.n.01_1) ) ) (:mopping_floors (and (not (stained ?floor.n.01_1) ) (nextto ?bucket.n.01_1 ?sink.n.01_1) (inside ?soap.n.01_1 ?bucket.n.01_1) (nextto ?broom.n.01_1 ?sink.n.01_1) ) ) (:moving_boxes_to_storage (and (onfloor ?carton.n.02_1 ?floor.n.01_2) (ontop ?carton.n.02_2 ?carton.n.02_1) ) ) (:opening_packages (and (forall (?package.n.02 - package.n.02) (open ?package.n.02) ) ) ) (:opening_presents (and (forall (?package.n.02 - package.n.02) (open ?package.n.02) ) ) ) (:organizing_boxes_in_garage (and (exists (?carton.n.02 - carton.n.02) (and (forall (?ball.n.01 - ball.n.01) (inside ?ball.n.01 ?carton.n.02) ) (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?carton.n.02) ) (inside ?saucepan.n.01_1 ?carton.n.02) ) ) (forall (?carton.n.02 - carton.n.02) (onfloor ?carton.n.02 floor.n.01_1) ) ) ) (:organizing_file_cabinet (and (ontop ?marker.n.03_1 ?table.n.02_1) (forall (?document.n.01 - document.n.01) (inside ?document.n.01 ?cabinet.n.01_1) ) (forall (?folder.n.02 - folder.n.02) (inside ?folder.n.02 ?cabinet.n.01_1) ) ) ) (:organizing_school_stuff (and (and (nextto ?folder.n.02_1 ?book.n.02_1) (nextto ?folder.n.02_1 ?backpack.n.01_1) (nextto ?book.n.02_1 ?backpack.n.01_1) ) (inside ?highlighter.n.02_1 ?backpack.n.01_1) (inside ?pencil.n.01_1 ?backpack.n.01_1) (inside ?pen.n.01_1 ?backpack.n.01_1) (inside ?calculator.n.02_1 ?backpack.n.01_1) (ontop ?backpack.n.01_1 ?bed.n.01_1) ) ) (:packing_adult_s_bags (and (forall (?jewelry.n.01 - jewelry.n.01) (inside ?jewelry.n.01 ?backpack.n.01_1) ) (forall (?makeup.n.01 - makeup.n.01) (inside ?makeup.n.01 ?backpack.n.01_1) ) (inside ?toothbrush.n.01_1 ?backpack.n.01_1) (inside ?mouse.n.04_1 ?backpack.n.01_1) (onfloor ?backpack.n.01_1 ?floor.n.01_2) ) ) (:packing_bags_or_suitcase (and (forall (?underwear.n.01 - underwear.n.01) (inside ?underwear.n.01 ?backpack.n.01_1) ) (inside ?toothbrush.n.01_1 ?backpack.n.01_1) (inside ?shampoo.n.01_1 ?backpack.n.01_1) (inside ?hardback.n.01_1 ?backpack.n.01_1) (inside ?toothpaste.n.01_1 ?backpack.n.01_1) (or (ontop ?backpack.n.01_1 ?bed.n.01_1) (onfloor ?backpack.n.01_1 ?floor.n.01_1) ) ) ) (:packing_boxes_for_household_move_or_trip (and (exists (?carton.n.02 - carton.n.02) (and (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?carton.n.02) ) (inside ?dishtowel.n.01_1 ?carton.n.02) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?book.n.02 - book.n.02) (inside ?book.n.02 ?carton.n.02) ) (forall (?shirt.n.01 - shirt.n.01) (inside ?shirt.n.01 ?carton.n.02) ) (inside ?sweater.n.01_1 ?carton.n.02) ) ) ) ) (:packing_car_for_trip (and (inside briefcase.n.01_1 car.n.01_1) (inside pencil_box.n.01_1 car.n.01_1) (inside headset.n.01_1 car.n.01_1) (inside duffel_bag.n.01_1 car.n.01_1) ) ) (:packing_child_s_bag (and (nextto ?backpack.n.01_1 ?bed.n.01_1) (inside ?sunglass.n.01_1 ?backpack.n.01_1) (inside ?notebook.n.01_1 ?backpack.n.01_1) (inside ?bracelet.n.02_1 ?backpack.n.01_1) (inside ?apple.n.01_1 ?backpack.n.01_1) (inside ?earphone.n.01_1 ?backpack.n.01_1) ) ) (:packing_food_for_work (and (inside ?sandwich.n.01_1 ?carton.n.02_1) (inside ?apple.n.01_1 ?carton.n.02_1) (inside ?snack_food.n.01_1 ?carton.n.02_1) (inside ?juice.n.01_1 ?carton.n.02_1) (or (onfloor ?carton.n.02_1 ?floor.n.01_1) (ontop ?carton.n.02_1 ?countertop.n.01_1) ) ) ) (:packing_lunches (and (forpairs (?chip.n.04 - chip.n.04) (?carton.n.02 - carton.n.02) (inside ?chip.n.04 ?carton.n.02) ) (forpairs (?cookie.n.01 - cookie.n.01) (?carton.n.02 - carton.n.02) (inside ?cookie.n.01 ?carton.n.02) ) (exists (?carton.n.02 - carton.n.02) (and (inside ?salad.n.01_1 ?carton.n.02) (inside ?juice.n.01_1 ?carton.n.02) (not (inside ?sandwich.n.01_1 ?carton.n.02) ) ) ) (exists (?carton.n.02 - carton.n.02) (and (inside ?sandwich.n.01_1 ?carton.n.02) (inside ?pop.n.02_1 ?carton.n.02) (not (inside ?salad.n.01_1 ?carton.n.02) ) ) ) (or (inside ?apple.n.01_1 ?carton.n.02_1) (inside ?banana.n.02_1 ?carton.n.02_1) ) (or (inside ?apple.n.01_1 ?carton.n.02_2) (inside ?banana.n.02_1 ?carton.n.02_2) ) ) ) (:packing_picnics (and (exists (?carton.n.02 - carton.n.02) (and (forall (?chip.n.04 - chip.n.04) (inside ?chip.n.04 ?carton.n.02) ) (forall (?sandwich.n.01 - sandwich.n.01) (inside ?sandwich.n.01 ?carton.n.02) ) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?strawberry.n.01 - strawberry.n.01) (inside ?strawberry.n.01 ?carton.n.02) ) (forall (?grape.n.01 - grape.n.01) (inside ?grape.n.01 ?carton.n.02) ) (forall (?peach.n.03 - peach.n.03) (inside ?peach.n.03 ?carton.n.02) ) (nextto ?melon.n.01_1 ?carton.n.02) ) ) (exists (?carton.n.02 - carton.n.02) (and (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?carton.n.02) ) (forall (?beer.n.01 - beer.n.01) (inside ?beer.n.01 ?carton.n.02) ) (forall (?water.n.06 - water.n.06) (inside ?water.n.06 ?carton.n.02) ) ) ) ) ) (:picking_up_take-out_food (and (forall (?carton.n.02 - carton.n.02) (ontop ?carton.n.02 ?table.n.02_1) ) (inside ?sushi.n.01_1 ?carton.n.02_1) (inside ?hamburger.n.01_1 ?carton.n.02_1) ) ) (:picking_up_trash (and (forall (?pad.n.01 - pad.n.01) (inside ?pad.n.01 ?ashcan.n.01_1) ) (forall (?pop.n.02 - pop.n.02) (inside ?pop.n.02 ?ashcan.n.01_1) ) ) ) (:polishing_furniture (and (not (dusty ?table.n.02_1) ) (not (dusty ?shelf.n.01_1) ) (under ?rag.n.01_1 ?table.n.02_1) ) ) (:polishing_shoes (and (nextto ?rag.n.01_1 ?sink.n.01_1) (soaked ?rag.n.01_1) (and (not (stained ?shoe.n.01_1) ) (not (stained ?shoe.n.01_2) ) ) ) ) (:polishing_silver (and (not (dusty ?spoon.n.01_1) ) (not (dusty ?spoon.n.01_2) ) (not (dusty ?spoon.n.01_3) ) (not (dusty ?spoon.n.01_4) ) (not (inside ?rag.n.01_1 ?cabinet.n.01_1) ) (inside ?spoon.n.01_1 ?cabinet.n.01_1) (inside ?spoon.n.01_2 ?cabinet.n.01_1) (inside ?spoon.n.01_3 ?cabinet.n.01_1) (inside ?spoon.n.01_4 ?cabinet.n.01_1) ) ) (:preparing_a_shower_for_child (and (onfloor ?towel.n.01_1 ?floor.n.01_1) (onfloor ?shampoo.n.01_1 ?floor.n.01_1) (nextto ?soap.n.01_1 ?sink.n.01_1) ) ) (:preparing_salad (and (forpairs (?lettuce.n.03 - lettuce.n.03) (?plate.n.04 - plate.n.04) (ontop ?lettuce.n.03 ?plate.n.04) ) (forpairs (?apple.n.01 - apple.n.01) (?plate.n.04 - plate.n.04) (and (sliced ?apple.n.01) (ontop ?apple.n.01 ?plate.n.04) ) ) (forpairs (?tomato.n.01 - tomato.n.01) (?plate.n.04 - plate.n.04) (and (ontop ?tomato.n.01 ?plate.n.04) (sliced ?tomato.n.01) ) ) (forpairs (?radish.n.01 - radish.n.01) (?plate.n.04 - plate.n.04) (ontop ?radish.n.01 ?plate.n.04) ) ) ) (:preserving_food (and (forall (?strawberry.n.01 - strawberry.n.01) (sliced ?strawberry.n.01) ) (forall (?strawberry.n.01 - strawberry.n.01) (cooked ?strawberry.n.01) ) (forall (?strawberry.n.01 - strawberry.n.01) (inside ?strawberry.n.01 ?jar.n.01_1) ) (not (open ?jar.n.01_1) ) (inside ?beef.n.02_1 ?electric_refrigerator.n.01_1) (frozen ?beef.n.02_1) ) ) (:putting_away_Christmas_decorations (and (forall (?wreath.n.01 - wreath.n.01) (nextto ?wreath.n.01 ?cabinet.n.01_1) ) (forall (?bow.n.08 - bow.n.08) (nextto ?bow.n.08 ?cabinet.n.01_1) ) (forall (?ribbon.n.01 - ribbon.n.01) (inside ?ribbon.n.01 ?cabinet.n.01_1) ) ) ) (:putting_away_Halloween_decorations (and (forall (?pumpkin.n.02 - pumpkin.n.02) (inside ?pumpkin.n.02 ?cabinet.n.01_1) ) (forall (?candle.n.01 - candle.n.01) (inside ?candle.n.01 ?cabinet.n.01_1) ) (or (nextto ?sheet.n.03_1 ?table.n.02_1) (ontop ?sheet.n.03_1 ?table.n.02_1) ) (nextto ?caldron.n.01_1 ?table.n.02_1) ) ) (:putting_away_toys (and (forall (?plaything.n.01 - plaything.n.01) (exists (?carton.n.02 - carton.n.02) (inside ?plaything.n.01 ?carton.n.02) ) ) ) ) (:putting_dishes_away_after_cleaning (and (exists (?cabinet.n.01 - cabinet.n.01) (forall (?plate.n.04 - plate.n.04) (inside ?plate.n.04 ?cabinet.n.01_1) ) ) ) ) (:putting_leftovers_away (and (forall (?pasta.n.02 - pasta.n.02) (inside ?pasta.n.02 ?electric_refrigerator.n.01_1) ) (forall (?sauce.n.01 - sauce.n.01) (inside ?sauce.n.01 ?electric_refrigerator.n.01_1) ) ) ) (:putting_up_Christmas_decorations_inside (and (forall (?wrapping.n.01 - wrapping.n.01) (or (nextto ?wrapping.n.01 ?christmas_tree.n.05_1) (under ?wrapping.n.01 ?christmas_tree.n.05_1) ) ) (forall (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_1) ) (forn (1) (?bow.n.08 - bow.n.08) (ontop ?bow.n.08 ?table.n.02_1) ) (forn (2) (?bow.n.08 - bow.n.08) (ontop ?bow.n.08 ?sofa.n.01_1) ) (ontop ?wreath.n.01_1 ?table.n.02_1) ) ) (:re-shelving_library_books (and (ontop ?book.n.02_1 ?shelf.n.01_1) (ontop ?book.n.02_2 ?shelf.n.01_1) (ontop ?book.n.02_3 ?shelf.n.01_1) (ontop ?book.n.02_4 ?shelf.n.01_1) (ontop ?book.n.02_5 ?table.n.02_1) (ontop ?book.n.02_6 ?table.n.02_1) (ontop ?book.n.02_7 ?table.n.02_1) (ontop ?book.n.02_8 ?table.n.02_1) ) ) (:rearranging_furniture (and (nextto ?lamp.n.02_1 ?door.n.01_1) (nextto ?lamp.n.02_2 ?window.n.01_1) (touching ?seat.n.03_1 ?bed.n.01_1) (nextto ?seat.n.03_2 ?window.n.01_1) ) ) (:serving_a_meal (and (forall (?plate.n.04 - plate.n.04) (ontop ?plate.n.04 ?table.n.02_1) ) (forall (?knife.n.01 - knife.n.01) (ontop ?knife.n.01 ?table.n.02_1) ) (forall (?fork.n.01 - fork.n.01) (ontop ?fork.n.01 ?table.n.02_1) ) (forpairs (?spoon.n.01 - spoon.n.01) (?soup.n.01 - soup.n.01) (nextto ?spoon.n.01 ?soup.n.01) ) (forall (?water.n.06 - water.n.06) (ontop ?water.n.06 ?table.n.02_1) ) (forpairs (?chicken.n.01 - chicken.n.01) (?plate.n.04 - plate.n.04) (ontop ?chicken.n.01 ?plate.n.04) ) (forpairs (?salad.n.01 - salad.n.01) (?plate.n.04 - plate.n.04) (nextto ?salad.n.01 ?plate.n.04) ) (forpairs (?bread.n.01 - bread.n.01) (?plate.n.04 - plate.n.04) (nextto ?bread.n.01 ?plate.n.04) ) (forpairs (?cake.n.03 - cake.n.03) (?plate.n.04 - plate.n.04) (nextto ?cake.n.03 ?plate.n.04) ) ) ) (:serving_hors_d_oeuvres (and (ontop ?tray.n.01_1 ?table.n.02_1) (forall (?cracker.n.01 - cracker.n.01) (ontop ?cracker.n.01 ?table.n.02_1) ) (forpairs (?salad.n.01 - salad.n.01) (?cracker.n.01 - cracker.n.01) (nextto ?salad.n.01 ?cracker.n.01) ) (forpairs (?cheese.n.01 - cheese.n.01) (?parsley.n.02 - parsley.n.02) (ontop ?parsley.n.02 ?cheese.n.01) ) ) ) (:setting_mousetraps (and (onfloor ?mousetrap.n.01_1 ?floor.n.01_1) (onfloor ?mousetrap.n.01_2 ?floor.n.01_1) (nextto ?mousetrap.n.01_3 ?toilet.n.02_1) (nextto ?mousetrap.n.01_4 ?toilet.n.02_1) ) ) (:setting_up_candles (and (forn (3) (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_1) ) (forn (3) (?candle.n.01 - candle.n.01) (ontop ?candle.n.01 ?table.n.02_2) ) ) ) (:sorting_books (and (forall (?hardback.n.01 - hardback.n.01) (ontop ?hardback.n.01 ?shelf.n.01_1) ) (forall (?book.n.02 - book.n.02) (ontop ?book.n.02 ?shelf.n.01_1) ) ) ) (:sorting_groceries (and (inside ?bread.n.01_1 ?cabinet.n.01_1) (inside ?flour.n.01_1 ?cabinet.n.01_1) (and (inside ?milk.n.01_1 ?electric_refrigerator.n.01_1) (inside ?meat.n.01_1 ?electric_refrigerator.n.01_1) (inside ?cheese.n.01_1 ?electric_refrigerator.n.01_1) (inside ?yogurt.n.01_1 ?electric_refrigerator.n.01_1) (inside ?soup.n.01_1 ?electric_refrigerator.n.01_1) ) (forall (?carrot.n.03 - carrot.n.03) (and (inside ?carrot.n.03 ?electric_refrigerator.n.01_1) (or (nextto ?carrot.n.03 ?carrot.n.03_1) (nextto ?carrot.n.03 ?carrot.n.03_2) (nextto ?carrot.n.03 ?carrot.n.03_3) ) ) ) (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) (forall (?apple.n.01 - apple.n.01) (and (inside ?apple.n.01 ?electric_refrigerator.n.01_1) (or (nextto ?apple.n.01 ?apple.n.01_1) (nextto ?apple.n.01 ?apple.n.01_2) ) ) ) (forall (?orange.n.01 - orange.n.01) (and (ontop ?orange.n.01 ?table.n.02_1) (or (nextto ?orange.n.01 ?orange.n.01_1) (nextto ?orange.n.01 ?orange.n.01_2) (nextto ?orange.n.01 ?orange.n.01_3) ) ) ) ) ) (:sorting_mail (and (forall (?envelope.n.01 - envelope.n.01) (or (touching ?envelope.n.01 ?envelope.n.01_1) (touching ?envelope.n.01 ?envelope.n.01_2) (touching ?envelope.n.01 ?envelope.n.01_3) (touching ?envelope.n.01 ?envelope.n.01_4) ) ) (forall (?newspaper.n.03 - newspaper.n.03) (or (touching ?newspaper.n.03 ?newspaper.n.03_1) (touching ?newspaper.n.03 ?newspaper.n.03_2) (touching ?newspaper.n.03 ?newspaper.n.03_3) (touching ?newspaper.n.03 ?newspaper.n.03_4) ) ) ) ) (:storing_food (and (inside ?oatmeal.n.01_1 ?cabinet.n.01_1) (inside ?oatmeal.n.01_2 ?cabinet.n.01_1) (inside ?chip.n.04_1 ?cabinet.n.01_1) (inside ?chip.n.04_2 ?cabinet.n.01_1) (inside ?vegetable_oil.n.01_1 ?cabinet.n.01_1) (inside ?vegetable_oil.n.01_2 ?cabinet.n.01_1) (inside ?sugar.n.01_1 ?cabinet.n.01_1) (inside ?sugar.n.01_2 ?cabinet.n.01_1) ) ) (:storing_the_groceries (and (inside ?cereal.n.03_1 ?cabinet.n.01_1) (inside ?cereal.n.03_2 ?cabinet.n.01_1) (nextto ?cereal.n.03_1 ?cereal.n.03_2) (inside ?lettuce.n.03_1 ?electric_refrigerator.n.01_1) (inside ?lettuce.n.03_2 ?electric_refrigerator.n.01_1) (nextto ?lettuce.n.03_1 ?lettuce.n.03_2) (inside ?broccoli.n.02_1 ?electric_refrigerator.n.01_1) (inside ?broccoli.n.02_2 ?electric_refrigerator.n.01_1) (nextto ?broccoli.n.02_1 ?broccoli.n.02_2) (inside ?raspberry.n.02_1 ?electric_refrigerator.n.01_1) (inside ?raspberry.n.02_2 ?electric_refrigerator.n.01_1) (nextto ?raspberry.n.02_1 ?raspberry.n.02_2) (inside ?pork.n.01_1 ?electric_refrigerator.n.01_1) (inside ?pork.n.01_2 ?electric_refrigerator.n.01_1) (nextto ?pork.n.01_1 ?pork.n.01_2) ) ) (:thawing_frozen_food (and (nextto ?date.n.08_1 ?fish.n.02_1) (nextto ?fish.n.02_1 ?sink.n.01_1) (nextto ?fish.n.02_2 ?sink.n.01_1) (nextto ?fish.n.02_3 ?sink.n.01_1) (nextto ?fish.n.02_4 ?sink.n.01_1) (nextto ?olive.n.04_1 ?sink.n.01_1) ) ) (:throwing_away_leftovers (and (forall (?hamburger.n.01 - hamburger.n.01) (inside ?hamburger.n.01 ?ashcan.n.01_1) ) ) ) (:unpacking_suitcase (and (onfloor ?carton.n.02_1 ?floor.n.01_1) (forall (?sock.n.01 - sock.n.01) (ontop ?sock.n.01 ?sofa.n.01_1) ) (ontop ?perfume.n.02_1 ?sofa.n.01_1) (ontop ?toothbrush.n.01_1 ?sofa.n.01_1) (ontop ?notebook.n.01_1 ?sofa.n.01_1) ) ) (:vacuuming_floors (and (not (dusty ?floor.n.01_1) ) ) ) (:washing_cars_or_other_vehicles (and (not (dusty car.n.01_1) ) (not (stained car.n.01_1) ) ) ) (:washing_dishes (and (forall (?plate.n.04 - plate.n.04) (not (stained ?plate.n.04) ) ) (not (stained ?cup.n.01_1) ) (not (stained ?bowl.n.01_1) ) ) ) (:washing_floor (and (not (or (dusty ?floor.n.01_1) (stained ?floor.n.01_1) ) ) ) ) (:washing_pots_and_pans (and (forall (?pan.n.01 - pan.n.01) (and (not (stained ?pan.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?pan.n.01 ?cabinet.n.01) ) ) ) (forall (?kettle.n.01 - kettle.n.01) (and (not (stained ?kettle.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?kettle.n.01 ?cabinet.n.01) ) ) ) (forall (?teapot.n.01 - teapot.n.01) (and (not (stained ?teapot.n.01) ) (exists (?cabinet.n.01 - cabinet.n.01) (inside ?teapot.n.01 ?cabinet.n.01) ) ) ) ) ) (:watering_houseplants (and (forall (?pot_plant.n.01 - pot_plant.n.01) (soaked ?pot_plant.n.01) ) ) ) (:waxing_cars_or_other_vehicles (and (not (dusty ?vehicle.n.01_1) ) ) ) )","title":"BDDL goal definitions of 100 activities"},{"location":"str-hpn/","text":"Pre-Strategist Hierarchical Planning in the Now (HPN) # Planning and execution tree for washing and putting away an object. Dashed arrows are subtask refinements: Washing domain, in which the robot must move object A to the washing area, wash it, and put it in the storage area: Figures taken from Kaelbling, Leslie Pack, and Tom\u00e1s Lozano-P\u00e9rez. \"Hierarchical task and motion planning in the now. In 2011 IEEE ICRA, 1470\u20131477.\" (2011).","title":"HPN"},{"location":"str-hpn/#pre-strategist-hierarchical-planning-in-the-now-hpn","text":"Planning and execution tree for washing and putting away an object. Dashed arrows are subtask refinements: Washing domain, in which the robot must move object A to the washing area, wash it, and put it in the storage area: Figures taken from Kaelbling, Leslie Pack, and Tom\u00e1s Lozano-P\u00e9rez. \"Hierarchical task and motion planning in the now. In 2011 IEEE ICRA, 1470\u20131477.\" (2011).","title":"Pre-Strategist Hierarchical Planning in the Now (HPN)"},{"location":"str-iobig/","text":"Pre-Strategist: IOBIG # Influence Graph # To prune objects and operators unrelated to the current problem, LEAP constructs Influence Graphs, analysing ungrounded operators and predicates in a domain: Types are represented in green triangles Objects (defined in problem and appeared in domain) are represented in orange inverted triangles Predicates are represented in ellipse boxes, with their positive forms in pink and negative forms in grey Operators are represented in rectangle boxes, with incoming edges from types, objects, preconditions, and conditions in conditional effects, and outgoing edges to effects The first step of analysis involves pruning any predicates and operators that are causally unrelated to the goal: Predicates appeared in goal definition are marked by double octagon, while those appeared in initial state definition are marked by double circles Predicates and operators appeared in the ancestors of goal nodes are marked in blue. The other edges and nodes are pruned. IOBIG: Ignore Objects Based on Influence Graph # t run_name var op axiom plan cost prep parse search state ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200914 obj_0, 56 932 11 48 48 0 0.472 0.0109751 177 200917 obj_0, prep=IOBIG 56 904 11 48 48 0.013 0.496 0.0109033 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200918 obj_1, 61 1522 13 55 55 0 1.176 0.019095 348 200922 obj_1, prep=IOBIG 61 1488 13 55 55 0.013 1.212 0.0204309 348 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200923 obj_2, 60 1280 13 54 54 0 0.846 0.0360807 580 200926 obj_2, prep=IOBIG 56 904 11 48 48 0.013 0.482 0.0108716 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200929 obj_3, 101 2939 56 48 48 0 2.678 0.0189154 175 200932 obj_3, prep=IOBIG 74 1804 29 48 48 0.013 1.395 0.014408 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200935 obj_4, 119 2849 11 63 63 0 1.656 0.067888 678 200937 obj_4, prep=IOBIG 56 904 11 48 48 0.014 0.487 0.0107854 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 201016 obj_5, 431 56777 11 53 53 0 36.668 0.53791 907 201023 obj_5, prep=IOBIG 56 904 11 48 48 0.015 0.493 0.01018 177","title":"IOBIG - ignore objects"},{"location":"str-iobig/#pre-strategist-iobig","text":"","title":"Pre-Strategist: IOBIG"},{"location":"str-iobig/#influence-graph","text":"To prune objects and operators unrelated to the current problem, LEAP constructs Influence Graphs, analysing ungrounded operators and predicates in a domain: Types are represented in green triangles Objects (defined in problem and appeared in domain) are represented in orange inverted triangles Predicates are represented in ellipse boxes, with their positive forms in pink and negative forms in grey Operators are represented in rectangle boxes, with incoming edges from types, objects, preconditions, and conditions in conditional effects, and outgoing edges to effects The first step of analysis involves pruning any predicates and operators that are causally unrelated to the goal: Predicates appeared in goal definition are marked by double octagon, while those appeared in initial state definition are marked by double circles Predicates and operators appeared in the ancestors of goal nodes are marked in blue. The other edges and nodes are pruned.","title":"Influence Graph"},{"location":"str-iobig/#iobig-ignore-objects-based-on-influence-graph","text":"t run_name var op axiom plan cost prep parse search state ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200914 obj_0, 56 932 11 48 48 0 0.472 0.0109751 177 200917 obj_0, prep=IOBIG 56 904 11 48 48 0.013 0.496 0.0109033 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200918 obj_1, 61 1522 13 55 55 0 1.176 0.019095 348 200922 obj_1, prep=IOBIG 61 1488 13 55 55 0.013 1.212 0.0204309 348 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200923 obj_2, 60 1280 13 54 54 0 0.846 0.0360807 580 200926 obj_2, prep=IOBIG 56 904 11 48 48 0.013 0.482 0.0108716 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200929 obj_3, 101 2939 56 48 48 0 2.678 0.0189154 175 200932 obj_3, prep=IOBIG 74 1804 29 48 48 0.013 1.395 0.014408 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 200935 obj_4, 119 2849 11 63 63 0 1.656 0.067888 678 200937 obj_4, prep=IOBIG 56 904 11 48 48 0.014 0.487 0.0107854 177 ------ ----------------- ----- ----- ------- ------ ------ ------ ------- --------- ------- 201016 obj_5, 431 56777 11 53 53 0 36.668 0.53791 907 201023 obj_5, prep=IOBIG 56 904 11 48 48 0.015 0.493 0.01018 177","title":"IOBIG: Ignore Objects Based on Influence Graph"},{"location":"str-ipbig/","text":"Ignore Preconditions Based on Influence Graphs # Results from tests/test_ipbig.sh . All tasks are planned by satisfising LAMA, on merged domain grocery_costs.pddl+kitchen_extended.pddl and problem omelette_extended.pddl IPBIG[0] : ignores agent-at IPBIG[1] : ignores holding IPBIG[3] : ignores at-loc IPBIG[5] : ignores handsfull IPBIG[7] : ignores agent-has IPBIG[8] : ignores has-seasoning t run_name var op axiom plan cost prep parse search state ------ ------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 130413 415 2952 266 57 156 0 5.409 0.0515112 475 130427 prep=IPBIG[0] 272 2570 90 48 133 0.04 5.372 2.84759 25475 130605 prep=IPBIG[1] 543 3538 237 23 38 0.039 5.08 0.00866371 54 130618 prep=IPBIG[3] 595 3957 240 52 146 0.05 6.254 0.0295362 199 130629 prep=IPBIG[5] 403 2908 264 47 163 0.06 5.346 0.0403495 180 130641 prep=IPBIG[7] 514 3549 222 40 55 0.051 5.827 0.0402433 201 130650 prep=IPBIG[8] 388 2560 266 41 133 0.055 2.114 0.0100458 104 Example refinement time costs are negligible # Refinement costs for prep=IPBIG[0] t run_name var op axiom plan cost prep parse search state ------ -------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 132617 pay-grocery-30 veggies1 149 393 170 4 4 0.041 5.448 0.000204958 4 132642 pay-grocery-30 egg2 149 393 170 1 1 0.041 5.338 0.000110542 2 132652 store-obj veggies1 268 1464 211 4 4 0.041 5.353 0.000397709 7 132717 store-obj egg2 268 1464 211 1 1 0.041 5.932 0.000291625 4 Example high level plan # Action number 2-5 are abstract actions that need to be refined (there's '---no-' in the operator name). The plan is given to the executor. An action is executed if it's primitive action and is refined if it's abstract. During refinement, IPBIG computes the grounded effects of taking the abstract action, and using it as the goal of a new planning task, whose domain includes all the original operators. open fridge1 (1) pay-grocery-30---no-shopping-at veggies1 market1 card1 robot (30) pay-grocery-30---no-shopping-at egg2 market1 card1 robot (30) store-obj---no-agent-at veggies1 fridge1 robot (1) store-obj---no-agent-at egg2 fridge1 robot (1) getout egg2 fridge1 robot (1) getout veggies1 fridge1 robot (1) getout milkbottle1 fridge1 robot (1) add-ingredient egg2 smallbowl1 robot (1) add-ingredient veggies1 smallbowl1 robot (1) pour-to-ingredient egg2 smallbowl1 nutmilk milkbottle1 cup robot (1) pour-to-ingredient egg2 smallbowl1 nutmilk milkbottle1 cup robot (1) putdown milkbottle1 burner robot (2) pickup fork1 kitchentop robot (2) mix egg2 fork1 smallbowl1 robot (3) putdown fork1 burner robot (2) pickup salter1 kitchentop robot (2) sprinkle egg2 salt salter1 cup robot (1) sprinkle egg2 salt salter1 gram robot (1) sprinkle egg2 salt salter1 gram robot (1) putdown salter1 burner robot (2) pickup shaker1 kitchentop robot (2) sprinkle egg2 pepper shaker1 cup robot (1) sprinkle egg2 pepper shaker1 gram robot (1) sprinkle egg2 pepper shaker1 gram robot (1) putdown shaker1 burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer veggies1 smallbowl1 frypan1 robot (1) transfer egg2 smallbowl1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) getout container1 dcup1 robot (1) getout oilbottle1 dcup1 robot (1) sprinkle egg2 chives container1 cup robot (1) pour-liquid oliveoil oilbottle1 frypan1 robot (2) putdown smallbowl1 burner robot (2) pickup tablespoon1 kitchentop robot (2) season egg2 chives container1 tablespoon1 robot (1) season egg2 chives container1 tablespoon1 robot (1) putdown tablespoon1 burner robot (2) pickup spatula1 kitchentop robot (2) putdown frypan1 burner robot (2) pickup fork1 burner robot (2) switchon burner frypan1 (1) fry veggies1 frypan1 burner oliveoil (5) fry egg2 frypan1 burner oliveoil (5) fold egg2 frypan1 spatula1 robot (3) declare-omelette egg2 veggies1 plate1 (1) Example refinement during execution # add includes added effect of the action del includes deleted effect of the action add-sim includes the simple literals in the current state that's not present in initial state del-sim includes the simple literals in the initial state that's not present in current state add-der includes the derived literals in the current state that's not present in initial state del-der includes the derived literals in the initial state that's not present in current state [0/47] a = open fridge1 (1) add: (opened fridge1) del: (closed fridge1) add-sim: (opened fridge1) del-sim: (closed fridge1) add-der: del-der: refinement goal: ['(paid veggies1)', '(agent-has robot veggies1)', '(agent-owns robot veggies1)', '(not (at-loc veggies1 market1))'] [1/50] a = exit-building home ashdown robot (1) add: (agent-at robot ashdown) del: (agent-at robot home) add-sim: (opened fridge1) (agent-at robot ashdown) del-sim: (closed fridge1) (agent-at robot home) add-der: del-der: [2/50] a = walk-within-area mit-campus ashdown brothers-market robot (1) add: (agent-at robot brothers-market) del: (agent-at robot ashdown) add-sim: (agent-at robot brothers-market) (opened fridge1) del-sim: (closed fridge1) (agent-at robot home) add-der: del-der: [3/50] a = enter-building market1 brothers-market robot (1) add: (agent-at robot market1) (shopping-at robot market1) del: (agent-at robot brothers-market) add-sim: (agent-at robot market1) (opened fridge1) del-sim: (closed fridge1) (agent-at robot home) add-der: (shopping-at robot market1) del-der: [4/50] a = pay-grocery-30 veggies1 market1 card1 robot (1) add: (agent-owns robot veggies1) (agent-has robot veggies1) (paid veggies1) del: (at-loc veggies1 market1) add-sim: (agent-at robot market1) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (paid veggies1) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) add-der: (shopping-at robot market1) del-der: refinement goal: ['(paid egg2)', '(agent-has robot egg2)', '(agent-owns robot egg2)', '(not (at-loc egg2 market1))'] [5/50] a = pay-grocery-30 egg2 market1 card1 robot (1) add: (agent-has robot egg2) (paid egg2) (agent-owns robot egg2) del: (at-loc egg2 market1) add-sim: (agent-at robot market1) (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: (shopping-at robot market1) del-der: refinement goal: ['(not (agent-has robot veggies1))', '(in fridge1 veggies1)'] [6/53] a = exit-building market1 brothers-market robot (1) add: (agent-at robot brothers-market) del: (agent-at robot market1) (shopping-at robot market1) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) (agent-at robot brothers-market) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: del-der: [7/53] a = walk-within-area mit-campus brothers-market ashdown robot (1) add: (agent-at robot ashdown) del: (agent-at robot brothers-market) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) (agent-at robot ashdown) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: del-der: [8/53] a = enter-building home ashdown robot (1) add: (agent-at robot home) del: (agent-at robot ashdown) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [9/53] a = store-obj veggies1 fridge1 robot (1) add: (in fridge1 veggies1) del: (agent-has robot veggies1) add-sim: (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: refinement goal: ['(not (agent-has robot egg2))', '(in fridge1 egg2)'] [10/53] a = store-obj egg2 fridge1 robot (1) add: (in fridge1 egg2) del: (agent-has robot egg2) add-sim: (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (in fridge1 egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [11/53] a = getout egg2 fridge1 robot (1) add: (handsfull robot) (holding egg2 robot) del: (in fridge1 egg2) add-sim: (handsfull robot) (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [12/53] a = getout veggies1 fridge1 robot (1) add: (holding veggies1 robot) del: (in fridge1 veggies1) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [13/53] a = getout milkbottle1 fridge1 robot (1) add: (holding milkbottle1 robot) del: (in fridge1 milkbottle1) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (holding milkbottle1 robot) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (in fridge1 milkbottle1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [14/53] a = add-ingredient egg2 smallbowl1 robot (1) add: (inside smallbowl1 egg2) del: (holding egg2 robot) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (holding milkbottle1 robot) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (inside smallbowl1 egg2) del-sim: (at-loc veggies1 market1) (in fridge1 milkbottle1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: ...","title":"IPBIG - delay precondition"},{"location":"str-ipbig/#ignore-preconditions-based-on-influence-graphs","text":"Results from tests/test_ipbig.sh . All tasks are planned by satisfising LAMA, on merged domain grocery_costs.pddl+kitchen_extended.pddl and problem omelette_extended.pddl IPBIG[0] : ignores agent-at IPBIG[1] : ignores holding IPBIG[3] : ignores at-loc IPBIG[5] : ignores handsfull IPBIG[7] : ignores agent-has IPBIG[8] : ignores has-seasoning t run_name var op axiom plan cost prep parse search state ------ ------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 130413 415 2952 266 57 156 0 5.409 0.0515112 475 130427 prep=IPBIG[0] 272 2570 90 48 133 0.04 5.372 2.84759 25475 130605 prep=IPBIG[1] 543 3538 237 23 38 0.039 5.08 0.00866371 54 130618 prep=IPBIG[3] 595 3957 240 52 146 0.05 6.254 0.0295362 199 130629 prep=IPBIG[5] 403 2908 264 47 163 0.06 5.346 0.0403495 180 130641 prep=IPBIG[7] 514 3549 222 40 55 0.051 5.827 0.0402433 201 130650 prep=IPBIG[8] 388 2560 266 41 133 0.055 2.114 0.0100458 104","title":"Ignore Preconditions Based on Influence Graphs"},{"location":"str-ipbig/#example-refinement-time-costs-are-negligible","text":"Refinement costs for prep=IPBIG[0] t run_name var op axiom plan cost prep parse search state ------ -------------------------- ----- ---- ------- ------ ------ ------ ------- ----------- ------- 132617 pay-grocery-30 veggies1 149 393 170 4 4 0.041 5.448 0.000204958 4 132642 pay-grocery-30 egg2 149 393 170 1 1 0.041 5.338 0.000110542 2 132652 store-obj veggies1 268 1464 211 4 4 0.041 5.353 0.000397709 7 132717 store-obj egg2 268 1464 211 1 1 0.041 5.932 0.000291625 4","title":"Example refinement time costs are negligible"},{"location":"str-ipbig/#example-high-level-plan","text":"Action number 2-5 are abstract actions that need to be refined (there's '---no-' in the operator name). The plan is given to the executor. An action is executed if it's primitive action and is refined if it's abstract. During refinement, IPBIG computes the grounded effects of taking the abstract action, and using it as the goal of a new planning task, whose domain includes all the original operators. open fridge1 (1) pay-grocery-30---no-shopping-at veggies1 market1 card1 robot (30) pay-grocery-30---no-shopping-at egg2 market1 card1 robot (30) store-obj---no-agent-at veggies1 fridge1 robot (1) store-obj---no-agent-at egg2 fridge1 robot (1) getout egg2 fridge1 robot (1) getout veggies1 fridge1 robot (1) getout milkbottle1 fridge1 robot (1) add-ingredient egg2 smallbowl1 robot (1) add-ingredient veggies1 smallbowl1 robot (1) pour-to-ingredient egg2 smallbowl1 nutmilk milkbottle1 cup robot (1) pour-to-ingredient egg2 smallbowl1 nutmilk milkbottle1 cup robot (1) putdown milkbottle1 burner robot (2) pickup fork1 kitchentop robot (2) mix egg2 fork1 smallbowl1 robot (3) putdown fork1 burner robot (2) pickup salter1 kitchentop robot (2) sprinkle egg2 salt salter1 cup robot (1) sprinkle egg2 salt salter1 gram robot (1) sprinkle egg2 salt salter1 gram robot (1) putdown salter1 burner robot (2) pickup shaker1 kitchentop robot (2) sprinkle egg2 pepper shaker1 cup robot (1) sprinkle egg2 pepper shaker1 gram robot (1) sprinkle egg2 pepper shaker1 gram robot (1) putdown shaker1 burner robot (2) pickup smallbowl1 kitchentop robot (2) transfer veggies1 smallbowl1 frypan1 robot (1) transfer egg2 smallbowl1 frypan1 robot (1) open dcup1 (1) getout frypan1 dcup1 robot (1) getout container1 dcup1 robot (1) getout oilbottle1 dcup1 robot (1) sprinkle egg2 chives container1 cup robot (1) pour-liquid oliveoil oilbottle1 frypan1 robot (2) putdown smallbowl1 burner robot (2) pickup tablespoon1 kitchentop robot (2) season egg2 chives container1 tablespoon1 robot (1) season egg2 chives container1 tablespoon1 robot (1) putdown tablespoon1 burner robot (2) pickup spatula1 kitchentop robot (2) putdown frypan1 burner robot (2) pickup fork1 burner robot (2) switchon burner frypan1 (1) fry veggies1 frypan1 burner oliveoil (5) fry egg2 frypan1 burner oliveoil (5) fold egg2 frypan1 spatula1 robot (3) declare-omelette egg2 veggies1 plate1 (1)","title":"Example high level plan"},{"location":"str-ipbig/#example-refinement-during-execution","text":"add includes added effect of the action del includes deleted effect of the action add-sim includes the simple literals in the current state that's not present in initial state del-sim includes the simple literals in the initial state that's not present in current state add-der includes the derived literals in the current state that's not present in initial state del-der includes the derived literals in the initial state that's not present in current state [0/47] a = open fridge1 (1) add: (opened fridge1) del: (closed fridge1) add-sim: (opened fridge1) del-sim: (closed fridge1) add-der: del-der: refinement goal: ['(paid veggies1)', '(agent-has robot veggies1)', '(agent-owns robot veggies1)', '(not (at-loc veggies1 market1))'] [1/50] a = exit-building home ashdown robot (1) add: (agent-at robot ashdown) del: (agent-at robot home) add-sim: (opened fridge1) (agent-at robot ashdown) del-sim: (closed fridge1) (agent-at robot home) add-der: del-der: [2/50] a = walk-within-area mit-campus ashdown brothers-market robot (1) add: (agent-at robot brothers-market) del: (agent-at robot ashdown) add-sim: (agent-at robot brothers-market) (opened fridge1) del-sim: (closed fridge1) (agent-at robot home) add-der: del-der: [3/50] a = enter-building market1 brothers-market robot (1) add: (agent-at robot market1) (shopping-at robot market1) del: (agent-at robot brothers-market) add-sim: (agent-at robot market1) (opened fridge1) del-sim: (closed fridge1) (agent-at robot home) add-der: (shopping-at robot market1) del-der: [4/50] a = pay-grocery-30 veggies1 market1 card1 robot (1) add: (agent-owns robot veggies1) (agent-has robot veggies1) (paid veggies1) del: (at-loc veggies1 market1) add-sim: (agent-at robot market1) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (paid veggies1) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) add-der: (shopping-at robot market1) del-der: refinement goal: ['(paid egg2)', '(agent-has robot egg2)', '(agent-owns robot egg2)', '(not (at-loc egg2 market1))'] [5/50] a = pay-grocery-30 egg2 market1 card1 robot (1) add: (agent-has robot egg2) (paid egg2) (agent-owns robot egg2) del: (at-loc egg2 market1) add-sim: (agent-at robot market1) (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: (shopping-at robot market1) del-der: refinement goal: ['(not (agent-has robot veggies1))', '(in fridge1 veggies1)'] [6/53] a = exit-building market1 brothers-market robot (1) add: (agent-at robot brothers-market) del: (agent-at robot market1) (shopping-at robot market1) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) (agent-at robot brothers-market) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: del-der: [7/53] a = walk-within-area mit-campus brothers-market ashdown robot (1) add: (agent-at robot ashdown) del: (agent-at robot brothers-market) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) (agent-at robot ashdown) del-sim: (at-loc veggies1 market1) (closed fridge1) (agent-at robot home) (at-loc egg2 market1) add-der: del-der: [8/53] a = enter-building home ashdown robot (1) add: (agent-at robot home) del: (agent-at robot ashdown) add-sim: (paid egg2) (agent-has robot veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [9/53] a = store-obj veggies1 fridge1 robot (1) add: (in fridge1 veggies1) del: (agent-has robot veggies1) add-sim: (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (agent-has robot egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: refinement goal: ['(not (agent-has robot egg2))', '(in fridge1 egg2)'] [10/53] a = store-obj egg2 fridge1 robot (1) add: (in fridge1 egg2) del: (agent-has robot egg2) add-sim: (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (in fridge1 egg2) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [11/53] a = getout egg2 fridge1 robot (1) add: (handsfull robot) (holding egg2 robot) del: (in fridge1 egg2) add-sim: (handsfull robot) (paid egg2) (in fridge1 veggies1) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [12/53] a = getout veggies1 fridge1 robot (1) add: (holding veggies1 robot) del: (in fridge1 veggies1) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [13/53] a = getout milkbottle1 fridge1 robot (1) add: (holding milkbottle1 robot) del: (in fridge1 milkbottle1) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (holding milkbottle1 robot) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (holding egg2 robot) del-sim: (at-loc veggies1 market1) (in fridge1 milkbottle1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: [14/53] a = add-ingredient egg2 smallbowl1 robot (1) add: (inside smallbowl1 egg2) del: (holding egg2 robot) add-sim: (handsfull robot) (paid egg2) (opened fridge1) (holding milkbottle1 robot) (agent-owns robot veggies1) (agent-owns robot egg2) (paid veggies1) (holding veggies1 robot) (inside smallbowl1 egg2) del-sim: (at-loc veggies1 market1) (in fridge1 milkbottle1) (closed fridge1) (at-loc egg2 market1) add-der: del-der: ...","title":"Example refinement during execution"},{"location":"str-sdbig/","text":"Separating Domains Based on Influence Graph # t run_name var op axiom plan cost prep parse search state ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123749 lama_first, 424 2831 280 56 152 0 6.02 0.108769 816 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123755 lama_first, prep=SDBIG/trial1_prb2 1 0 0 - - 3.791 1.952 (>0.04) - 123757 lama_first, prep=SDBIG/trial2_prb2 1 0 0 - - 0 2.016 (>0.05) - 123800 lama_first, prep=SDBIG/trial3_prb2 1 0 0 - - 0 2.012 (>0.05) - 123802 lama_first, prep=SDBIG/trial4_prb2 1 0 0 - - 0 2.065 (>0.05) - 123804 lama_first, prep=SDBIG/trial5_prb2 1 0 0 - - 0 1.933 (>0.05) - 123806 lama_first, prep=SDBIG/trial6_prb2 1 0 0 - - 0 2.039 (>0.05) - 123808 lama_first, prep=SDBIG/trial7_prb2 1 0 0 - - 0 2.035 (>0.06) - 123813 lama_first, prep=SDBIG/trial8_prb2 163 2068 90 46 74 0 4.961 0.0212483 207 123813 lama_first, prep=SDBIG/trial8_prb1 12 33 10 8 75 0 0.08 0.0002295 9 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123824 lama, 424 2831 280 53 142 0 6.124 0.24001813 (>3.91) ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123839 lama, prep=SDBIG/trial1_prb2 163 2068 90 45 64 3.777 5.091 0.13258815 (>4.95) 123839 lama, prep=SDBIG/trial1_prb1 12 33 10 12 71 3.777 0.079 0.00426283 191 Tarjan\u2019s algorithm for finding articulation points # In DFS tree, a vertex u is articulation point if one of the following two conditions is true: 1) u is root of DFS tree and it has at least two children. 2) u is not root of DFS tree and it has a child v such that no vertex in subtree rooted with v has a back edge to one of the ancestors (in DFS tree) of u. Tarjan\u2019s algorithm solves it in O(V+E) time","title":"SDBIG - propose subproblem -"},{"location":"str-sdbig/#separating-domains-based-on-influence-graph","text":"t run_name var op axiom plan cost prep parse search state ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123749 lama_first, 424 2831 280 56 152 0 6.02 0.108769 816 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123755 lama_first, prep=SDBIG/trial1_prb2 1 0 0 - - 3.791 1.952 (>0.04) - 123757 lama_first, prep=SDBIG/trial2_prb2 1 0 0 - - 0 2.016 (>0.05) - 123800 lama_first, prep=SDBIG/trial3_prb2 1 0 0 - - 0 2.012 (>0.05) - 123802 lama_first, prep=SDBIG/trial4_prb2 1 0 0 - - 0 2.065 (>0.05) - 123804 lama_first, prep=SDBIG/trial5_prb2 1 0 0 - - 0 1.933 (>0.05) - 123806 lama_first, prep=SDBIG/trial6_prb2 1 0 0 - - 0 2.039 (>0.05) - 123808 lama_first, prep=SDBIG/trial7_prb2 1 0 0 - - 0 2.035 (>0.06) - 123813 lama_first, prep=SDBIG/trial8_prb2 163 2068 90 46 74 0 4.961 0.0212483 207 123813 lama_first, prep=SDBIG/trial8_prb1 12 33 10 8 75 0 0.08 0.0002295 9 ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123824 lama, 424 2831 280 53 142 0 6.124 0.24001813 (>3.91) ------ ---------------------------------- ----- ---- ------- ------ ------ ------ ------- ---------- ------- 123839 lama, prep=SDBIG/trial1_prb2 163 2068 90 45 64 3.777 5.091 0.13258815 (>4.95) 123839 lama, prep=SDBIG/trial1_prb1 12 33 10 12 71 3.777 0.079 0.00426283 191","title":"Separating Domains Based on Influence Graph"},{"location":"str-sdbig/#tarjans-algorithm-for-finding-articulation-points","text":"In DFS tree, a vertex u is articulation point if one of the following two conditions is true: 1) u is root of DFS tree and it has at least two children. 2) u is not root of DFS tree and it has a child v such that no vertex in subtree rooted with v has a back edge to one of the ancestors (in DFS tree) of u. Tarjan\u2019s algorithm solves it in O(V+E) time","title":"Tarjan\u2019s algorithm for finding articulation points"}]}